/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 70.0, "minX": 0.0, "maxY": 2560.0, "series": [{"data": [[0.0, 75.0], [0.1, 75.0], [0.2, 75.0], [0.3, 75.0], [0.4, 78.0], [0.5, 78.0], [0.6, 78.0], [0.7, 80.0], [0.8, 80.0], [0.9, 80.0], [1.0, 82.0], [1.1, 82.0], [1.2, 82.0], [1.3, 82.0], [1.4, 83.0], [1.5, 83.0], [1.6, 83.0], [1.7, 83.0], [1.8, 83.0], [1.9, 83.0], [2.0, 87.0], [2.1, 87.0], [2.2, 87.0], [2.3, 87.0], [2.4, 87.0], [2.5, 87.0], [2.6, 87.0], [2.7, 88.0], [2.8, 88.0], [2.9, 88.0], [3.0, 89.0], [3.1, 89.0], [3.2, 89.0], [3.3, 89.0], [3.4, 90.0], [3.5, 90.0], [3.6, 90.0], [3.7, 92.0], [3.8, 92.0], [3.9, 92.0], [4.0, 95.0], [4.1, 95.0], [4.2, 95.0], [4.3, 95.0], [4.4, 96.0], [4.5, 96.0], [4.6, 96.0], [4.7, 99.0], [4.8, 99.0], [4.9, 99.0], [5.0, 100.0], [5.1, 100.0], [5.2, 100.0], [5.3, 100.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 105.0], [6.8, 105.0], [6.9, 105.0], [7.0, 106.0], [7.1, 106.0], [7.2, 106.0], [7.3, 106.0], [7.4, 106.0], [7.5, 106.0], [7.6, 106.0], [7.7, 106.0], [7.8, 106.0], [7.9, 106.0], [8.0, 106.0], [8.1, 106.0], [8.2, 106.0], [8.3, 106.0], [8.4, 107.0], [8.5, 107.0], [8.6, 107.0], [8.7, 109.0], [8.8, 109.0], [8.9, 109.0], [9.0, 110.0], [9.1, 110.0], [9.2, 110.0], [9.3, 110.0], [9.4, 110.0], [9.5, 110.0], [9.6, 110.0], [9.7, 111.0], [9.8, 111.0], [9.9, 111.0], [10.0, 111.0], [10.1, 111.0], [10.2, 111.0], [10.3, 111.0], [10.4, 112.0], [10.5, 112.0], [10.6, 112.0], [10.7, 112.0], [10.8, 112.0], [10.9, 112.0], [11.0, 112.0], [11.1, 112.0], [11.2, 112.0], [11.3, 112.0], [11.4, 112.0], [11.5, 112.0], [11.6, 112.0], [11.7, 113.0], [11.8, 113.0], [11.9, 113.0], [12.0, 114.0], [12.1, 114.0], [12.2, 114.0], [12.3, 114.0], [12.4, 115.0], [12.5, 115.0], [12.6, 115.0], [12.7, 115.0], [12.8, 115.0], [12.9, 115.0], [13.0, 115.0], [13.1, 115.0], [13.2, 115.0], [13.3, 115.0], [13.4, 115.0], [13.5, 115.0], [13.6, 115.0], [13.7, 115.0], [13.8, 115.0], [13.9, 115.0], [14.0, 116.0], [14.1, 116.0], [14.2, 116.0], [14.3, 116.0], [14.4, 116.0], [14.5, 116.0], [14.6, 116.0], [14.7, 117.0], [14.8, 117.0], [14.9, 117.0], [15.0, 117.0], [15.1, 117.0], [15.2, 117.0], [15.3, 117.0], [15.4, 119.0], [15.5, 119.0], [15.6, 119.0], [15.7, 119.0], [15.8, 119.0], [15.9, 119.0], [16.0, 120.0], [16.1, 120.0], [16.2, 120.0], [16.3, 120.0], [16.4, 121.0], [16.5, 121.0], [16.6, 121.0], [16.7, 122.0], [16.8, 122.0], [16.9, 122.0], [17.0, 122.0], [17.1, 122.0], [17.2, 122.0], [17.3, 122.0], [17.4, 123.0], [17.5, 123.0], [17.6, 123.0], [17.7, 124.0], [17.8, 124.0], [17.9, 124.0], [18.0, 124.0], [18.1, 124.0], [18.2, 124.0], [18.3, 124.0], [18.4, 124.0], [18.5, 124.0], [18.6, 124.0], [18.7, 124.0], [18.8, 124.0], [18.9, 124.0], [19.0, 124.0], [19.1, 124.0], [19.2, 124.0], [19.3, 124.0], [19.4, 125.0], [19.5, 125.0], [19.6, 125.0], [19.7, 125.0], [19.8, 125.0], [19.9, 125.0], [20.0, 125.0], [20.1, 125.0], [20.2, 125.0], [20.3, 125.0], [20.4, 126.0], [20.5, 126.0], [20.6, 126.0], [20.7, 126.0], [20.8, 126.0], [20.9, 126.0], [21.0, 128.0], [21.1, 128.0], [21.2, 128.0], [21.3, 128.0], [21.4, 128.0], [21.5, 128.0], [21.6, 128.0], [21.7, 129.0], [21.8, 129.0], [21.9, 129.0], [22.0, 130.0], [22.1, 130.0], [22.2, 130.0], [22.3, 130.0], [22.4, 130.0], [22.5, 130.0], [22.6, 130.0], [22.7, 130.0], [22.8, 130.0], [22.9, 130.0], [23.0, 131.0], [23.1, 131.0], [23.2, 131.0], [23.3, 131.0], [23.4, 131.0], [23.5, 131.0], [23.6, 131.0], [23.7, 131.0], [23.8, 131.0], [23.9, 131.0], [24.0, 132.0], [24.1, 132.0], [24.2, 132.0], [24.3, 132.0], [24.4, 132.0], [24.5, 132.0], [24.6, 132.0], [24.7, 133.0], [24.8, 133.0], [24.9, 133.0], [25.0, 134.0], [25.1, 134.0], [25.2, 134.0], [25.3, 134.0], [25.4, 134.0], [25.5, 134.0], [25.6, 134.0], [25.7, 135.0], [25.8, 135.0], [25.9, 135.0], [26.0, 135.0], [26.1, 135.0], [26.2, 135.0], [26.3, 135.0], [26.4, 135.0], [26.5, 135.0], [26.6, 135.0], [26.7, 136.0], [26.8, 136.0], [26.9, 136.0], [27.0, 136.0], [27.1, 136.0], [27.2, 136.0], [27.3, 136.0], [27.4, 136.0], [27.5, 136.0], [27.6, 136.0], [27.7, 137.0], [27.8, 137.0], [27.9, 137.0], [28.0, 137.0], [28.1, 137.0], [28.2, 137.0], [28.3, 137.0], [28.4, 138.0], [28.5, 138.0], [28.6, 138.0], [28.7, 138.0], [28.8, 138.0], [28.9, 138.0], [29.0, 138.0], [29.1, 140.0], [29.2, 140.0], [29.3, 140.0], [29.4, 140.0], [29.5, 140.0], [29.6, 140.0], [29.7, 140.0], [29.8, 140.0], [29.9, 140.0], [30.0, 140.0], [30.1, 140.0], [30.2, 140.0], [30.3, 140.0], [30.4, 140.0], [30.5, 140.0], [30.6, 140.0], [30.7, 140.0], [30.8, 140.0], [30.9, 140.0], [31.0, 140.0], [31.1, 140.0], [31.2, 140.0], [31.3, 140.0], [31.4, 140.0], [31.5, 140.0], [31.6, 140.0], [31.7, 141.0], [31.8, 141.0], [31.9, 141.0], [32.0, 141.0], [32.1, 141.0], [32.2, 141.0], [32.3, 141.0], [32.4, 141.0], [32.5, 141.0], [32.6, 141.0], [32.7, 142.0], [32.8, 142.0], [32.9, 142.0], [33.0, 142.0], [33.1, 142.0], [33.2, 142.0], [33.3, 142.0], [33.4, 144.0], [33.5, 144.0], [33.6, 144.0], [33.7, 144.0], [33.8, 144.0], [33.9, 144.0], [34.0, 144.0], [34.1, 144.0], [34.2, 144.0], [34.3, 144.0], [34.4, 144.0], [34.5, 144.0], [34.6, 144.0], [34.7, 146.0], [34.8, 146.0], [34.9, 146.0], [35.0, 146.0], [35.1, 147.0], [35.2, 147.0], [35.3, 147.0], [35.4, 150.0], [35.5, 150.0], [35.6, 150.0], [35.7, 150.0], [35.8, 150.0], [35.9, 150.0], [36.0, 150.0], [36.1, 150.0], [36.2, 150.0], [36.3, 150.0], [36.4, 151.0], [36.5, 151.0], [36.6, 151.0], [36.7, 152.0], [36.8, 152.0], [36.9, 152.0], [37.0, 152.0], [37.1, 152.0], [37.2, 152.0], [37.3, 152.0], [37.4, 152.0], [37.5, 152.0], [37.6, 152.0], [37.7, 153.0], [37.8, 153.0], [37.9, 153.0], [38.0, 153.0], [38.1, 155.0], [38.2, 155.0], [38.3, 155.0], [38.4, 157.0], [38.5, 157.0], [38.6, 157.0], [38.7, 160.0], [38.8, 160.0], [38.9, 160.0], [39.0, 160.0], [39.1, 161.0], [39.2, 161.0], [39.3, 161.0], [39.4, 161.0], [39.5, 161.0], [39.6, 161.0], [39.7, 163.0], [39.8, 163.0], [39.9, 163.0], [40.0, 163.0], [40.1, 167.0], [40.2, 167.0], [40.3, 167.0], [40.4, 169.0], [40.5, 169.0], [40.6, 169.0], [40.7, 170.0], [40.8, 170.0], [40.9, 170.0], [41.0, 170.0], [41.1, 172.0], [41.2, 172.0], [41.3, 172.0], [41.4, 173.0], [41.5, 173.0], [41.6, 173.0], [41.7, 173.0], [41.8, 173.0], [41.9, 173.0], [42.0, 173.0], [42.1, 175.0], [42.2, 175.0], [42.3, 175.0], [42.4, 176.0], [42.5, 176.0], [42.6, 176.0], [42.7, 176.0], [42.8, 176.0], [42.9, 176.0], [43.0, 176.0], [43.1, 177.0], [43.2, 177.0], [43.3, 177.0], [43.4, 179.0], [43.5, 179.0], [43.6, 179.0], [43.7, 181.0], [43.8, 181.0], [43.9, 181.0], [44.0, 181.0], [44.1, 185.0], [44.2, 185.0], [44.3, 185.0], [44.4, 185.0], [44.5, 185.0], [44.6, 185.0], [44.7, 185.0], [44.8, 185.0], [44.9, 185.0], [45.0, 185.0], [45.1, 187.0], [45.2, 187.0], [45.3, 187.0], [45.4, 187.0], [45.5, 187.0], [45.6, 187.0], [45.7, 189.0], [45.8, 189.0], [45.9, 189.0], [46.0, 189.0], [46.1, 189.0], [46.2, 189.0], [46.3, 189.0], [46.4, 190.0], [46.5, 190.0], [46.6, 190.0], [46.7, 191.0], [46.8, 191.0], [46.9, 191.0], [47.0, 191.0], [47.1, 191.0], [47.2, 191.0], [47.3, 191.0], [47.4, 192.0], [47.5, 192.0], [47.6, 192.0], [47.7, 193.0], [47.8, 193.0], [47.9, 193.0], [48.0, 193.0], [48.1, 193.0], [48.2, 193.0], [48.3, 193.0], [48.4, 193.0], [48.5, 193.0], [48.6, 193.0], [48.7, 194.0], [48.8, 194.0], [48.9, 194.0], [49.0, 194.0], [49.1, 195.0], [49.2, 195.0], [49.3, 195.0], [49.4, 198.0], [49.5, 198.0], [49.6, 198.0], [49.7, 211.0], [49.8, 211.0], [49.9, 211.0], [50.0, 211.0], [50.1, 214.0], [50.2, 214.0], [50.3, 214.0], [50.4, 227.0], [50.5, 227.0], [50.6, 227.0], [50.7, 228.0], [50.8, 228.0], [50.9, 228.0], [51.0, 228.0], [51.1, 230.0], [51.2, 230.0], [51.3, 230.0], [51.4, 232.0], [51.5, 232.0], [51.6, 232.0], [51.7, 235.0], [51.8, 235.0], [51.9, 235.0], [52.0, 235.0], [52.1, 241.0], [52.2, 241.0], [52.3, 241.0], [52.4, 244.0], [52.5, 244.0], [52.6, 244.0], [52.7, 245.0], [52.8, 245.0], [52.9, 245.0], [53.0, 245.0], [53.1, 251.0], [53.2, 251.0], [53.3, 251.0], [53.4, 253.0], [53.5, 253.0], [53.6, 253.0], [53.7, 256.0], [53.8, 256.0], [53.9, 256.0], [54.0, 256.0], [54.1, 258.0], [54.2, 258.0], [54.3, 258.0], [54.4, 258.0], [54.5, 258.0], [54.6, 258.0], [54.7, 258.0], [54.8, 258.0], [54.9, 258.0], [55.0, 258.0], [55.1, 261.0], [55.2, 261.0], [55.3, 261.0], [55.4, 263.0], [55.5, 263.0], [55.6, 263.0], [55.7, 278.0], [55.8, 278.0], [55.9, 278.0], [56.0, 278.0], [56.1, 298.0], [56.2, 298.0], [56.3, 298.0], [56.4, 305.0], [56.5, 305.0], [56.6, 305.0], [56.7, 310.0], [56.8, 310.0], [56.9, 310.0], [57.0, 310.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 320.0], [57.5, 320.0], [57.6, 320.0], [57.7, 321.0], [57.8, 321.0], [57.9, 321.0], [58.0, 321.0], [58.1, 321.0], [58.2, 321.0], [58.3, 321.0], [58.4, 321.0], [58.5, 321.0], [58.6, 321.0], [58.7, 328.0], [58.8, 328.0], [58.9, 328.0], [59.0, 328.0], [59.1, 328.0], [59.2, 328.0], [59.3, 328.0], [59.4, 330.0], [59.5, 330.0], [59.6, 330.0], [59.7, 333.0], [59.8, 333.0], [59.9, 333.0], [60.0, 333.0], [60.1, 334.0], [60.2, 334.0], [60.3, 334.0], [60.4, 334.0], [60.5, 334.0], [60.6, 334.0], [60.7, 334.0], [60.8, 334.0], [60.9, 334.0], [61.0, 334.0], [61.1, 336.0], [61.2, 336.0], [61.3, 336.0], [61.4, 337.0], [61.5, 337.0], [61.6, 337.0], [61.7, 339.0], [61.8, 339.0], [61.9, 339.0], [62.0, 339.0], [62.1, 342.0], [62.2, 342.0], [62.3, 342.0], [62.4, 344.0], [62.5, 344.0], [62.6, 344.0], [62.7, 346.0], [62.8, 346.0], [62.9, 346.0], [63.0, 346.0], [63.1, 347.0], [63.2, 347.0], [63.3, 347.0], [63.4, 347.0], [63.5, 347.0], [63.6, 347.0], [63.7, 348.0], [63.8, 348.0], [63.9, 348.0], [64.0, 348.0], [64.1, 348.0], [64.2, 348.0], [64.3, 348.0], [64.4, 348.0], [64.5, 348.0], [64.6, 348.0], [64.7, 350.0], [64.8, 350.0], [64.9, 350.0], [65.0, 350.0], [65.1, 357.0], [65.2, 357.0], [65.3, 357.0], [65.4, 360.0], [65.5, 360.0], [65.6, 360.0], [65.7, 361.0], [65.8, 361.0], [65.9, 361.0], [66.0, 361.0], [66.1, 372.0], [66.2, 372.0], [66.3, 372.0], [66.4, 373.0], [66.5, 373.0], [66.6, 373.0], [66.7, 376.0], [66.8, 376.0], [66.9, 376.0], [67.0, 376.0], [67.1, 378.0], [67.2, 378.0], [67.3, 378.0], [67.4, 380.0], [67.5, 380.0], [67.6, 380.0], [67.7, 382.0], [67.8, 382.0], [67.9, 382.0], [68.0, 382.0], [68.1, 383.0], [68.2, 383.0], [68.3, 383.0], [68.4, 384.0], [68.5, 384.0], [68.6, 384.0], [68.7, 386.0], [68.8, 386.0], [68.9, 386.0], [69.0, 386.0], [69.1, 386.0], [69.2, 386.0], [69.3, 386.0], [69.4, 395.0], [69.5, 395.0], [69.6, 395.0], [69.7, 418.0], [69.8, 418.0], [69.9, 418.0], [70.0, 418.0], [70.1, 418.0], [70.2, 418.0], [70.3, 418.0], [70.4, 451.0], [70.5, 451.0], [70.6, 451.0], [70.7, 455.0], [70.8, 455.0], [70.9, 455.0], [71.0, 455.0], [71.1, 483.0], [71.2, 483.0], [71.3, 483.0], [71.4, 494.0], [71.5, 494.0], [71.6, 494.0], [71.7, 494.0], [71.8, 494.0], [71.9, 494.0], [72.0, 494.0], [72.1, 498.0], [72.2, 498.0], [72.3, 498.0], [72.4, 504.0], [72.5, 504.0], [72.6, 504.0], [72.7, 531.0], [72.8, 531.0], [72.9, 531.0], [73.0, 531.0], [73.1, 542.0], [73.2, 542.0], [73.3, 542.0], [73.4, 544.0], [73.5, 544.0], [73.6, 544.0], [73.7, 546.0], [73.8, 546.0], [73.9, 546.0], [74.0, 546.0], [74.1, 561.0], [74.2, 561.0], [74.3, 561.0], [74.4, 564.0], [74.5, 564.0], [74.6, 564.0], [74.7, 572.0], [74.8, 572.0], [74.9, 572.0], [75.0, 585.0], [75.1, 585.0], [75.2, 585.0], [75.3, 585.0], [75.4, 588.0], [75.5, 588.0], [75.6, 588.0], [75.7, 590.0], [75.8, 590.0], [75.9, 590.0], [76.0, 591.0], [76.1, 591.0], [76.2, 591.0], [76.3, 591.0], [76.4, 607.0], [76.5, 607.0], [76.6, 607.0], [76.7, 612.0], [76.8, 612.0], [76.9, 612.0], [77.0, 613.0], [77.1, 613.0], [77.2, 613.0], [77.3, 613.0], [77.4, 613.0], [77.5, 613.0], [77.6, 613.0], [77.7, 613.0], [77.8, 613.0], [77.9, 613.0], [78.0, 622.0], [78.1, 622.0], [78.2, 622.0], [78.3, 622.0], [78.4, 622.0], [78.5, 622.0], [78.6, 622.0], [78.7, 623.0], [78.8, 623.0], [78.9, 623.0], [79.0, 625.0], [79.1, 625.0], [79.2, 625.0], [79.3, 625.0], [79.4, 626.0], [79.5, 626.0], [79.6, 626.0], [79.7, 634.0], [79.8, 634.0], [79.9, 634.0], [80.0, 635.0], [80.1, 635.0], [80.2, 635.0], [80.3, 635.0], [80.4, 635.0], [80.5, 635.0], [80.6, 635.0], [80.7, 637.0], [80.8, 637.0], [80.9, 637.0], [81.0, 646.0], [81.1, 646.0], [81.2, 646.0], [81.3, 646.0], [81.4, 658.0], [81.5, 658.0], [81.6, 658.0], [81.7, 659.0], [81.8, 659.0], [81.9, 659.0], [82.0, 660.0], [82.1, 660.0], [82.2, 660.0], [82.3, 660.0], [82.4, 688.0], [82.5, 688.0], [82.6, 688.0], [82.7, 693.0], [82.8, 693.0], [82.9, 693.0], [83.0, 705.0], [83.1, 705.0], [83.2, 705.0], [83.3, 705.0], [83.4, 707.0], [83.5, 707.0], [83.6, 707.0], [83.7, 714.0], [83.8, 714.0], [83.9, 714.0], [84.0, 717.0], [84.1, 717.0], [84.2, 717.0], [84.3, 717.0], [84.4, 722.0], [84.5, 722.0], [84.6, 722.0], [84.7, 734.0], [84.8, 734.0], [84.9, 734.0], [85.0, 734.0], [85.1, 734.0], [85.2, 734.0], [85.3, 734.0], [85.4, 737.0], [85.5, 737.0], [85.6, 737.0], [85.7, 737.0], [85.8, 737.0], [85.9, 737.0], [86.0, 746.0], [86.1, 746.0], [86.2, 746.0], [86.3, 746.0], [86.4, 746.0], [86.5, 746.0], [86.6, 746.0], [86.7, 747.0], [86.8, 747.0], [86.9, 747.0], [87.0, 747.0], [87.1, 747.0], [87.2, 747.0], [87.3, 747.0], [87.4, 762.0], [87.5, 762.0], [87.6, 762.0], [87.7, 801.0], [87.8, 801.0], [87.9, 801.0], [88.0, 802.0], [88.1, 802.0], [88.2, 802.0], [88.3, 802.0], [88.4, 858.0], [88.5, 858.0], [88.6, 858.0], [88.7, 884.0], [88.8, 884.0], [88.9, 884.0], [89.0, 888.0], [89.1, 888.0], [89.2, 888.0], [89.3, 888.0], [89.4, 893.0], [89.5, 893.0], [89.6, 893.0], [89.7, 906.0], [89.8, 906.0], [89.9, 906.0], [90.0, 908.0], [90.1, 908.0], [90.2, 908.0], [90.3, 908.0], [90.4, 923.0], [90.5, 923.0], [90.6, 923.0], [90.7, 924.0], [90.8, 924.0], [90.9, 924.0], [91.0, 924.0], [91.1, 924.0], [91.2, 924.0], [91.3, 924.0], [91.4, 925.0], [91.5, 925.0], [91.6, 925.0], [91.7, 931.0], [91.8, 931.0], [91.9, 931.0], [92.0, 935.0], [92.1, 935.0], [92.2, 935.0], [92.3, 935.0], [92.4, 937.0], [92.5, 937.0], [92.6, 937.0], [92.7, 941.0], [92.8, 941.0], [92.9, 941.0], [93.0, 949.0], [93.1, 949.0], [93.2, 949.0], [93.3, 949.0], [93.4, 952.0], [93.5, 952.0], [93.6, 952.0], [93.7, 969.0], [93.8, 969.0], [93.9, 969.0], [94.0, 971.0], [94.1, 971.0], [94.2, 971.0], [94.3, 971.0], [94.4, 984.0], [94.5, 984.0], [94.6, 984.0], [94.7, 988.0], [94.8, 988.0], [94.9, 988.0], [95.0, 998.0], [95.1, 998.0], [95.2, 998.0], [95.3, 998.0], [95.4, 1004.0], [95.5, 1004.0], [95.6, 1004.0], [95.7, 1014.0], [95.8, 1014.0], [95.9, 1014.0], [96.0, 1023.0], [96.1, 1023.0], [96.2, 1023.0], [96.3, 1023.0], [96.4, 1044.0], [96.5, 1044.0], [96.6, 1044.0], [96.7, 1111.0], [96.8, 1111.0], [96.9, 1111.0], [97.0, 1140.0], [97.1, 1140.0], [97.2, 1140.0], [97.3, 1140.0], [97.4, 1140.0], [97.5, 1140.0], [97.6, 1140.0], [97.7, 1143.0], [97.8, 1143.0], [97.9, 1143.0], [98.0, 1150.0], [98.1, 1150.0], [98.2, 1150.0], [98.3, 1150.0], [98.4, 1154.0], [98.5, 1154.0], [98.6, 1154.0], [98.7, 1155.0], [98.8, 1155.0], [98.9, 1155.0], [99.0, 1156.0], [99.1, 1156.0], [99.2, 1156.0], [99.3, 1156.0], [99.4, 1157.0], [99.5, 1157.0], [99.6, 1157.0], [99.7, 1261.0], [99.8, 1261.0], [99.9, 1261.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 103.0], [0.1, 103.0], [0.2, 103.0], [0.3, 103.0], [0.4, 111.0], [0.5, 111.0], [0.6, 111.0], [0.7, 113.0], [0.8, 113.0], [0.9, 113.0], [1.0, 121.0], [1.1, 121.0], [1.2, 121.0], [1.3, 121.0], [1.4, 123.0], [1.5, 123.0], [1.6, 123.0], [1.7, 125.0], [1.8, 125.0], [1.9, 125.0], [2.0, 126.0], [2.1, 126.0], [2.2, 126.0], [2.3, 126.0], [2.4, 129.0], [2.5, 129.0], [2.6, 129.0], [2.7, 132.0], [2.8, 132.0], [2.9, 132.0], [3.0, 135.0], [3.1, 135.0], [3.2, 135.0], [3.3, 135.0], [3.4, 136.0], [3.5, 136.0], [3.6, 136.0], [3.7, 142.0], [3.8, 142.0], [3.9, 142.0], [4.0, 143.0], [4.1, 143.0], [4.2, 143.0], [4.3, 143.0], [4.4, 144.0], [4.5, 144.0], [4.6, 144.0], [4.7, 145.0], [4.8, 145.0], [4.9, 145.0], [5.0, 145.0], [5.1, 145.0], [5.2, 145.0], [5.3, 145.0], [5.4, 146.0], [5.5, 146.0], [5.6, 146.0], [5.7, 146.0], [5.8, 146.0], [5.9, 146.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 149.0], [6.5, 149.0], [6.6, 149.0], [6.7, 150.0], [6.8, 150.0], [6.9, 150.0], [7.0, 150.0], [7.1, 150.0], [7.2, 150.0], [7.3, 150.0], [7.4, 152.0], [7.5, 152.0], [7.6, 152.0], [7.7, 152.0], [7.8, 152.0], [7.9, 152.0], [8.0, 153.0], [8.1, 153.0], [8.2, 153.0], [8.3, 153.0], [8.4, 158.0], [8.5, 158.0], [8.6, 158.0], [8.7, 163.0], [8.8, 163.0], [8.9, 163.0], [9.0, 163.0], [9.1, 164.0], [9.2, 164.0], [9.3, 164.0], [9.4, 164.0], [9.5, 164.0], [9.6, 164.0], [9.7, 165.0], [9.8, 165.0], [9.9, 165.0], [10.0, 165.0], [10.1, 165.0], [10.2, 165.0], [10.3, 165.0], [10.4, 170.0], [10.5, 170.0], [10.6, 170.0], [10.7, 172.0], [10.8, 172.0], [10.9, 172.0], [11.0, 172.0], [11.1, 175.0], [11.2, 175.0], [11.3, 175.0], [11.4, 175.0], [11.5, 175.0], [11.6, 175.0], [11.7, 178.0], [11.8, 178.0], [11.9, 178.0], [12.0, 178.0], [12.1, 179.0], [12.2, 179.0], [12.3, 179.0], [12.4, 179.0], [12.5, 179.0], [12.6, 179.0], [12.7, 180.0], [12.8, 180.0], [12.9, 180.0], [13.0, 180.0], [13.1, 188.0], [13.2, 188.0], [13.3, 188.0], [13.4, 188.0], [13.5, 188.0], [13.6, 188.0], [13.7, 189.0], [13.8, 189.0], [13.9, 189.0], [14.0, 189.0], [14.1, 190.0], [14.2, 190.0], [14.3, 190.0], [14.4, 191.0], [14.5, 191.0], [14.6, 191.0], [14.7, 191.0], [14.8, 191.0], [14.9, 191.0], [15.0, 191.0], [15.1, 192.0], [15.2, 192.0], [15.3, 192.0], [15.4, 193.0], [15.5, 193.0], [15.6, 193.0], [15.7, 193.0], [15.8, 193.0], [15.9, 193.0], [16.0, 193.0], [16.1, 196.0], [16.2, 196.0], [16.3, 196.0], [16.4, 198.0], [16.5, 198.0], [16.6, 198.0], [16.7, 198.0], [16.8, 198.0], [16.9, 198.0], [17.0, 198.0], [17.1, 200.0], [17.2, 200.0], [17.3, 200.0], [17.4, 205.0], [17.5, 205.0], [17.6, 205.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 208.0], [18.1, 208.0], [18.2, 208.0], [18.3, 208.0], [18.4, 211.0], [18.5, 211.0], [18.6, 211.0], [18.7, 216.0], [18.8, 216.0], [18.9, 216.0], [19.0, 222.0], [19.1, 222.0], [19.2, 222.0], [19.3, 222.0], [19.4, 230.0], [19.5, 230.0], [19.6, 230.0], [19.7, 231.0], [19.8, 231.0], [19.9, 231.0], [20.0, 231.0], [20.1, 231.0], [20.2, 231.0], [20.3, 231.0], [20.4, 247.0], [20.5, 247.0], [20.6, 247.0], [20.7, 251.0], [20.8, 251.0], [20.9, 251.0], [21.0, 256.0], [21.1, 256.0], [21.2, 256.0], [21.3, 256.0], [21.4, 256.0], [21.5, 256.0], [21.6, 256.0], [21.7, 259.0], [21.8, 259.0], [21.9, 259.0], [22.0, 260.0], [22.1, 260.0], [22.2, 260.0], [22.3, 260.0], [22.4, 261.0], [22.5, 261.0], [22.6, 261.0], [22.7, 261.0], [22.8, 261.0], [22.9, 261.0], [23.0, 261.0], [23.1, 261.0], [23.2, 261.0], [23.3, 261.0], [23.4, 267.0], [23.5, 267.0], [23.6, 267.0], [23.7, 272.0], [23.8, 272.0], [23.9, 272.0], [24.0, 274.0], [24.1, 274.0], [24.2, 274.0], [24.3, 274.0], [24.4, 274.0], [24.5, 274.0], [24.6, 274.0], [24.7, 284.0], [24.8, 284.0], [24.9, 284.0], [25.0, 285.0], [25.1, 285.0], [25.2, 285.0], [25.3, 285.0], [25.4, 286.0], [25.5, 286.0], [25.6, 286.0], [25.7, 294.0], [25.8, 294.0], [25.9, 294.0], [26.0, 298.0], [26.1, 298.0], [26.2, 298.0], [26.3, 298.0], [26.4, 301.0], [26.5, 301.0], [26.6, 301.0], [26.7, 309.0], [26.8, 309.0], [26.9, 309.0], [27.0, 311.0], [27.1, 311.0], [27.2, 311.0], [27.3, 311.0], [27.4, 318.0], [27.5, 318.0], [27.6, 318.0], [27.7, 321.0], [27.8, 321.0], [27.9, 321.0], [28.0, 324.0], [28.1, 324.0], [28.2, 324.0], [28.3, 324.0], [28.4, 368.0], [28.5, 368.0], [28.6, 368.0], [28.7, 379.0], [28.8, 379.0], [28.9, 379.0], [29.0, 382.0], [29.1, 382.0], [29.2, 382.0], [29.3, 382.0], [29.4, 384.0], [29.5, 384.0], [29.6, 384.0], [29.7, 385.0], [29.8, 385.0], [29.9, 385.0], [30.0, 386.0], [30.1, 386.0], [30.2, 386.0], [30.3, 386.0], [30.4, 391.0], [30.5, 391.0], [30.6, 391.0], [30.7, 392.0], [30.8, 392.0], [30.9, 392.0], [31.0, 397.0], [31.1, 397.0], [31.2, 397.0], [31.3, 397.0], [31.4, 433.0], [31.5, 433.0], [31.6, 433.0], [31.7, 443.0], [31.8, 443.0], [31.9, 443.0], [32.0, 447.0], [32.1, 447.0], [32.2, 447.0], [32.3, 447.0], [32.4, 458.0], [32.5, 458.0], [32.6, 458.0], [32.7, 460.0], [32.8, 460.0], [32.9, 460.0], [33.0, 462.0], [33.1, 462.0], [33.2, 462.0], [33.3, 462.0], [33.4, 465.0], [33.5, 465.0], [33.6, 465.0], [33.7, 465.0], [33.8, 465.0], [33.9, 465.0], [34.0, 495.0], [34.1, 495.0], [34.2, 495.0], [34.3, 495.0], [34.4, 495.0], [34.5, 495.0], [34.6, 495.0], [34.7, 504.0], [34.8, 504.0], [34.9, 504.0], [35.0, 509.0], [35.1, 509.0], [35.2, 509.0], [35.3, 509.0], [35.4, 519.0], [35.5, 519.0], [35.6, 519.0], [35.7, 528.0], [35.8, 528.0], [35.9, 528.0], [36.0, 538.0], [36.1, 538.0], [36.2, 538.0], [36.3, 538.0], [36.4, 577.0], [36.5, 577.0], [36.6, 577.0], [36.7, 604.0], [36.8, 604.0], [36.9, 604.0], [37.0, 621.0], [37.1, 621.0], [37.2, 621.0], [37.3, 621.0], [37.4, 694.0], [37.5, 694.0], [37.6, 694.0], [37.7, 702.0], [37.8, 702.0], [37.9, 702.0], [38.0, 734.0], [38.1, 734.0], [38.2, 734.0], [38.3, 734.0], [38.4, 746.0], [38.5, 746.0], [38.6, 746.0], [38.7, 757.0], [38.8, 757.0], [38.9, 757.0], [39.0, 759.0], [39.1, 759.0], [39.2, 759.0], [39.3, 759.0], [39.4, 771.0], [39.5, 771.0], [39.6, 771.0], [39.7, 772.0], [39.8, 772.0], [39.9, 772.0], [40.0, 772.0], [40.1, 774.0], [40.2, 774.0], [40.3, 774.0], [40.4, 788.0], [40.5, 788.0], [40.6, 788.0], [40.7, 832.0], [40.8, 832.0], [40.9, 832.0], [41.0, 832.0], [41.1, 902.0], [41.2, 902.0], [41.3, 902.0], [41.4, 974.0], [41.5, 974.0], [41.6, 974.0], [41.7, 999.0], [41.8, 999.0], [41.9, 999.0], [42.0, 999.0], [42.1, 1004.0], [42.2, 1004.0], [42.3, 1004.0], [42.4, 1011.0], [42.5, 1011.0], [42.6, 1011.0], [42.7, 1014.0], [42.8, 1014.0], [42.9, 1014.0], [43.0, 1014.0], [43.1, 1038.0], [43.2, 1038.0], [43.3, 1038.0], [43.4, 1054.0], [43.5, 1054.0], [43.6, 1054.0], [43.7, 1081.0], [43.8, 1081.0], [43.9, 1081.0], [44.0, 1081.0], [44.1, 1104.0], [44.2, 1104.0], [44.3, 1104.0], [44.4, 1112.0], [44.5, 1112.0], [44.6, 1112.0], [44.7, 1131.0], [44.8, 1131.0], [44.9, 1131.0], [45.0, 1131.0], [45.1, 1133.0], [45.2, 1133.0], [45.3, 1133.0], [45.4, 1159.0], [45.5, 1159.0], [45.6, 1159.0], [45.7, 1173.0], [45.8, 1173.0], [45.9, 1173.0], [46.0, 1173.0], [46.1, 1185.0], [46.2, 1185.0], [46.3, 1185.0], [46.4, 1185.0], [46.5, 1185.0], [46.6, 1185.0], [46.7, 1188.0], [46.8, 1188.0], [46.9, 1188.0], [47.0, 1188.0], [47.1, 1188.0], [47.2, 1188.0], [47.3, 1188.0], [47.4, 1194.0], [47.5, 1194.0], [47.6, 1194.0], [47.7, 1219.0], [47.8, 1219.0], [47.9, 1219.0], [48.0, 1219.0], [48.1, 1219.0], [48.2, 1219.0], [48.3, 1219.0], [48.4, 1230.0], [48.5, 1230.0], [48.6, 1230.0], [48.7, 1264.0], [48.8, 1264.0], [48.9, 1264.0], [49.0, 1264.0], [49.1, 1313.0], [49.2, 1313.0], [49.3, 1313.0], [49.4, 1324.0], [49.5, 1324.0], [49.6, 1324.0], [49.7, 1335.0], [49.8, 1335.0], [49.9, 1335.0], [50.0, 1335.0], [50.1, 1336.0], [50.2, 1336.0], [50.3, 1336.0], [50.4, 1353.0], [50.5, 1353.0], [50.6, 1353.0], [50.7, 1354.0], [50.8, 1354.0], [50.9, 1354.0], [51.0, 1354.0], [51.1, 1356.0], [51.2, 1356.0], [51.3, 1356.0], [51.4, 1356.0], [51.5, 1356.0], [51.6, 1356.0], [51.7, 1361.0], [51.8, 1361.0], [51.9, 1361.0], [52.0, 1361.0], [52.1, 1381.0], [52.2, 1381.0], [52.3, 1381.0], [52.4, 1388.0], [52.5, 1388.0], [52.6, 1388.0], [52.7, 1405.0], [52.8, 1405.0], [52.9, 1405.0], [53.0, 1405.0], [53.1, 1418.0], [53.2, 1418.0], [53.3, 1418.0], [53.4, 1427.0], [53.5, 1427.0], [53.6, 1427.0], [53.7, 1440.0], [53.8, 1440.0], [53.9, 1440.0], [54.0, 1440.0], [54.1, 1470.0], [54.2, 1470.0], [54.3, 1470.0], [54.4, 1476.0], [54.5, 1476.0], [54.6, 1476.0], [54.7, 1511.0], [54.8, 1511.0], [54.9, 1511.0], [55.0, 1511.0], [55.1, 1519.0], [55.2, 1519.0], [55.3, 1519.0], [55.4, 1526.0], [55.5, 1526.0], [55.6, 1526.0], [55.7, 1536.0], [55.8, 1536.0], [55.9, 1536.0], [56.0, 1536.0], [56.1, 1571.0], [56.2, 1571.0], [56.3, 1571.0], [56.4, 1647.0], [56.5, 1647.0], [56.6, 1647.0], [56.7, 1661.0], [56.8, 1661.0], [56.9, 1661.0], [57.0, 1661.0], [57.1, 1714.0], [57.2, 1714.0], [57.3, 1714.0], [57.4, 1720.0], [57.5, 1720.0], [57.6, 1720.0], [57.7, 1720.0], [57.8, 1720.0], [57.9, 1720.0], [58.0, 1720.0], [58.1, 1728.0], [58.2, 1728.0], [58.3, 1728.0], [58.4, 1737.0], [58.5, 1737.0], [58.6, 1737.0], [58.7, 1746.0], [58.8, 1746.0], [58.9, 1746.0], [59.0, 1746.0], [59.1, 1751.0], [59.2, 1751.0], [59.3, 1751.0], [59.4, 1756.0], [59.5, 1756.0], [59.6, 1756.0], [59.7, 1761.0], [59.8, 1761.0], [59.9, 1761.0], [60.0, 1761.0], [60.1, 1763.0], [60.2, 1763.0], [60.3, 1763.0], [60.4, 1767.0], [60.5, 1767.0], [60.6, 1767.0], [60.7, 1770.0], [60.8, 1770.0], [60.9, 1770.0], [61.0, 1770.0], [61.1, 1772.0], [61.2, 1772.0], [61.3, 1772.0], [61.4, 1772.0], [61.5, 1772.0], [61.6, 1772.0], [61.7, 1784.0], [61.8, 1784.0], [61.9, 1784.0], [62.0, 1784.0], [62.1, 1797.0], [62.2, 1797.0], [62.3, 1797.0], [62.4, 1802.0], [62.5, 1802.0], [62.6, 1802.0], [62.7, 1862.0], [62.8, 1862.0], [62.9, 1862.0], [63.0, 1862.0], [63.1, 1865.0], [63.2, 1865.0], [63.3, 1865.0], [63.4, 1916.0], [63.5, 1916.0], [63.6, 1916.0], [63.7, 1919.0], [63.8, 1919.0], [63.9, 1919.0], [64.0, 1919.0], [64.1, 1930.0], [64.2, 1930.0], [64.3, 1930.0], [64.4, 1935.0], [64.5, 1935.0], [64.6, 1935.0], [64.7, 1941.0], [64.8, 1941.0], [64.9, 1941.0], [65.0, 1941.0], [65.1, 1971.0], [65.2, 1971.0], [65.3, 1971.0], [65.4, 1985.0], [65.5, 1985.0], [65.6, 1985.0], [65.7, 2000.0], [65.8, 2000.0], [65.9, 2000.0], [66.0, 2000.0], [66.1, 2000.0], [66.2, 2000.0], [66.3, 2000.0], [66.4, 2004.0], [66.5, 2004.0], [66.6, 2004.0], [66.7, 2009.0], [66.8, 2009.0], [66.9, 2009.0], [67.0, 2009.0], [67.1, 2009.0], [67.2, 2009.0], [67.3, 2009.0], [67.4, 2010.0], [67.5, 2010.0], [67.6, 2010.0], [67.7, 2018.0], [67.8, 2018.0], [67.9, 2018.0], [68.0, 2018.0], [68.1, 2021.0], [68.2, 2021.0], [68.3, 2021.0], [68.4, 2034.0], [68.5, 2034.0], [68.6, 2034.0], [68.7, 2041.0], [68.8, 2041.0], [68.9, 2041.0], [69.0, 2041.0], [69.1, 2041.0], [69.2, 2041.0], [69.3, 2041.0], [69.4, 2043.0], [69.5, 2043.0], [69.6, 2043.0], [69.7, 2044.0], [69.8, 2044.0], [69.9, 2044.0], [70.0, 2044.0], [70.1, 2047.0], [70.2, 2047.0], [70.3, 2047.0], [70.4, 2051.0], [70.5, 2051.0], [70.6, 2051.0], [70.7, 2051.0], [70.8, 2051.0], [70.9, 2051.0], [71.0, 2051.0], [71.1, 2054.0], [71.2, 2054.0], [71.3, 2054.0], [71.4, 2054.0], [71.5, 2054.0], [71.6, 2054.0], [71.7, 2058.0], [71.8, 2058.0], [71.9, 2058.0], [72.0, 2058.0], [72.1, 2060.0], [72.2, 2060.0], [72.3, 2060.0], [72.4, 2060.0], [72.5, 2060.0], [72.6, 2060.0], [72.7, 2061.0], [72.8, 2061.0], [72.9, 2061.0], [73.0, 2061.0], [73.1, 2062.0], [73.2, 2062.0], [73.3, 2062.0], [73.4, 2064.0], [73.5, 2064.0], [73.6, 2064.0], [73.7, 2071.0], [73.8, 2071.0], [73.9, 2071.0], [74.0, 2071.0], [74.1, 2072.0], [74.2, 2072.0], [74.3, 2072.0], [74.4, 2079.0], [74.5, 2079.0], [74.6, 2079.0], [74.7, 2081.0], [74.8, 2081.0], [74.9, 2081.0], [75.0, 2081.0], [75.1, 2084.0], [75.2, 2084.0], [75.3, 2084.0], [75.4, 2085.0], [75.5, 2085.0], [75.6, 2085.0], [75.7, 2088.0], [75.8, 2088.0], [75.9, 2088.0], [76.0, 2088.0], [76.1, 2088.0], [76.2, 2088.0], [76.3, 2088.0], [76.4, 2090.0], [76.5, 2090.0], [76.6, 2090.0], [76.7, 2092.0], [76.8, 2092.0], [76.9, 2092.0], [77.0, 2092.0], [77.1, 2094.0], [77.2, 2094.0], [77.3, 2094.0], [77.4, 2102.0], [77.5, 2102.0], [77.6, 2102.0], [77.7, 2107.0], [77.8, 2107.0], [77.9, 2107.0], [78.0, 2107.0], [78.1, 2109.0], [78.2, 2109.0], [78.3, 2109.0], [78.4, 2109.0], [78.5, 2109.0], [78.6, 2109.0], [78.7, 2112.0], [78.8, 2112.0], [78.9, 2112.0], [79.0, 2112.0], [79.1, 2115.0], [79.2, 2115.0], [79.3, 2115.0], [79.4, 2116.0], [79.5, 2116.0], [79.6, 2116.0], [79.7, 2119.0], [79.8, 2119.0], [79.9, 2119.0], [80.0, 2119.0], [80.1, 2121.0], [80.2, 2121.0], [80.3, 2121.0], [80.4, 2121.0], [80.5, 2121.0], [80.6, 2121.0], [80.7, 2122.0], [80.8, 2122.0], [80.9, 2122.0], [81.0, 2122.0], [81.1, 2130.0], [81.2, 2130.0], [81.3, 2130.0], [81.4, 2131.0], [81.5, 2131.0], [81.6, 2131.0], [81.7, 2132.0], [81.8, 2132.0], [81.9, 2132.0], [82.0, 2133.0], [82.1, 2133.0], [82.2, 2133.0], [82.3, 2133.0], [82.4, 2141.0], [82.5, 2141.0], [82.6, 2141.0], [82.7, 2145.0], [82.8, 2145.0], [82.9, 2145.0], [83.0, 2158.0], [83.1, 2158.0], [83.2, 2158.0], [83.3, 2158.0], [83.4, 2161.0], [83.5, 2161.0], [83.6, 2161.0], [83.7, 2177.0], [83.8, 2177.0], [83.9, 2177.0], [84.0, 2183.0], [84.1, 2183.0], [84.2, 2183.0], [84.3, 2183.0], [84.4, 2191.0], [84.5, 2191.0], [84.6, 2191.0], [84.7, 2195.0], [84.8, 2195.0], [84.9, 2195.0], [85.0, 2208.0], [85.1, 2208.0], [85.2, 2208.0], [85.3, 2208.0], [85.4, 2228.0], [85.5, 2228.0], [85.6, 2228.0], [85.7, 2279.0], [85.8, 2279.0], [85.9, 2279.0], [86.0, 2300.0], [86.1, 2300.0], [86.2, 2300.0], [86.3, 2300.0], [86.4, 2318.0], [86.5, 2318.0], [86.6, 2318.0], [86.7, 2325.0], [86.8, 2325.0], [86.9, 2325.0], [87.0, 2336.0], [87.1, 2336.0], [87.2, 2336.0], [87.3, 2336.0], [87.4, 2349.0], [87.5, 2349.0], [87.6, 2349.0], [87.7, 2353.0], [87.8, 2353.0], [87.9, 2353.0], [88.0, 2354.0], [88.1, 2354.0], [88.2, 2354.0], [88.3, 2354.0], [88.4, 2360.0], [88.5, 2360.0], [88.6, 2360.0], [88.7, 2361.0], [88.8, 2361.0], [88.9, 2361.0], [89.0, 2367.0], [89.1, 2367.0], [89.2, 2367.0], [89.3, 2367.0], [89.4, 2382.0], [89.5, 2382.0], [89.6, 2382.0], [89.7, 2383.0], [89.8, 2383.0], [89.9, 2383.0], [90.0, 2393.0], [90.1, 2393.0], [90.2, 2393.0], [90.3, 2393.0], [90.4, 2397.0], [90.5, 2397.0], [90.6, 2397.0], [90.7, 2399.0], [90.8, 2399.0], [90.9, 2399.0], [91.0, 2399.0], [91.1, 2399.0], [91.2, 2399.0], [91.3, 2399.0], [91.4, 2405.0], [91.5, 2405.0], [91.6, 2405.0], [91.7, 2413.0], [91.8, 2413.0], [91.9, 2413.0], [92.0, 2417.0], [92.1, 2417.0], [92.2, 2417.0], [92.3, 2417.0], [92.4, 2418.0], [92.5, 2418.0], [92.6, 2418.0], [92.7, 2418.0], [92.8, 2418.0], [92.9, 2418.0], [93.0, 2419.0], [93.1, 2419.0], [93.2, 2419.0], [93.3, 2419.0], [93.4, 2421.0], [93.5, 2421.0], [93.6, 2421.0], [93.7, 2423.0], [93.8, 2423.0], [93.9, 2423.0], [94.0, 2445.0], [94.1, 2445.0], [94.2, 2445.0], [94.3, 2445.0], [94.4, 2445.0], [94.5, 2445.0], [94.6, 2445.0], [94.7, 2449.0], [94.8, 2449.0], [94.9, 2449.0], [95.0, 2454.0], [95.1, 2454.0], [95.2, 2454.0], [95.3, 2454.0], [95.4, 2456.0], [95.5, 2456.0], [95.6, 2456.0], [95.7, 2464.0], [95.8, 2464.0], [95.9, 2464.0], [96.0, 2466.0], [96.1, 2466.0], [96.2, 2466.0], [96.3, 2466.0], [96.4, 2469.0], [96.5, 2469.0], [96.6, 2469.0], [96.7, 2497.0], [96.8, 2497.0], [96.9, 2497.0], [97.0, 2505.0], [97.1, 2505.0], [97.2, 2505.0], [97.3, 2505.0], [97.4, 2515.0], [97.5, 2515.0], [97.6, 2515.0], [97.7, 2516.0], [97.8, 2516.0], [97.9, 2516.0], [98.0, 2518.0], [98.1, 2518.0], [98.2, 2518.0], [98.3, 2518.0], [98.4, 2520.0], [98.5, 2520.0], [98.6, 2520.0], [98.7, 2524.0], [98.8, 2524.0], [98.9, 2524.0], [99.0, 2540.0], [99.1, 2540.0], [99.2, 2540.0], [99.3, 2540.0], [99.4, 2544.0], [99.5, 2544.0], [99.6, 2544.0], [99.7, 2560.0], [99.8, 2560.0], [99.9, 2560.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 70.0], [0.1, 70.0], [0.2, 70.0], [0.3, 70.0], [0.4, 77.0], [0.5, 77.0], [0.6, 77.0], [0.7, 89.0], [0.8, 89.0], [0.9, 89.0], [1.0, 92.0], [1.1, 92.0], [1.2, 92.0], [1.3, 92.0], [1.4, 95.0], [1.5, 95.0], [1.6, 95.0], [1.7, 97.0], [1.8, 97.0], [1.9, 97.0], [2.0, 98.0], [2.1, 98.0], [2.2, 98.0], [2.3, 98.0], [2.4, 99.0], [2.5, 99.0], [2.6, 99.0], [2.7, 105.0], [2.8, 105.0], [2.9, 105.0], [3.0, 105.0], [3.1, 105.0], [3.2, 105.0], [3.3, 105.0], [3.4, 105.0], [3.5, 105.0], [3.6, 105.0], [3.7, 106.0], [3.8, 106.0], [3.9, 106.0], [4.0, 107.0], [4.1, 107.0], [4.2, 107.0], [4.3, 107.0], [4.4, 107.0], [4.5, 107.0], [4.6, 107.0], [4.7, 108.0], [4.8, 108.0], [4.9, 108.0], [5.0, 109.0], [5.1, 109.0], [5.2, 109.0], [5.3, 109.0], [5.4, 113.0], [5.5, 113.0], [5.6, 113.0], [5.7, 113.0], [5.8, 113.0], [5.9, 113.0], [6.0, 114.0], [6.1, 114.0], [6.2, 114.0], [6.3, 114.0], [6.4, 114.0], [6.5, 114.0], [6.6, 114.0], [6.7, 114.0], [6.8, 114.0], [6.9, 114.0], [7.0, 115.0], [7.1, 115.0], [7.2, 115.0], [7.3, 115.0], [7.4, 115.0], [7.5, 115.0], [7.6, 115.0], [7.7, 115.0], [7.8, 115.0], [7.9, 115.0], [8.0, 116.0], [8.1, 116.0], [8.2, 116.0], [8.3, 116.0], [8.4, 116.0], [8.5, 116.0], [8.6, 116.0], [8.7, 116.0], [8.8, 116.0], [8.9, 116.0], [9.0, 117.0], [9.1, 117.0], [9.2, 117.0], [9.3, 117.0], [9.4, 117.0], [9.5, 117.0], [9.6, 117.0], [9.7, 117.0], [9.8, 117.0], [9.9, 117.0], [10.0, 118.0], [10.1, 118.0], [10.2, 118.0], [10.3, 118.0], [10.4, 118.0], [10.5, 118.0], [10.6, 118.0], [10.7, 119.0], [10.8, 119.0], [10.9, 119.0], [11.0, 120.0], [11.1, 120.0], [11.2, 120.0], [11.3, 120.0], [11.4, 120.0], [11.5, 120.0], [11.6, 120.0], [11.7, 123.0], [11.8, 123.0], [11.9, 123.0], [12.0, 124.0], [12.1, 124.0], [12.2, 124.0], [12.3, 124.0], [12.4, 124.0], [12.5, 124.0], [12.6, 124.0], [12.7, 125.0], [12.8, 125.0], [12.9, 125.0], [13.0, 125.0], [13.1, 125.0], [13.2, 125.0], [13.3, 125.0], [13.4, 125.0], [13.5, 125.0], [13.6, 125.0], [13.7, 126.0], [13.8, 126.0], [13.9, 126.0], [14.0, 127.0], [14.1, 127.0], [14.2, 127.0], [14.3, 127.0], [14.4, 127.0], [14.5, 127.0], [14.6, 127.0], [14.7, 128.0], [14.8, 128.0], [14.9, 128.0], [15.0, 128.0], [15.1, 128.0], [15.2, 128.0], [15.3, 128.0], [15.4, 129.0], [15.5, 129.0], [15.6, 129.0], [15.7, 130.0], [15.8, 130.0], [15.9, 130.0], [16.0, 130.0], [16.1, 130.0], [16.2, 130.0], [16.3, 130.0], [16.4, 130.0], [16.5, 130.0], [16.6, 130.0], [16.7, 132.0], [16.8, 132.0], [16.9, 132.0], [17.0, 132.0], [17.1, 132.0], [17.2, 132.0], [17.3, 132.0], [17.4, 133.0], [17.5, 133.0], [17.6, 133.0], [17.7, 137.0], [17.8, 137.0], [17.9, 137.0], [18.0, 137.0], [18.1, 137.0], [18.2, 137.0], [18.3, 137.0], [18.4, 137.0], [18.5, 137.0], [18.6, 137.0], [18.7, 138.0], [18.8, 138.0], [18.9, 138.0], [19.0, 139.0], [19.1, 139.0], [19.2, 139.0], [19.3, 139.0], [19.4, 139.0], [19.5, 139.0], [19.6, 139.0], [19.7, 139.0], [19.8, 139.0], [19.9, 139.0], [20.0, 140.0], [20.1, 140.0], [20.2, 140.0], [20.3, 140.0], [20.4, 142.0], [20.5, 142.0], [20.6, 142.0], [20.7, 144.0], [20.8, 144.0], [20.9, 144.0], [21.0, 144.0], [21.1, 144.0], [21.2, 144.0], [21.3, 144.0], [21.4, 145.0], [21.5, 145.0], [21.6, 145.0], [21.7, 147.0], [21.8, 147.0], [21.9, 147.0], [22.0, 148.0], [22.1, 148.0], [22.2, 148.0], [22.3, 148.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 153.0], [22.8, 153.0], [22.9, 153.0], [23.0, 153.0], [23.1, 153.0], [23.2, 153.0], [23.3, 153.0], [23.4, 153.0], [23.5, 153.0], [23.6, 153.0], [23.7, 153.0], [23.8, 153.0], [23.9, 153.0], [24.0, 155.0], [24.1, 155.0], [24.2, 155.0], [24.3, 155.0], [24.4, 156.0], [24.5, 156.0], [24.6, 156.0], [24.7, 157.0], [24.8, 157.0], [24.9, 157.0], [25.0, 160.0], [25.1, 160.0], [25.2, 160.0], [25.3, 160.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 162.0], [26.1, 162.0], [26.2, 162.0], [26.3, 162.0], [26.4, 162.0], [26.5, 162.0], [26.6, 162.0], [26.7, 162.0], [26.8, 162.0], [26.9, 162.0], [27.0, 164.0], [27.1, 164.0], [27.2, 164.0], [27.3, 164.0], [27.4, 167.0], [27.5, 167.0], [27.6, 167.0], [27.7, 168.0], [27.8, 168.0], [27.9, 168.0], [28.0, 169.0], [28.1, 169.0], [28.2, 169.0], [28.3, 169.0], [28.4, 169.0], [28.5, 169.0], [28.6, 169.0], [28.7, 171.0], [28.8, 171.0], [28.9, 171.0], [29.0, 171.0], [29.1, 171.0], [29.2, 171.0], [29.3, 171.0], [29.4, 173.0], [29.5, 173.0], [29.6, 173.0], [29.7, 174.0], [29.8, 174.0], [29.9, 174.0], [30.0, 174.0], [30.1, 174.0], [30.2, 174.0], [30.3, 174.0], [30.4, 175.0], [30.5, 175.0], [30.6, 175.0], [30.7, 175.0], [30.8, 175.0], [30.9, 175.0], [31.0, 179.0], [31.1, 179.0], [31.2, 179.0], [31.3, 179.0], [31.4, 179.0], [31.5, 179.0], [31.6, 179.0], [31.7, 179.0], [31.8, 179.0], [31.9, 179.0], [32.0, 180.0], [32.1, 180.0], [32.2, 180.0], [32.3, 180.0], [32.4, 181.0], [32.5, 181.0], [32.6, 181.0], [32.7, 181.0], [32.8, 181.0], [32.9, 181.0], [33.0, 185.0], [33.1, 185.0], [33.2, 185.0], [33.3, 185.0], [33.4, 186.0], [33.5, 186.0], [33.6, 186.0], [33.7, 190.0], [33.8, 190.0], [33.9, 190.0], [34.0, 190.0], [34.1, 190.0], [34.2, 190.0], [34.3, 190.0], [34.4, 191.0], [34.5, 191.0], [34.6, 191.0], [34.7, 192.0], [34.8, 192.0], [34.9, 192.0], [35.0, 192.0], [35.1, 192.0], [35.2, 192.0], [35.3, 192.0], [35.4, 192.0], [35.5, 192.0], [35.6, 192.0], [35.7, 197.0], [35.8, 197.0], [35.9, 197.0], [36.0, 198.0], [36.1, 198.0], [36.2, 198.0], [36.3, 198.0], [36.4, 200.0], [36.5, 200.0], [36.6, 200.0], [36.7, 201.0], [36.8, 201.0], [36.9, 201.0], [37.0, 201.0], [37.1, 201.0], [37.2, 201.0], [37.3, 201.0], [37.4, 202.0], [37.5, 202.0], [37.6, 202.0], [37.7, 207.0], [37.8, 207.0], [37.9, 207.0], [38.0, 209.0], [38.1, 209.0], [38.2, 209.0], [38.3, 209.0], [38.4, 209.0], [38.5, 209.0], [38.6, 209.0], [38.7, 211.0], [38.8, 211.0], [38.9, 211.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 213.0], [39.4, 214.0], [39.5, 214.0], [39.6, 214.0], [39.7, 214.0], [39.8, 214.0], [39.9, 214.0], [40.0, 215.0], [40.1, 215.0], [40.2, 215.0], [40.3, 215.0], [40.4, 217.0], [40.5, 217.0], [40.6, 217.0], [40.7, 218.0], [40.8, 218.0], [40.9, 218.0], [41.0, 218.0], [41.1, 218.0], [41.2, 218.0], [41.3, 218.0], [41.4, 221.0], [41.5, 221.0], [41.6, 221.0], [41.7, 224.0], [41.8, 224.0], [41.9, 224.0], [42.0, 224.0], [42.1, 224.0], [42.2, 224.0], [42.3, 224.0], [42.4, 227.0], [42.5, 227.0], [42.6, 227.0], [42.7, 231.0], [42.8, 231.0], [42.9, 231.0], [43.0, 231.0], [43.1, 238.0], [43.2, 238.0], [43.3, 238.0], [43.4, 268.0], [43.5, 268.0], [43.6, 268.0], [43.7, 278.0], [43.8, 278.0], [43.9, 278.0], [44.0, 278.0], [44.1, 291.0], [44.2, 291.0], [44.3, 291.0], [44.4, 291.0], [44.5, 291.0], [44.6, 291.0], [44.7, 292.0], [44.8, 292.0], [44.9, 292.0], [45.0, 292.0], [45.1, 292.0], [45.2, 292.0], [45.3, 292.0], [45.4, 293.0], [45.5, 293.0], [45.6, 293.0], [45.7, 294.0], [45.8, 294.0], [45.9, 294.0], [46.0, 294.0], [46.1, 296.0], [46.2, 296.0], [46.3, 296.0], [46.4, 297.0], [46.5, 297.0], [46.6, 297.0], [46.7, 301.0], [46.8, 301.0], [46.9, 301.0], [47.0, 301.0], [47.1, 302.0], [47.2, 302.0], [47.3, 302.0], [47.4, 304.0], [47.5, 304.0], [47.6, 304.0], [47.7, 306.0], [47.8, 306.0], [47.9, 306.0], [48.0, 306.0], [48.1, 309.0], [48.2, 309.0], [48.3, 309.0], [48.4, 310.0], [48.5, 310.0], [48.6, 310.0], [48.7, 313.0], [48.8, 313.0], [48.9, 313.0], [49.0, 313.0], [49.1, 313.0], [49.2, 313.0], [49.3, 313.0], [49.4, 313.0], [49.5, 313.0], [49.6, 313.0], [49.7, 315.0], [49.8, 315.0], [49.9, 315.0], [50.0, 315.0], [50.1, 315.0], [50.2, 315.0], [50.3, 315.0], [50.4, 316.0], [50.5, 316.0], [50.6, 316.0], [50.7, 316.0], [50.8, 316.0], [50.9, 316.0], [51.0, 316.0], [51.1, 317.0], [51.2, 317.0], [51.3, 317.0], [51.4, 317.0], [51.5, 317.0], [51.6, 317.0], [51.7, 319.0], [51.8, 319.0], [51.9, 319.0], [52.0, 319.0], [52.1, 319.0], [52.2, 319.0], [52.3, 319.0], [52.4, 319.0], [52.5, 319.0], [52.6, 319.0], [52.7, 320.0], [52.8, 320.0], [52.9, 320.0], [53.0, 320.0], [53.1, 321.0], [53.2, 321.0], [53.3, 321.0], [53.4, 323.0], [53.5, 323.0], [53.6, 323.0], [53.7, 325.0], [53.8, 325.0], [53.9, 325.0], [54.0, 325.0], [54.1, 326.0], [54.2, 326.0], [54.3, 326.0], [54.4, 327.0], [54.5, 327.0], [54.6, 327.0], [54.7, 331.0], [54.8, 331.0], [54.9, 331.0], [55.0, 331.0], [55.1, 335.0], [55.2, 335.0], [55.3, 335.0], [55.4, 344.0], [55.5, 344.0], [55.6, 344.0], [55.7, 346.0], [55.8, 346.0], [55.9, 346.0], [56.0, 346.0], [56.1, 346.0], [56.2, 346.0], [56.3, 346.0], [56.4, 346.0], [56.5, 346.0], [56.6, 346.0], [56.7, 349.0], [56.8, 349.0], [56.9, 349.0], [57.0, 349.0], [57.1, 349.0], [57.2, 349.0], [57.3, 349.0], [57.4, 350.0], [57.5, 350.0], [57.6, 350.0], [57.7, 352.0], [57.8, 352.0], [57.9, 352.0], [58.0, 352.0], [58.1, 363.0], [58.2, 363.0], [58.3, 363.0], [58.4, 363.0], [58.5, 363.0], [58.6, 363.0], [58.7, 365.0], [58.8, 365.0], [58.9, 365.0], [59.0, 365.0], [59.1, 365.0], [59.2, 365.0], [59.3, 365.0], [59.4, 366.0], [59.5, 366.0], [59.6, 366.0], [59.7, 368.0], [59.8, 368.0], [59.9, 368.0], [60.0, 368.0], [60.1, 369.0], [60.2, 369.0], [60.3, 369.0], [60.4, 369.0], [60.5, 369.0], [60.6, 369.0], [60.7, 370.0], [60.8, 370.0], [60.9, 370.0], [61.0, 370.0], [61.1, 372.0], [61.2, 372.0], [61.3, 372.0], [61.4, 374.0], [61.5, 374.0], [61.6, 374.0], [61.7, 377.0], [61.8, 377.0], [61.9, 377.0], [62.0, 377.0], [62.1, 378.0], [62.2, 378.0], [62.3, 378.0], [62.4, 380.0], [62.5, 380.0], [62.6, 380.0], [62.7, 381.0], [62.8, 381.0], [62.9, 381.0], [63.0, 381.0], [63.1, 382.0], [63.2, 382.0], [63.3, 382.0], [63.4, 382.0], [63.5, 382.0], [63.6, 382.0], [63.7, 382.0], [63.8, 382.0], [63.9, 382.0], [64.0, 382.0], [64.1, 383.0], [64.2, 383.0], [64.3, 383.0], [64.4, 384.0], [64.5, 384.0], [64.6, 384.0], [64.7, 385.0], [64.8, 385.0], [64.9, 385.0], [65.0, 385.0], [65.1, 386.0], [65.2, 386.0], [65.3, 386.0], [65.4, 388.0], [65.5, 388.0], [65.6, 388.0], [65.7, 403.0], [65.8, 403.0], [65.9, 403.0], [66.0, 403.0], [66.1, 403.0], [66.2, 403.0], [66.3, 403.0], [66.4, 404.0], [66.5, 404.0], [66.6, 404.0], [66.7, 405.0], [66.8, 405.0], [66.9, 405.0], [67.0, 405.0], [67.1, 406.0], [67.2, 406.0], [67.3, 406.0], [67.4, 406.0], [67.5, 406.0], [67.6, 406.0], [67.7, 407.0], [67.8, 407.0], [67.9, 407.0], [68.0, 407.0], [68.1, 408.0], [68.2, 408.0], [68.3, 408.0], [68.4, 409.0], [68.5, 409.0], [68.6, 409.0], [68.7, 409.0], [68.8, 409.0], [68.9, 409.0], [69.0, 409.0], [69.1, 417.0], [69.2, 417.0], [69.3, 417.0], [69.4, 417.0], [69.5, 417.0], [69.6, 417.0], [69.7, 418.0], [69.8, 418.0], [69.9, 418.0], [70.0, 418.0], [70.1, 420.0], [70.2, 420.0], [70.3, 420.0], [70.4, 420.0], [70.5, 420.0], [70.6, 420.0], [70.7, 424.0], [70.8, 424.0], [70.9, 424.0], [71.0, 424.0], [71.1, 426.0], [71.2, 426.0], [71.3, 426.0], [71.4, 431.0], [71.5, 431.0], [71.6, 431.0], [71.7, 435.0], [71.8, 435.0], [71.9, 435.0], [72.0, 435.0], [72.1, 437.0], [72.2, 437.0], [72.3, 437.0], [72.4, 438.0], [72.5, 438.0], [72.6, 438.0], [72.7, 448.0], [72.8, 448.0], [72.9, 448.0], [73.0, 451.0], [73.1, 451.0], [73.2, 451.0], [73.3, 451.0], [73.4, 454.0], [73.5, 454.0], [73.6, 454.0], [73.7, 464.0], [73.8, 464.0], [73.9, 464.0], [74.0, 484.0], [74.1, 484.0], [74.2, 484.0], [74.3, 484.0], [74.4, 485.0], [74.5, 485.0], [74.6, 485.0], [74.7, 490.0], [74.8, 490.0], [74.9, 490.0], [75.0, 504.0], [75.1, 504.0], [75.2, 504.0], [75.3, 504.0], [75.4, 508.0], [75.5, 508.0], [75.6, 508.0], [75.7, 509.0], [75.8, 509.0], [75.9, 509.0], [76.0, 510.0], [76.1, 510.0], [76.2, 510.0], [76.3, 510.0], [76.4, 510.0], [76.5, 510.0], [76.6, 510.0], [76.7, 511.0], [76.8, 511.0], [76.9, 511.0], [77.0, 514.0], [77.1, 514.0], [77.2, 514.0], [77.3, 514.0], [77.4, 514.0], [77.5, 514.0], [77.6, 514.0], [77.7, 515.0], [77.8, 515.0], [77.9, 515.0], [78.0, 523.0], [78.1, 523.0], [78.2, 523.0], [78.3, 523.0], [78.4, 525.0], [78.5, 525.0], [78.6, 525.0], [78.7, 528.0], [78.8, 528.0], [78.9, 528.0], [79.0, 530.0], [79.1, 530.0], [79.2, 530.0], [79.3, 530.0], [79.4, 530.0], [79.5, 530.0], [79.6, 530.0], [79.7, 552.0], [79.8, 552.0], [79.9, 552.0], [80.0, 567.0], [80.1, 567.0], [80.2, 567.0], [80.3, 567.0], [80.4, 573.0], [80.5, 573.0], [80.6, 573.0], [80.7, 585.0], [80.8, 585.0], [80.9, 585.0], [81.0, 596.0], [81.1, 596.0], [81.2, 596.0], [81.3, 596.0], [81.4, 597.0], [81.5, 597.0], [81.6, 597.0], [81.7, 602.0], [81.8, 602.0], [81.9, 602.0], [82.0, 611.0], [82.1, 611.0], [82.2, 611.0], [82.3, 611.0], [82.4, 621.0], [82.5, 621.0], [82.6, 621.0], [82.7, 634.0], [82.8, 634.0], [82.9, 634.0], [83.0, 639.0], [83.1, 639.0], [83.2, 639.0], [83.3, 639.0], [83.4, 639.0], [83.5, 639.0], [83.6, 639.0], [83.7, 640.0], [83.8, 640.0], [83.9, 640.0], [84.0, 641.0], [84.1, 641.0], [84.2, 641.0], [84.3, 641.0], [84.4, 672.0], [84.5, 672.0], [84.6, 672.0], [84.7, 684.0], [84.8, 684.0], [84.9, 684.0], [85.0, 685.0], [85.1, 685.0], [85.2, 685.0], [85.3, 685.0], [85.4, 686.0], [85.5, 686.0], [85.6, 686.0], [85.7, 686.0], [85.8, 686.0], [85.9, 686.0], [86.0, 686.0], [86.1, 686.0], [86.2, 686.0], [86.3, 686.0], [86.4, 689.0], [86.5, 689.0], [86.6, 689.0], [86.7, 696.0], [86.8, 696.0], [86.9, 696.0], [87.0, 704.0], [87.1, 704.0], [87.2, 704.0], [87.3, 704.0], [87.4, 706.0], [87.5, 706.0], [87.6, 706.0], [87.7, 712.0], [87.8, 712.0], [87.9, 712.0], [88.0, 717.0], [88.1, 717.0], [88.2, 717.0], [88.3, 717.0], [88.4, 720.0], [88.5, 720.0], [88.6, 720.0], [88.7, 731.0], [88.8, 731.0], [88.9, 731.0], [89.0, 735.0], [89.1, 735.0], [89.2, 735.0], [89.3, 735.0], [89.4, 736.0], [89.5, 736.0], [89.6, 736.0], [89.7, 738.0], [89.8, 738.0], [89.9, 738.0], [90.0, 748.0], [90.1, 748.0], [90.2, 748.0], [90.3, 748.0], [90.4, 752.0], [90.5, 752.0], [90.6, 752.0], [90.7, 756.0], [90.8, 756.0], [90.9, 756.0], [91.0, 758.0], [91.1, 758.0], [91.2, 758.0], [91.3, 758.0], [91.4, 764.0], [91.5, 764.0], [91.6, 764.0], [91.7, 805.0], [91.8, 805.0], [91.9, 805.0], [92.0, 812.0], [92.1, 812.0], [92.2, 812.0], [92.3, 812.0], [92.4, 842.0], [92.5, 842.0], [92.6, 842.0], [92.7, 849.0], [92.8, 849.0], [92.9, 849.0], [93.0, 858.0], [93.1, 858.0], [93.2, 858.0], [93.3, 858.0], [93.4, 864.0], [93.5, 864.0], [93.6, 864.0], [93.7, 874.0], [93.8, 874.0], [93.9, 874.0], [94.0, 902.0], [94.1, 902.0], [94.2, 902.0], [94.3, 902.0], [94.4, 906.0], [94.5, 906.0], [94.6, 906.0], [94.7, 919.0], [94.8, 919.0], [94.9, 919.0], [95.0, 927.0], [95.1, 927.0], [95.2, 927.0], [95.3, 927.0], [95.4, 928.0], [95.5, 928.0], [95.6, 928.0], [95.7, 929.0], [95.8, 929.0], [95.9, 929.0], [96.0, 943.0], [96.1, 943.0], [96.2, 943.0], [96.3, 943.0], [96.4, 950.0], [96.5, 950.0], [96.6, 950.0], [96.7, 966.0], [96.8, 966.0], [96.9, 966.0], [97.0, 975.0], [97.1, 975.0], [97.2, 975.0], [97.3, 975.0], [97.4, 979.0], [97.5, 979.0], [97.6, 979.0], [97.7, 984.0], [97.8, 984.0], [97.9, 984.0], [98.0, 984.0], [98.1, 984.0], [98.2, 984.0], [98.3, 984.0], [98.4, 986.0], [98.5, 986.0], [98.6, 986.0], [98.7, 1008.0], [98.8, 1008.0], [98.9, 1008.0], [99.0, 1058.0], [99.1, 1058.0], [99.2, 1058.0], [99.3, 1058.0], [99.4, 1105.0], [99.5, 1105.0], [99.6, 1105.0], [99.7, 1162.0], [99.8, 1162.0], [99.9, 1162.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 134.0, "series": [{"data": [[0.0, 15.0], [600.0, 20.0], [700.0, 14.0], [200.0, 20.0], [800.0, 6.0], [900.0, 17.0], [1000.0, 4.0], [1100.0, 9.0], [300.0, 40.0], [1200.0, 1.0], [400.0, 8.0], [100.0, 134.0], [500.0, 12.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[600.0, 3.0], [700.0, 9.0], [800.0, 1.0], [900.0, 3.0], [1000.0, 6.0], [1100.0, 11.0], [1200.0, 4.0], [1300.0, 11.0], [1400.0, 6.0], [1500.0, 5.0], [1600.0, 2.0], [100.0, 51.0], [1700.0, 16.0], [1800.0, 3.0], [1900.0, 7.0], [2000.0, 35.0], [2100.0, 23.0], [2300.0, 16.0], [2200.0, 3.0], [2400.0, 17.0], [2500.0, 9.0], [200.0, 28.0], [300.0, 15.0], [400.0, 10.0], [500.0, 6.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 8.0], [1100.0, 2.0], [300.0, 57.0], [600.0, 16.0], [700.0, 14.0], [100.0, 101.0], [400.0, 28.0], [200.0, 31.0], [800.0, 7.0], [900.0, 14.0], [500.0, 20.0], [1000.0, 2.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 136.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 321.0, "series": [{"data": [[0.0, 321.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 143.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 136.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 300.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 139.75333333333347, "minX": 1.73039814E12, "maxY": 139.75333333333347, "series": [{"data": [[1.73039814E12, 139.75333333333347]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039814E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 78.0, "minX": 1.0, "maxY": 2255.2, "series": [{"data": [[3.0, 98.0], [5.0, 102.0], [6.0, 87.0], [7.0, 83.0], [8.0, 83.0], [9.0, 80.0], [10.0, 78.0], [11.0, 119.0], [13.0, 103.0], [14.0, 102.66666666666667], [15.0, 110.33333333333333], [16.0, 165.0], [17.0, 132.66666666666666], [18.0, 112.0], [19.0, 140.25], [20.0, 193.0], [21.0, 127.5], [22.0, 170.66666666666666], [23.0, 147.0], [26.0, 117.75], [27.0, 185.0], [28.0, 161.57142857142858], [30.0, 120.0], [31.0, 123.0], [33.0, 167.0], [32.0, 160.0], [35.0, 191.5], [36.0, 167.5], [39.0, 482.1764705882354], [38.0, 552.2], [41.0, 177.0], [40.0, 147.0], [48.0, 228.0], [55.0, 117.0], [57.0, 114.0], [56.0, 635.0], [67.0, 112.0], [70.0, 622.0], [69.0, 659.0], [68.0, 660.0], [83.0, 634.0], [80.0, 124.0], [86.0, 637.0], [85.0, 129.5], [88.0, 1140.0], [104.0, 136.0], [111.0, 118.5], [109.0, 112.0], [108.0, 137.0], [127.0, 128.33333333333334], [131.0, 980.0], [130.0, 994.0], [128.0, 203.84210526315795], [141.0, 327.37931034482756], [149.0, 952.0], [159.0, 705.0], [158.0, 378.0], [156.0, 822.5], [167.0, 883.8], [175.0, 923.0], [168.0, 924.0], [182.0, 858.0], [180.0, 949.0], [176.0, 685.0], [191.0, 360.0], [190.0, 646.0], [188.0, 925.0], [187.0, 888.0], [199.0, 305.0], [202.0, 714.0], [207.0, 228.0], [206.0, 361.0], [200.0, 459.76], [215.0, 339.0], [214.0, 345.0], [213.0, 360.4], [212.0, 493.92857142857156], [211.0, 321.0], [209.0, 361.5], [208.0, 551.2857142857143], [221.0, 261.0], [220.0, 251.42857142857144], [216.0, 337.0], [1.0, 109.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[123.28999999999988, 364.426666666667]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[33.0, 216.0], [32.0, 198.0], [34.0, 195.5], [35.0, 191.62499999999997], [37.0, 298.0], [36.0, 166.0], [38.0, 192.0], [39.0, 436.66666666666663], [40.0, 702.0], [100.0, 1219.0], [127.0, 1188.0], [126.0, 197.5], [128.0, 192.0], [141.0, 1084.3333333333333], [156.0, 1011.0], [168.0, 832.0], [183.0, 1617.6410256410254], [182.0, 771.0], [180.0, 1054.0], [184.0, 1540.0000000000002], [188.0, 2255.2], [189.0, 2085.6153846153848], [190.0, 1901.3333333333337], [191.0, 2007.3666666666666], [199.0, 463.5], [194.0, 1175.0], [193.0, 1661.3333333333335], [200.0, 841.5], [205.0, 318.0], [208.0, 465.0], [211.0, 339.5], [214.0, 196.33333333333334], [212.0, 696.0], [13.0, 152.0], [216.0, 548.6666666666666], [17.0, 179.5], [19.0, 151.6], [20.0, 121.0], [21.0, 222.0], [22.0, 140.77777777777777], [23.0, 299.8888888888889], [27.0, 189.42857142857142], [29.0, 169.0], [30.0, 170.5], [31.0, 270.3333333333333]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[147.1333333333333, 1252.9666666666678]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[11.0, 113.0], [12.0, 119.0], [13.0, 116.0], [14.0, 138.77777777777777], [16.0, 153.0], [17.0, 142.5], [19.0, 157.5], [20.0, 124.0], [22.0, 81.66666666666667], [23.0, 233.11111111111111], [24.0, 113.66666666666667], [25.0, 132.0], [27.0, 165.66666666666669], [28.0, 182.0], [29.0, 128.0], [30.0, 147.0], [31.0, 150.66666666666666], [32.0, 117.0], [33.0, 149.125], [34.0, 169.16666666666666], [35.0, 190.0], [38.0, 192.0], [39.0, 164.6], [40.0, 143.0], [55.0, 114.0], [103.0, 139.0], [106.0, 573.0], [111.0, 156.5], [110.0, 138.0], [108.0, 567.0], [127.0, 130.0], [126.0, 268.0], [128.0, 417.875], [130.0, 1105.0], [141.0, 621.0], [150.0, 950.0], [156.0, 979.3333333333334], [167.0, 928.0], [168.0, 946.5], [180.0, 963.5], [176.0, 896.5], [191.0, 129.6], [184.0, 304.0], [188.0, 849.0], [199.0, 393.44444444444446], [198.0, 292.0], [193.0, 185.0], [194.0, 196.57142857142856], [204.0, 372.1818181818182], [202.0, 411.5], [200.0, 527.7692307692307], [206.0, 623.0], [207.0, 714.0], [211.0, 405.0], [214.0, 189.13333333333333], [215.0, 504.0], [213.0, 398.8], [212.0, 608.0], [210.0, 738.0], [209.0, 711.0], [208.0, 692.2], [216.0, 443.3846153846154], [220.0, 393.14285714285717], [218.0, 585.0], [221.0, 687.75]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[148.8366666666668, 364.55333333333357]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 221.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.73039814E12, "maxY": 9300.0, "series": [{"data": [[1.73039814E12, 9300.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73039814E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039814E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 364.426666666667, "minX": 1.73039814E12, "maxY": 1252.9666666666678, "series": [{"data": [[1.73039814E12, 364.426666666667]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039814E12, 1252.9666666666678]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039814E12, 364.55333333333357]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039814E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 359.8600000000002, "minX": 1.73039814E12, "maxY": 1093.6166666666675, "series": [{"data": [[1.73039814E12, 359.8600000000002]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039814E12, 1093.6166666666675]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039814E12, 360.7933333333334]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039814E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73039814E12, "maxY": 419.6999999999998, "series": [{"data": [[1.73039814E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039814E12, 419.6999999999998]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039814E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039814E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 75.0, "minX": 1.73039814E12, "maxY": 2560.0, "series": [{"data": [[1.73039814E12, 2560.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73039814E12, 2120.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73039814E12, 2517.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73039814E12, 2392.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73039814E12, 75.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73039814E12, 391.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039814E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 116.0, "minX": 33.0, "maxY": 2043.0, "series": [{"data": [[33.0, 116.0], [281.0, 205.0], [144.0, 152.0], [212.0, 2043.0], [230.0, 418.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 161.5], [281.0, 347.5], [144.0, 131.0], [212.0, 192.0], [230.0, 385.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 116.0, "minX": 33.0, "maxY": 1647.0, "series": [{"data": [[33.0, 116.0], [281.0, 205.0], [144.0, 152.0], [212.0, 1647.0], [230.0, 418.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 161.5], [281.0, 347.5], [144.0, 131.0], [212.0, 192.0], [230.0, 382.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039814E12, "maxY": 15.0, "series": [{"data": [[1.73039814E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039814E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039814E12, "maxY": 15.0, "series": [{"data": [[1.73039814E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039814E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039814E12, "maxY": 5.0, "series": [{"data": [[1.73039814E12, 5.0]], "isOverall": false, "label": "Home Request-failure", "isController": false}, {"data": [[1.73039814E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.73039814E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039814E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039814E12, "maxY": 10.0, "series": [{"data": [[1.73039814E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73039814E12, 5.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039814E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

