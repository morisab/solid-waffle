/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 6258.0, "series": [{"data": [[0.0, 94.0], [0.1, 94.0], [0.2, 94.0], [0.3, 94.0], [0.4, 95.0], [0.5, 95.0], [0.6, 95.0], [0.7, 102.0], [0.8, 102.0], [0.9, 102.0], [1.0, 108.0], [1.1, 108.0], [1.2, 108.0], [1.3, 108.0], [1.4, 128.0], [1.5, 128.0], [1.6, 128.0], [1.7, 154.0], [1.8, 154.0], [1.9, 154.0], [2.0, 154.0], [2.1, 154.0], [2.2, 154.0], [2.3, 154.0], [2.4, 154.0], [2.5, 154.0], [2.6, 154.0], [2.7, 155.0], [2.8, 155.0], [2.9, 155.0], [3.0, 156.0], [3.1, 156.0], [3.2, 156.0], [3.3, 156.0], [3.4, 158.0], [3.5, 158.0], [3.6, 158.0], [3.7, 159.0], [3.8, 159.0], [3.9, 159.0], [4.0, 160.0], [4.1, 160.0], [4.2, 160.0], [4.3, 160.0], [4.4, 160.0], [4.5, 160.0], [4.6, 160.0], [4.7, 162.0], [4.8, 162.0], [4.9, 162.0], [5.0, 162.0], [5.1, 162.0], [5.2, 162.0], [5.3, 162.0], [5.4, 166.0], [5.5, 166.0], [5.6, 166.0], [5.7, 166.0], [5.8, 166.0], [5.9, 166.0], [6.0, 166.0], [6.1, 167.0], [6.2, 167.0], [6.3, 167.0], [6.4, 167.0], [6.5, 167.0], [6.6, 167.0], [6.7, 170.0], [6.8, 170.0], [6.9, 170.0], [7.0, 170.0], [7.1, 175.0], [7.2, 175.0], [7.3, 175.0], [7.4, 179.0], [7.5, 179.0], [7.6, 179.0], [7.7, 182.0], [7.8, 182.0], [7.9, 182.0], [8.0, 184.0], [8.1, 184.0], [8.2, 184.0], [8.3, 184.0], [8.4, 186.0], [8.5, 186.0], [8.6, 186.0], [8.7, 186.0], [8.8, 186.0], [8.9, 186.0], [9.0, 188.0], [9.1, 188.0], [9.2, 188.0], [9.3, 188.0], [9.4, 189.0], [9.5, 189.0], [9.6, 189.0], [9.7, 190.0], [9.8, 190.0], [9.9, 190.0], [10.0, 190.0], [10.1, 191.0], [10.2, 191.0], [10.3, 191.0], [10.4, 192.0], [10.5, 192.0], [10.6, 192.0], [10.7, 197.0], [10.8, 197.0], [10.9, 197.0], [11.0, 197.0], [11.1, 198.0], [11.2, 198.0], [11.3, 198.0], [11.4, 201.0], [11.5, 201.0], [11.6, 201.0], [11.7, 202.0], [11.8, 202.0], [11.9, 202.0], [12.0, 202.0], [12.1, 203.0], [12.2, 203.0], [12.3, 203.0], [12.4, 203.0], [12.5, 203.0], [12.6, 203.0], [12.7, 205.0], [12.8, 205.0], [12.9, 205.0], [13.0, 205.0], [13.1, 211.0], [13.2, 211.0], [13.3, 211.0], [13.4, 218.0], [13.5, 218.0], [13.6, 218.0], [13.7, 219.0], [13.8, 219.0], [13.9, 219.0], [14.0, 219.0], [14.1, 223.0], [14.2, 223.0], [14.3, 223.0], [14.4, 226.0], [14.5, 226.0], [14.6, 226.0], [14.7, 228.0], [14.8, 228.0], [14.9, 228.0], [15.0, 228.0], [15.1, 229.0], [15.2, 229.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 230.0], [15.8, 230.0], [15.9, 230.0], [16.0, 230.0], [16.1, 240.0], [16.2, 240.0], [16.3, 240.0], [16.4, 241.0], [16.5, 241.0], [16.6, 241.0], [16.7, 242.0], [16.8, 242.0], [16.9, 242.0], [17.0, 242.0], [17.1, 242.0], [17.2, 242.0], [17.3, 242.0], [17.4, 242.0], [17.5, 242.0], [17.6, 242.0], [17.7, 243.0], [17.8, 243.0], [17.9, 243.0], [18.0, 243.0], [18.1, 243.0], [18.2, 243.0], [18.3, 243.0], [18.4, 243.0], [18.5, 243.0], [18.6, 243.0], [18.7, 244.0], [18.8, 244.0], [18.9, 244.0], [19.0, 244.0], [19.1, 247.0], [19.2, 247.0], [19.3, 247.0], [19.4, 247.0], [19.5, 247.0], [19.6, 247.0], [19.7, 248.0], [19.8, 248.0], [19.9, 248.0], [20.0, 248.0], [20.1, 252.0], [20.2, 252.0], [20.3, 252.0], [20.4, 256.0], [20.5, 256.0], [20.6, 256.0], [20.7, 257.0], [20.8, 257.0], [20.9, 257.0], [21.0, 258.0], [21.1, 258.0], [21.2, 258.0], [21.3, 258.0], [21.4, 258.0], [21.5, 258.0], [21.6, 258.0], [21.7, 259.0], [21.8, 259.0], [21.9, 259.0], [22.0, 259.0], [22.1, 259.0], [22.2, 259.0], [22.3, 259.0], [22.4, 259.0], [22.5, 259.0], [22.6, 259.0], [22.7, 261.0], [22.8, 261.0], [22.9, 261.0], [23.0, 265.0], [23.1, 265.0], [23.2, 265.0], [23.3, 265.0], [23.4, 265.0], [23.5, 265.0], [23.6, 265.0], [23.7, 267.0], [23.8, 267.0], [23.9, 267.0], [24.0, 269.0], [24.1, 269.0], [24.2, 269.0], [24.3, 269.0], [24.4, 270.0], [24.5, 270.0], [24.6, 270.0], [24.7, 271.0], [24.8, 271.0], [24.9, 271.0], [25.0, 271.0], [25.1, 271.0], [25.2, 271.0], [25.3, 271.0], [25.4, 272.0], [25.5, 272.0], [25.6, 272.0], [25.7, 272.0], [25.8, 272.0], [25.9, 272.0], [26.0, 272.0], [26.1, 272.0], [26.2, 272.0], [26.3, 272.0], [26.4, 274.0], [26.5, 274.0], [26.6, 274.0], [26.7, 274.0], [26.8, 274.0], [26.9, 274.0], [27.0, 275.0], [27.1, 275.0], [27.2, 275.0], [27.3, 275.0], [27.4, 276.0], [27.5, 276.0], [27.6, 276.0], [27.7, 278.0], [27.8, 278.0], [27.9, 278.0], [28.0, 279.0], [28.1, 279.0], [28.2, 279.0], [28.3, 279.0], [28.4, 279.0], [28.5, 279.0], [28.6, 279.0], [28.7, 280.0], [28.8, 280.0], [28.9, 280.0], [29.0, 281.0], [29.1, 281.0], [29.2, 281.0], [29.3, 281.0], [29.4, 281.0], [29.5, 281.0], [29.6, 281.0], [29.7, 282.0], [29.8, 282.0], [29.9, 282.0], [30.0, 284.0], [30.1, 284.0], [30.2, 284.0], [30.3, 284.0], [30.4, 285.0], [30.5, 285.0], [30.6, 285.0], [30.7, 287.0], [30.8, 287.0], [30.9, 287.0], [31.0, 287.0], [31.1, 287.0], [31.2, 287.0], [31.3, 287.0], [31.4, 287.0], [31.5, 287.0], [31.6, 287.0], [31.7, 288.0], [31.8, 288.0], [31.9, 288.0], [32.0, 289.0], [32.1, 289.0], [32.2, 289.0], [32.3, 289.0], [32.4, 290.0], [32.5, 290.0], [32.6, 290.0], [32.7, 290.0], [32.8, 290.0], [32.9, 290.0], [33.0, 291.0], [33.1, 291.0], [33.2, 291.0], [33.3, 291.0], [33.4, 292.0], [33.5, 292.0], [33.6, 292.0], [33.7, 293.0], [33.8, 293.0], [33.9, 293.0], [34.0, 294.0], [34.1, 294.0], [34.2, 294.0], [34.3, 294.0], [34.4, 295.0], [34.5, 295.0], [34.6, 295.0], [34.7, 297.0], [34.8, 297.0], [34.9, 297.0], [35.0, 297.0], [35.1, 299.0], [35.2, 299.0], [35.3, 299.0], [35.4, 300.0], [35.5, 300.0], [35.6, 300.0], [35.7, 303.0], [35.8, 303.0], [35.9, 303.0], [36.0, 303.0], [36.1, 306.0], [36.2, 306.0], [36.3, 306.0], [36.4, 311.0], [36.5, 311.0], [36.6, 311.0], [36.7, 314.0], [36.8, 314.0], [36.9, 314.0], [37.0, 314.0], [37.1, 315.0], [37.2, 315.0], [37.3, 315.0], [37.4, 315.0], [37.5, 315.0], [37.6, 315.0], [37.7, 315.0], [37.8, 315.0], [37.9, 315.0], [38.0, 315.0], [38.1, 316.0], [38.2, 316.0], [38.3, 316.0], [38.4, 318.0], [38.5, 318.0], [38.6, 318.0], [38.7, 319.0], [38.8, 319.0], [38.9, 319.0], [39.0, 319.0], [39.1, 319.0], [39.2, 319.0], [39.3, 319.0], [39.4, 320.0], [39.5, 320.0], [39.6, 320.0], [39.7, 320.0], [39.8, 320.0], [39.9, 320.0], [40.0, 320.0], [40.1, 323.0], [40.2, 323.0], [40.3, 323.0], [40.4, 326.0], [40.5, 326.0], [40.6, 326.0], [40.7, 327.0], [40.8, 327.0], [40.9, 327.0], [41.0, 327.0], [41.1, 330.0], [41.2, 330.0], [41.3, 330.0], [41.4, 332.0], [41.5, 332.0], [41.6, 332.0], [41.7, 334.0], [41.8, 334.0], [41.9, 334.0], [42.0, 334.0], [42.1, 334.0], [42.2, 334.0], [42.3, 334.0], [42.4, 336.0], [42.5, 336.0], [42.6, 336.0], [42.7, 337.0], [42.8, 337.0], [42.9, 337.0], [43.0, 337.0], [43.1, 338.0], [43.2, 338.0], [43.3, 338.0], [43.4, 338.0], [43.5, 338.0], [43.6, 338.0], [43.7, 339.0], [43.8, 339.0], [43.9, 339.0], [44.0, 339.0], [44.1, 339.0], [44.2, 339.0], [44.3, 339.0], [44.4, 339.0], [44.5, 339.0], [44.6, 339.0], [44.7, 340.0], [44.8, 340.0], [44.9, 340.0], [45.0, 340.0], [45.1, 341.0], [45.2, 341.0], [45.3, 341.0], [45.4, 341.0], [45.5, 341.0], [45.6, 341.0], [45.7, 346.0], [45.8, 346.0], [45.9, 346.0], [46.0, 346.0], [46.1, 346.0], [46.2, 346.0], [46.3, 346.0], [46.4, 347.0], [46.5, 347.0], [46.6, 347.0], [46.7, 347.0], [46.8, 347.0], [46.9, 347.0], [47.0, 347.0], [47.1, 348.0], [47.2, 348.0], [47.3, 348.0], [47.4, 349.0], [47.5, 349.0], [47.6, 349.0], [47.7, 351.0], [47.8, 351.0], [47.9, 351.0], [48.0, 351.0], [48.1, 352.0], [48.2, 352.0], [48.3, 352.0], [48.4, 352.0], [48.5, 352.0], [48.6, 352.0], [48.7, 354.0], [48.8, 354.0], [48.9, 354.0], [49.0, 354.0], [49.1, 354.0], [49.2, 354.0], [49.3, 354.0], [49.4, 355.0], [49.5, 355.0], [49.6, 355.0], [49.7, 355.0], [49.8, 355.0], [49.9, 355.0], [50.0, 355.0], [50.1, 355.0], [50.2, 355.0], [50.3, 355.0], [50.4, 355.0], [50.5, 355.0], [50.6, 355.0], [50.7, 356.0], [50.8, 356.0], [50.9, 356.0], [51.0, 356.0], [51.1, 357.0], [51.2, 357.0], [51.3, 357.0], [51.4, 357.0], [51.5, 357.0], [51.6, 357.0], [51.7, 357.0], [51.8, 357.0], [51.9, 357.0], [52.0, 357.0], [52.1, 359.0], [52.2, 359.0], [52.3, 359.0], [52.4, 360.0], [52.5, 360.0], [52.6, 360.0], [52.7, 360.0], [52.8, 360.0], [52.9, 360.0], [53.0, 360.0], [53.1, 360.0], [53.2, 360.0], [53.3, 360.0], [53.4, 362.0], [53.5, 362.0], [53.6, 362.0], [53.7, 363.0], [53.8, 363.0], [53.9, 363.0], [54.0, 363.0], [54.1, 363.0], [54.2, 363.0], [54.3, 363.0], [54.4, 363.0], [54.5, 363.0], [54.6, 363.0], [54.7, 363.0], [54.8, 363.0], [54.9, 363.0], [55.0, 363.0], [55.1, 363.0], [55.2, 363.0], [55.3, 363.0], [55.4, 364.0], [55.5, 364.0], [55.6, 364.0], [55.7, 367.0], [55.8, 367.0], [55.9, 367.0], [56.0, 367.0], [56.1, 368.0], [56.2, 368.0], [56.3, 368.0], [56.4, 370.0], [56.5, 370.0], [56.6, 370.0], [56.7, 370.0], [56.8, 370.0], [56.9, 370.0], [57.0, 370.0], [57.1, 371.0], [57.2, 371.0], [57.3, 371.0], [57.4, 371.0], [57.5, 371.0], [57.6, 371.0], [57.7, 371.0], [57.8, 371.0], [57.9, 371.0], [58.0, 371.0], [58.1, 372.0], [58.2, 372.0], [58.3, 372.0], [58.4, 374.0], [58.5, 374.0], [58.6, 374.0], [58.7, 377.0], [58.8, 377.0], [58.9, 377.0], [59.0, 377.0], [59.1, 379.0], [59.2, 379.0], [59.3, 379.0], [59.4, 379.0], [59.5, 379.0], [59.6, 379.0], [59.7, 379.0], [59.8, 379.0], [59.9, 379.0], [60.0, 379.0], [60.1, 380.0], [60.2, 380.0], [60.3, 380.0], [60.4, 383.0], [60.5, 383.0], [60.6, 383.0], [60.7, 384.0], [60.8, 384.0], [60.9, 384.0], [61.0, 384.0], [61.1, 384.0], [61.2, 384.0], [61.3, 384.0], [61.4, 385.0], [61.5, 385.0], [61.6, 385.0], [61.7, 386.0], [61.8, 386.0], [61.9, 386.0], [62.0, 386.0], [62.1, 388.0], [62.2, 388.0], [62.3, 388.0], [62.4, 389.0], [62.5, 389.0], [62.6, 389.0], [62.7, 390.0], [62.8, 390.0], [62.9, 390.0], [63.0, 390.0], [63.1, 392.0], [63.2, 392.0], [63.3, 392.0], [63.4, 393.0], [63.5, 393.0], [63.6, 393.0], [63.7, 393.0], [63.8, 393.0], [63.9, 393.0], [64.0, 393.0], [64.1, 394.0], [64.2, 394.0], [64.3, 394.0], [64.4, 395.0], [64.5, 395.0], [64.6, 395.0], [64.7, 395.0], [64.8, 395.0], [64.9, 395.0], [65.0, 395.0], [65.1, 397.0], [65.2, 397.0], [65.3, 397.0], [65.4, 397.0], [65.5, 397.0], [65.6, 397.0], [65.7, 401.0], [65.8, 401.0], [65.9, 401.0], [66.0, 401.0], [66.1, 401.0], [66.2, 401.0], [66.3, 401.0], [66.4, 402.0], [66.5, 402.0], [66.6, 402.0], [66.7, 402.0], [66.8, 402.0], [66.9, 402.0], [67.0, 402.0], [67.1, 403.0], [67.2, 403.0], [67.3, 403.0], [67.4, 405.0], [67.5, 405.0], [67.6, 405.0], [67.7, 405.0], [67.8, 405.0], [67.9, 405.0], [68.0, 405.0], [68.1, 405.0], [68.2, 405.0], [68.3, 405.0], [68.4, 407.0], [68.5, 407.0], [68.6, 407.0], [68.7, 408.0], [68.8, 408.0], [68.9, 408.0], [69.0, 408.0], [69.1, 410.0], [69.2, 410.0], [69.3, 410.0], [69.4, 410.0], [69.5, 410.0], [69.6, 410.0], [69.7, 410.0], [69.8, 410.0], [69.9, 410.0], [70.0, 410.0], [70.1, 413.0], [70.2, 413.0], [70.3, 413.0], [70.4, 413.0], [70.5, 413.0], [70.6, 413.0], [70.7, 414.0], [70.8, 414.0], [70.9, 414.0], [71.0, 414.0], [71.1, 414.0], [71.2, 414.0], [71.3, 414.0], [71.4, 416.0], [71.5, 416.0], [71.6, 416.0], [71.7, 416.0], [71.8, 416.0], [71.9, 416.0], [72.0, 416.0], [72.1, 418.0], [72.2, 418.0], [72.3, 418.0], [72.4, 419.0], [72.5, 419.0], [72.6, 419.0], [72.7, 421.0], [72.8, 421.0], [72.9, 421.0], [73.0, 421.0], [73.1, 422.0], [73.2, 422.0], [73.3, 422.0], [73.4, 423.0], [73.5, 423.0], [73.6, 423.0], [73.7, 424.0], [73.8, 424.0], [73.9, 424.0], [74.0, 424.0], [74.1, 426.0], [74.2, 426.0], [74.3, 426.0], [74.4, 426.0], [74.5, 426.0], [74.6, 426.0], [74.7, 427.0], [74.8, 427.0], [74.9, 427.0], [75.0, 427.0], [75.1, 427.0], [75.2, 427.0], [75.3, 427.0], [75.4, 428.0], [75.5, 428.0], [75.6, 428.0], [75.7, 429.0], [75.8, 429.0], [75.9, 429.0], [76.0, 429.0], [76.1, 432.0], [76.2, 432.0], [76.3, 432.0], [76.4, 433.0], [76.5, 433.0], [76.6, 433.0], [76.7, 437.0], [76.8, 437.0], [76.9, 437.0], [77.0, 437.0], [77.1, 441.0], [77.2, 441.0], [77.3, 441.0], [77.4, 445.0], [77.5, 445.0], [77.6, 445.0], [77.7, 445.0], [77.8, 445.0], [77.9, 445.0], [78.0, 445.0], [78.1, 447.0], [78.2, 447.0], [78.3, 447.0], [78.4, 447.0], [78.5, 447.0], [78.6, 447.0], [78.7, 447.0], [78.8, 447.0], [78.9, 447.0], [79.0, 447.0], [79.1, 452.0], [79.2, 452.0], [79.3, 452.0], [79.4, 456.0], [79.5, 456.0], [79.6, 456.0], [79.7, 457.0], [79.8, 457.0], [79.9, 457.0], [80.0, 457.0], [80.1, 468.0], [80.2, 468.0], [80.3, 468.0], [80.4, 471.0], [80.5, 471.0], [80.6, 471.0], [80.7, 472.0], [80.8, 472.0], [80.9, 472.0], [81.0, 472.0], [81.1, 475.0], [81.2, 475.0], [81.3, 475.0], [81.4, 481.0], [81.5, 481.0], [81.6, 481.0], [81.7, 499.0], [81.8, 499.0], [81.9, 499.0], [82.0, 504.0], [82.1, 504.0], [82.2, 504.0], [82.3, 504.0], [82.4, 505.0], [82.5, 505.0], [82.6, 505.0], [82.7, 506.0], [82.8, 506.0], [82.9, 506.0], [83.0, 526.0], [83.1, 526.0], [83.2, 526.0], [83.3, 526.0], [83.4, 531.0], [83.5, 531.0], [83.6, 531.0], [83.7, 533.0], [83.8, 533.0], [83.9, 533.0], [84.0, 537.0], [84.1, 537.0], [84.2, 537.0], [84.3, 537.0], [84.4, 539.0], [84.5, 539.0], [84.6, 539.0], [84.7, 554.0], [84.8, 554.0], [84.9, 554.0], [85.0, 558.0], [85.1, 558.0], [85.2, 558.0], [85.3, 558.0], [85.4, 559.0], [85.5, 559.0], [85.6, 559.0], [85.7, 574.0], [85.8, 574.0], [85.9, 574.0], [86.0, 576.0], [86.1, 576.0], [86.2, 576.0], [86.3, 576.0], [86.4, 601.0], [86.5, 601.0], [86.6, 601.0], [86.7, 609.0], [86.8, 609.0], [86.9, 609.0], [87.0, 613.0], [87.1, 613.0], [87.2, 613.0], [87.3, 613.0], [87.4, 615.0], [87.5, 615.0], [87.6, 615.0], [87.7, 621.0], [87.8, 621.0], [87.9, 621.0], [88.0, 642.0], [88.1, 642.0], [88.2, 642.0], [88.3, 642.0], [88.4, 660.0], [88.5, 660.0], [88.6, 660.0], [88.7, 697.0], [88.8, 697.0], [88.9, 697.0], [89.0, 721.0], [89.1, 721.0], [89.2, 721.0], [89.3, 721.0], [89.4, 730.0], [89.5, 730.0], [89.6, 730.0], [89.7, 734.0], [89.8, 734.0], [89.9, 734.0], [90.0, 735.0], [90.1, 735.0], [90.2, 735.0], [90.3, 735.0], [90.4, 744.0], [90.5, 744.0], [90.6, 744.0], [90.7, 744.0], [90.8, 744.0], [90.9, 744.0], [91.0, 749.0], [91.1, 749.0], [91.2, 749.0], [91.3, 749.0], [91.4, 750.0], [91.5, 750.0], [91.6, 750.0], [91.7, 752.0], [91.8, 752.0], [91.9, 752.0], [92.0, 755.0], [92.1, 755.0], [92.2, 755.0], [92.3, 755.0], [92.4, 757.0], [92.5, 757.0], [92.6, 757.0], [92.7, 758.0], [92.8, 758.0], [92.9, 758.0], [93.0, 761.0], [93.1, 761.0], [93.2, 761.0], [93.3, 761.0], [93.4, 762.0], [93.5, 762.0], [93.6, 762.0], [93.7, 764.0], [93.8, 764.0], [93.9, 764.0], [94.0, 765.0], [94.1, 765.0], [94.2, 765.0], [94.3, 765.0], [94.4, 767.0], [94.5, 767.0], [94.6, 767.0], [94.7, 772.0], [94.8, 772.0], [94.9, 772.0], [95.0, 773.0], [95.1, 773.0], [95.2, 773.0], [95.3, 773.0], [95.4, 781.0], [95.5, 781.0], [95.6, 781.0], [95.7, 782.0], [95.8, 782.0], [95.9, 782.0], [96.0, 892.0], [96.1, 892.0], [96.2, 892.0], [96.3, 892.0], [96.4, 1075.0], [96.5, 1075.0], [96.6, 1075.0], [96.7, 1141.0], [96.8, 1141.0], [96.9, 1141.0], [97.0, 1149.0], [97.1, 1149.0], [97.2, 1149.0], [97.3, 1149.0], [97.4, 1214.0], [97.5, 1214.0], [97.6, 1214.0], [97.7, 1355.0], [97.8, 1355.0], [97.9, 1355.0], [98.0, 1403.0], [98.1, 1403.0], [98.2, 1403.0], [98.3, 1403.0], [98.4, 1408.0], [98.5, 1408.0], [98.6, 1408.0], [98.7, 1414.0], [98.8, 1414.0], [98.9, 1414.0], [99.0, 1416.0], [99.1, 1416.0], [99.2, 1416.0], [99.3, 1416.0], [99.4, 1417.0], [99.5, 1417.0], [99.6, 1417.0], [99.7, 1434.0], [99.8, 1434.0], [99.9, 1434.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 82.0], [0.1, 82.0], [0.2, 82.0], [0.3, 82.0], [0.4, 117.0], [0.5, 117.0], [0.6, 117.0], [0.7, 119.0], [0.8, 119.0], [0.9, 119.0], [1.0, 150.0], [1.1, 150.0], [1.2, 150.0], [1.3, 150.0], [1.4, 161.0], [1.5, 161.0], [1.6, 161.0], [1.7, 205.0], [1.8, 205.0], [1.9, 205.0], [2.0, 218.0], [2.1, 218.0], [2.2, 218.0], [2.3, 218.0], [2.4, 241.0], [2.5, 241.0], [2.6, 241.0], [2.7, 279.0], [2.8, 279.0], [2.9, 279.0], [3.0, 297.0], [3.1, 297.0], [3.2, 297.0], [3.3, 297.0], [3.4, 303.0], [3.5, 303.0], [3.6, 303.0], [3.7, 325.0], [3.8, 325.0], [3.9, 325.0], [4.0, 325.0], [4.1, 325.0], [4.2, 325.0], [4.3, 325.0], [4.4, 330.0], [4.5, 330.0], [4.6, 330.0], [4.7, 331.0], [4.8, 331.0], [4.9, 331.0], [5.0, 332.0], [5.1, 332.0], [5.2, 332.0], [5.3, 332.0], [5.4, 346.0], [5.5, 346.0], [5.6, 346.0], [5.7, 380.0], [5.8, 380.0], [5.9, 380.0], [6.0, 391.0], [6.1, 391.0], [6.2, 391.0], [6.3, 391.0], [6.4, 403.0], [6.5, 403.0], [6.6, 403.0], [6.7, 406.0], [6.8, 406.0], [6.9, 406.0], [7.0, 407.0], [7.1, 407.0], [7.2, 407.0], [7.3, 407.0], [7.4, 412.0], [7.5, 412.0], [7.6, 412.0], [7.7, 426.0], [7.8, 426.0], [7.9, 426.0], [8.0, 443.0], [8.1, 443.0], [8.2, 443.0], [8.3, 443.0], [8.4, 445.0], [8.5, 445.0], [8.6, 445.0], [8.7, 448.0], [8.8, 448.0], [8.9, 448.0], [9.0, 479.0], [9.1, 479.0], [9.2, 479.0], [9.3, 479.0], [9.4, 1597.0], [9.5, 1597.0], [9.6, 1597.0], [9.7, 1618.0], [9.8, 1618.0], [9.9, 1618.0], [10.0, 1657.0], [10.1, 1657.0], [10.2, 1657.0], [10.3, 1657.0], [10.4, 1663.0], [10.5, 1663.0], [10.6, 1663.0], [10.7, 1723.0], [10.8, 1723.0], [10.9, 1723.0], [11.0, 1723.0], [11.1, 1734.0], [11.2, 1734.0], [11.3, 1734.0], [11.4, 1778.0], [11.5, 1778.0], [11.6, 1778.0], [11.7, 1779.0], [11.8, 1779.0], [11.9, 1779.0], [12.0, 1779.0], [12.1, 1812.0], [12.2, 1812.0], [12.3, 1812.0], [12.4, 1985.0], [12.5, 1985.0], [12.6, 1985.0], [12.7, 2095.0], [12.8, 2095.0], [12.9, 2095.0], [13.0, 2095.0], [13.1, 2101.0], [13.2, 2101.0], [13.3, 2101.0], [13.4, 2115.0], [13.5, 2115.0], [13.6, 2115.0], [13.7, 2140.0], [13.8, 2140.0], [13.9, 2140.0], [14.0, 2140.0], [14.1, 2194.0], [14.2, 2194.0], [14.3, 2194.0], [14.4, 2222.0], [14.5, 2222.0], [14.6, 2222.0], [14.7, 2227.0], [14.8, 2227.0], [14.9, 2227.0], [15.0, 2227.0], [15.1, 2562.0], [15.2, 2562.0], [15.3, 2562.0], [15.4, 2604.0], [15.5, 2604.0], [15.6, 2604.0], [15.7, 2609.0], [15.8, 2609.0], [15.9, 2609.0], [16.0, 2609.0], [16.1, 2630.0], [16.2, 2630.0], [16.3, 2630.0], [16.4, 2636.0], [16.5, 2636.0], [16.6, 2636.0], [16.7, 2640.0], [16.8, 2640.0], [16.9, 2640.0], [17.0, 2640.0], [17.1, 2649.0], [17.2, 2649.0], [17.3, 2649.0], [17.4, 2737.0], [17.5, 2737.0], [17.6, 2737.0], [17.7, 2760.0], [17.8, 2760.0], [17.9, 2760.0], [18.0, 2760.0], [18.1, 2776.0], [18.2, 2776.0], [18.3, 2776.0], [18.4, 2794.0], [18.5, 2794.0], [18.6, 2794.0], [18.7, 2937.0], [18.8, 2937.0], [18.9, 2937.0], [19.0, 2977.0], [19.1, 2977.0], [19.2, 2977.0], [19.3, 2977.0], [19.4, 2978.0], [19.5, 2978.0], [19.6, 2978.0], [19.7, 3000.0], [19.8, 3000.0], [19.9, 3000.0], [20.0, 3038.0], [20.1, 3038.0], [20.2, 3038.0], [20.3, 3038.0], [20.4, 3053.0], [20.5, 3053.0], [20.6, 3053.0], [20.7, 3110.0], [20.8, 3110.0], [20.9, 3110.0], [21.0, 3113.0], [21.1, 3113.0], [21.2, 3113.0], [21.3, 3113.0], [21.4, 3130.0], [21.5, 3130.0], [21.6, 3130.0], [21.7, 3135.0], [21.8, 3135.0], [21.9, 3135.0], [22.0, 3311.0], [22.1, 3311.0], [22.2, 3311.0], [22.3, 3311.0], [22.4, 3321.0], [22.5, 3321.0], [22.6, 3321.0], [22.7, 3364.0], [22.8, 3364.0], [22.9, 3364.0], [23.0, 3399.0], [23.1, 3399.0], [23.2, 3399.0], [23.3, 3399.0], [23.4, 3422.0], [23.5, 3422.0], [23.6, 3422.0], [23.7, 3424.0], [23.8, 3424.0], [23.9, 3424.0], [24.0, 3427.0], [24.1, 3427.0], [24.2, 3427.0], [24.3, 3427.0], [24.4, 3427.0], [24.5, 3427.0], [24.6, 3427.0], [24.7, 3427.0], [24.8, 3427.0], [24.9, 3427.0], [25.0, 3435.0], [25.1, 3435.0], [25.2, 3435.0], [25.3, 3435.0], [25.4, 3449.0], [25.5, 3449.0], [25.6, 3449.0], [25.7, 3472.0], [25.8, 3472.0], [25.9, 3472.0], [26.0, 3476.0], [26.1, 3476.0], [26.2, 3476.0], [26.3, 3476.0], [26.4, 3479.0], [26.5, 3479.0], [26.6, 3479.0], [26.7, 3484.0], [26.8, 3484.0], [26.9, 3484.0], [27.0, 3496.0], [27.1, 3496.0], [27.2, 3496.0], [27.3, 3496.0], [27.4, 3506.0], [27.5, 3506.0], [27.6, 3506.0], [27.7, 3512.0], [27.8, 3512.0], [27.9, 3512.0], [28.0, 3525.0], [28.1, 3525.0], [28.2, 3525.0], [28.3, 3525.0], [28.4, 3545.0], [28.5, 3545.0], [28.6, 3545.0], [28.7, 3546.0], [28.8, 3546.0], [28.9, 3546.0], [29.0, 3555.0], [29.1, 3555.0], [29.2, 3555.0], [29.3, 3555.0], [29.4, 3555.0], [29.5, 3555.0], [29.6, 3555.0], [29.7, 3560.0], [29.8, 3560.0], [29.9, 3560.0], [30.0, 3564.0], [30.1, 3564.0], [30.2, 3564.0], [30.3, 3564.0], [30.4, 3567.0], [30.5, 3567.0], [30.6, 3567.0], [30.7, 3581.0], [30.8, 3581.0], [30.9, 3581.0], [31.0, 3583.0], [31.1, 3583.0], [31.2, 3583.0], [31.3, 3583.0], [31.4, 3598.0], [31.5, 3598.0], [31.6, 3598.0], [31.7, 3686.0], [31.8, 3686.0], [31.9, 3686.0], [32.0, 3899.0], [32.1, 3899.0], [32.2, 3899.0], [32.3, 3899.0], [32.4, 3914.0], [32.5, 3914.0], [32.6, 3914.0], [32.7, 4022.0], [32.8, 4022.0], [32.9, 4022.0], [33.0, 4062.0], [33.1, 4062.0], [33.2, 4062.0], [33.3, 4062.0], [33.4, 4066.0], [33.5, 4066.0], [33.6, 4066.0], [33.7, 4140.0], [33.8, 4140.0], [33.9, 4140.0], [34.0, 4220.0], [34.1, 4220.0], [34.2, 4220.0], [34.3, 4220.0], [34.4, 4252.0], [34.5, 4252.0], [34.6, 4252.0], [34.7, 4294.0], [34.8, 4294.0], [34.9, 4294.0], [35.0, 4296.0], [35.1, 4296.0], [35.2, 4296.0], [35.3, 4296.0], [35.4, 4299.0], [35.5, 4299.0], [35.6, 4299.0], [35.7, 4341.0], [35.8, 4341.0], [35.9, 4341.0], [36.0, 4341.0], [36.1, 4341.0], [36.2, 4341.0], [36.3, 4341.0], [36.4, 4414.0], [36.5, 4414.0], [36.6, 4414.0], [36.7, 4429.0], [36.8, 4429.0], [36.9, 4429.0], [37.0, 4434.0], [37.1, 4434.0], [37.2, 4434.0], [37.3, 4434.0], [37.4, 4454.0], [37.5, 4454.0], [37.6, 4454.0], [37.7, 4461.0], [37.8, 4461.0], [37.9, 4461.0], [38.0, 4463.0], [38.1, 4463.0], [38.2, 4463.0], [38.3, 4463.0], [38.4, 4494.0], [38.5, 4494.0], [38.6, 4494.0], [38.7, 4544.0], [38.8, 4544.0], [38.9, 4544.0], [39.0, 4568.0], [39.1, 4568.0], [39.2, 4568.0], [39.3, 4568.0], [39.4, 4571.0], [39.5, 4571.0], [39.6, 4571.0], [39.7, 4618.0], [39.8, 4618.0], [39.9, 4618.0], [40.0, 4618.0], [40.1, 4625.0], [40.2, 4625.0], [40.3, 4625.0], [40.4, 4643.0], [40.5, 4643.0], [40.6, 4643.0], [40.7, 4669.0], [40.8, 4669.0], [40.9, 4669.0], [41.0, 4669.0], [41.1, 4704.0], [41.2, 4704.0], [41.3, 4704.0], [41.4, 4710.0], [41.5, 4710.0], [41.6, 4710.0], [41.7, 4712.0], [41.8, 4712.0], [41.9, 4712.0], [42.0, 4712.0], [42.1, 4736.0], [42.2, 4736.0], [42.3, 4736.0], [42.4, 4763.0], [42.5, 4763.0], [42.6, 4763.0], [42.7, 4823.0], [42.8, 4823.0], [42.9, 4823.0], [43.0, 4823.0], [43.1, 4835.0], [43.2, 4835.0], [43.3, 4835.0], [43.4, 4836.0], [43.5, 4836.0], [43.6, 4836.0], [43.7, 4844.0], [43.8, 4844.0], [43.9, 4844.0], [44.0, 4844.0], [44.1, 4866.0], [44.2, 4866.0], [44.3, 4866.0], [44.4, 4876.0], [44.5, 4876.0], [44.6, 4876.0], [44.7, 4877.0], [44.8, 4877.0], [44.9, 4877.0], [45.0, 4877.0], [45.1, 4881.0], [45.2, 4881.0], [45.3, 4881.0], [45.4, 4902.0], [45.5, 4902.0], [45.6, 4902.0], [45.7, 4947.0], [45.8, 4947.0], [45.9, 4947.0], [46.0, 4947.0], [46.1, 4996.0], [46.2, 4996.0], [46.3, 4996.0], [46.4, 4997.0], [46.5, 4997.0], [46.6, 4997.0], [46.7, 4998.0], [46.8, 4998.0], [46.9, 4998.0], [47.0, 4998.0], [47.1, 5012.0], [47.2, 5012.0], [47.3, 5012.0], [47.4, 5041.0], [47.5, 5041.0], [47.6, 5041.0], [47.7, 5057.0], [47.8, 5057.0], [47.9, 5057.0], [48.0, 5057.0], [48.1, 5063.0], [48.2, 5063.0], [48.3, 5063.0], [48.4, 5063.0], [48.5, 5063.0], [48.6, 5063.0], [48.7, 5068.0], [48.8, 5068.0], [48.9, 5068.0], [49.0, 5068.0], [49.1, 5095.0], [49.2, 5095.0], [49.3, 5095.0], [49.4, 5102.0], [49.5, 5102.0], [49.6, 5102.0], [49.7, 5106.0], [49.8, 5106.0], [49.9, 5106.0], [50.0, 5106.0], [50.1, 5107.0], [50.2, 5107.0], [50.3, 5107.0], [50.4, 5110.0], [50.5, 5110.0], [50.6, 5110.0], [50.7, 5115.0], [50.8, 5115.0], [50.9, 5115.0], [51.0, 5115.0], [51.1, 5129.0], [51.2, 5129.0], [51.3, 5129.0], [51.4, 5130.0], [51.5, 5130.0], [51.6, 5130.0], [51.7, 5131.0], [51.8, 5131.0], [51.9, 5131.0], [52.0, 5131.0], [52.1, 5131.0], [52.2, 5131.0], [52.3, 5131.0], [52.4, 5139.0], [52.5, 5139.0], [52.6, 5139.0], [52.7, 5142.0], [52.8, 5142.0], [52.9, 5142.0], [53.0, 5142.0], [53.1, 5145.0], [53.2, 5145.0], [53.3, 5145.0], [53.4, 5162.0], [53.5, 5162.0], [53.6, 5162.0], [53.7, 5166.0], [53.8, 5166.0], [53.9, 5166.0], [54.0, 5166.0], [54.1, 5168.0], [54.2, 5168.0], [54.3, 5168.0], [54.4, 5170.0], [54.5, 5170.0], [54.6, 5170.0], [54.7, 5170.0], [54.8, 5170.0], [54.9, 5170.0], [55.0, 5170.0], [55.1, 5177.0], [55.2, 5177.0], [55.3, 5177.0], [55.4, 5177.0], [55.5, 5177.0], [55.6, 5177.0], [55.7, 5177.0], [55.8, 5177.0], [55.9, 5177.0], [56.0, 5177.0], [56.1, 5178.0], [56.2, 5178.0], [56.3, 5178.0], [56.4, 5184.0], [56.5, 5184.0], [56.6, 5184.0], [56.7, 5186.0], [56.8, 5186.0], [56.9, 5186.0], [57.0, 5186.0], [57.1, 5187.0], [57.2, 5187.0], [57.3, 5187.0], [57.4, 5201.0], [57.5, 5201.0], [57.6, 5201.0], [57.7, 5207.0], [57.8, 5207.0], [57.9, 5207.0], [58.0, 5207.0], [58.1, 5208.0], [58.2, 5208.0], [58.3, 5208.0], [58.4, 5209.0], [58.5, 5209.0], [58.6, 5209.0], [58.7, 5218.0], [58.8, 5218.0], [58.9, 5218.0], [59.0, 5218.0], [59.1, 5219.0], [59.2, 5219.0], [59.3, 5219.0], [59.4, 5219.0], [59.5, 5219.0], [59.6, 5219.0], [59.7, 5220.0], [59.8, 5220.0], [59.9, 5220.0], [60.0, 5220.0], [60.1, 5221.0], [60.2, 5221.0], [60.3, 5221.0], [60.4, 5221.0], [60.5, 5221.0], [60.6, 5221.0], [60.7, 5221.0], [60.8, 5221.0], [60.9, 5221.0], [61.0, 5221.0], [61.1, 5223.0], [61.2, 5223.0], [61.3, 5223.0], [61.4, 5224.0], [61.5, 5224.0], [61.6, 5224.0], [61.7, 5226.0], [61.8, 5226.0], [61.9, 5226.0], [62.0, 5226.0], [62.1, 5231.0], [62.2, 5231.0], [62.3, 5231.0], [62.4, 5240.0], [62.5, 5240.0], [62.6, 5240.0], [62.7, 5243.0], [62.8, 5243.0], [62.9, 5243.0], [63.0, 5243.0], [63.1, 5259.0], [63.2, 5259.0], [63.3, 5259.0], [63.4, 5266.0], [63.5, 5266.0], [63.6, 5266.0], [63.7, 5268.0], [63.8, 5268.0], [63.9, 5268.0], [64.0, 5268.0], [64.1, 5275.0], [64.2, 5275.0], [64.3, 5275.0], [64.4, 5275.0], [64.5, 5275.0], [64.6, 5275.0], [64.7, 5275.0], [64.8, 5275.0], [64.9, 5275.0], [65.0, 5275.0], [65.1, 5278.0], [65.2, 5278.0], [65.3, 5278.0], [65.4, 5279.0], [65.5, 5279.0], [65.6, 5279.0], [65.7, 5280.0], [65.8, 5280.0], [65.9, 5280.0], [66.0, 5280.0], [66.1, 5282.0], [66.2, 5282.0], [66.3, 5282.0], [66.4, 5288.0], [66.5, 5288.0], [66.6, 5288.0], [66.7, 5289.0], [66.8, 5289.0], [66.9, 5289.0], [67.0, 5289.0], [67.1, 5290.0], [67.2, 5290.0], [67.3, 5290.0], [67.4, 5293.0], [67.5, 5293.0], [67.6, 5293.0], [67.7, 5301.0], [67.8, 5301.0], [67.9, 5301.0], [68.0, 5301.0], [68.1, 5301.0], [68.2, 5301.0], [68.3, 5301.0], [68.4, 5304.0], [68.5, 5304.0], [68.6, 5304.0], [68.7, 5305.0], [68.8, 5305.0], [68.9, 5305.0], [69.0, 5305.0], [69.1, 5305.0], [69.2, 5305.0], [69.3, 5305.0], [69.4, 5308.0], [69.5, 5308.0], [69.6, 5308.0], [69.7, 5313.0], [69.8, 5313.0], [69.9, 5313.0], [70.0, 5313.0], [70.1, 5314.0], [70.2, 5314.0], [70.3, 5314.0], [70.4, 5315.0], [70.5, 5315.0], [70.6, 5315.0], [70.7, 5315.0], [70.8, 5315.0], [70.9, 5315.0], [71.0, 5315.0], [71.1, 5316.0], [71.2, 5316.0], [71.3, 5316.0], [71.4, 5317.0], [71.5, 5317.0], [71.6, 5317.0], [71.7, 5317.0], [71.8, 5317.0], [71.9, 5317.0], [72.0, 5317.0], [72.1, 5318.0], [72.2, 5318.0], [72.3, 5318.0], [72.4, 5333.0], [72.5, 5333.0], [72.6, 5333.0], [72.7, 5333.0], [72.8, 5333.0], [72.9, 5333.0], [73.0, 5333.0], [73.1, 5349.0], [73.2, 5349.0], [73.3, 5349.0], [73.4, 5355.0], [73.5, 5355.0], [73.6, 5355.0], [73.7, 5361.0], [73.8, 5361.0], [73.9, 5361.0], [74.0, 5361.0], [74.1, 5369.0], [74.2, 5369.0], [74.3, 5369.0], [74.4, 5382.0], [74.5, 5382.0], [74.6, 5382.0], [74.7, 5400.0], [74.8, 5400.0], [74.9, 5400.0], [75.0, 5400.0], [75.1, 5405.0], [75.2, 5405.0], [75.3, 5405.0], [75.4, 5407.0], [75.5, 5407.0], [75.6, 5407.0], [75.7, 5416.0], [75.8, 5416.0], [75.9, 5416.0], [76.0, 5416.0], [76.1, 5423.0], [76.2, 5423.0], [76.3, 5423.0], [76.4, 5435.0], [76.5, 5435.0], [76.6, 5435.0], [76.7, 5454.0], [76.8, 5454.0], [76.9, 5454.0], [77.0, 5454.0], [77.1, 5456.0], [77.2, 5456.0], [77.3, 5456.0], [77.4, 5457.0], [77.5, 5457.0], [77.6, 5457.0], [77.7, 5457.0], [77.8, 5457.0], [77.9, 5457.0], [78.0, 5457.0], [78.1, 5465.0], [78.2, 5465.0], [78.3, 5465.0], [78.4, 5467.0], [78.5, 5467.0], [78.6, 5467.0], [78.7, 5480.0], [78.8, 5480.0], [78.9, 5480.0], [79.0, 5480.0], [79.1, 5492.0], [79.2, 5492.0], [79.3, 5492.0], [79.4, 5493.0], [79.5, 5493.0], [79.6, 5493.0], [79.7, 5493.0], [79.8, 5493.0], [79.9, 5493.0], [80.0, 5493.0], [80.1, 5494.0], [80.2, 5494.0], [80.3, 5494.0], [80.4, 5509.0], [80.5, 5509.0], [80.6, 5509.0], [80.7, 5510.0], [80.8, 5510.0], [80.9, 5510.0], [81.0, 5512.0], [81.1, 5512.0], [81.2, 5512.0], [81.3, 5512.0], [81.4, 5525.0], [81.5, 5525.0], [81.6, 5525.0], [81.7, 5533.0], [81.8, 5533.0], [81.9, 5533.0], [82.0, 5536.0], [82.1, 5536.0], [82.2, 5536.0], [82.3, 5536.0], [82.4, 5536.0], [82.5, 5536.0], [82.6, 5536.0], [82.7, 5538.0], [82.8, 5538.0], [82.9, 5538.0], [83.0, 5540.0], [83.1, 5540.0], [83.2, 5540.0], [83.3, 5540.0], [83.4, 5544.0], [83.5, 5544.0], [83.6, 5544.0], [83.7, 5555.0], [83.8, 5555.0], [83.9, 5555.0], [84.0, 5556.0], [84.1, 5556.0], [84.2, 5556.0], [84.3, 5556.0], [84.4, 5567.0], [84.5, 5567.0], [84.6, 5567.0], [84.7, 5571.0], [84.8, 5571.0], [84.9, 5571.0], [85.0, 5597.0], [85.1, 5597.0], [85.2, 5597.0], [85.3, 5597.0], [85.4, 5604.0], [85.5, 5604.0], [85.6, 5604.0], [85.7, 5615.0], [85.8, 5615.0], [85.9, 5615.0], [86.0, 5616.0], [86.1, 5616.0], [86.2, 5616.0], [86.3, 5616.0], [86.4, 5623.0], [86.5, 5623.0], [86.6, 5623.0], [86.7, 5633.0], [86.8, 5633.0], [86.9, 5633.0], [87.0, 5662.0], [87.1, 5662.0], [87.2, 5662.0], [87.3, 5662.0], [87.4, 5665.0], [87.5, 5665.0], [87.6, 5665.0], [87.7, 5724.0], [87.8, 5724.0], [87.9, 5724.0], [88.0, 5743.0], [88.1, 5743.0], [88.2, 5743.0], [88.3, 5743.0], [88.4, 5757.0], [88.5, 5757.0], [88.6, 5757.0], [88.7, 5763.0], [88.8, 5763.0], [88.9, 5763.0], [89.0, 5778.0], [89.1, 5778.0], [89.2, 5778.0], [89.3, 5778.0], [89.4, 5818.0], [89.5, 5818.0], [89.6, 5818.0], [89.7, 5822.0], [89.8, 5822.0], [89.9, 5822.0], [90.0, 5829.0], [90.1, 5829.0], [90.2, 5829.0], [90.3, 5829.0], [90.4, 5855.0], [90.5, 5855.0], [90.6, 5855.0], [90.7, 5866.0], [90.8, 5866.0], [90.9, 5866.0], [91.0, 5866.0], [91.1, 5866.0], [91.2, 5866.0], [91.3, 5866.0], [91.4, 5874.0], [91.5, 5874.0], [91.6, 5874.0], [91.7, 5900.0], [91.8, 5900.0], [91.9, 5900.0], [92.0, 5901.0], [92.1, 5901.0], [92.2, 5901.0], [92.3, 5901.0], [92.4, 5908.0], [92.5, 5908.0], [92.6, 5908.0], [92.7, 5910.0], [92.8, 5910.0], [92.9, 5910.0], [93.0, 5913.0], [93.1, 5913.0], [93.2, 5913.0], [93.3, 5913.0], [93.4, 5926.0], [93.5, 5926.0], [93.6, 5926.0], [93.7, 5932.0], [93.8, 5932.0], [93.9, 5932.0], [94.0, 5933.0], [94.1, 5933.0], [94.2, 5933.0], [94.3, 5933.0], [94.4, 5941.0], [94.5, 5941.0], [94.6, 5941.0], [94.7, 5960.0], [94.8, 5960.0], [94.9, 5960.0], [95.0, 5961.0], [95.1, 5961.0], [95.2, 5961.0], [95.3, 5961.0], [95.4, 5966.0], [95.5, 5966.0], [95.6, 5966.0], [95.7, 5967.0], [95.8, 5967.0], [95.9, 5967.0], [96.0, 5969.0], [96.1, 5969.0], [96.2, 5969.0], [96.3, 5969.0], [96.4, 6005.0], [96.5, 6005.0], [96.6, 6005.0], [96.7, 6012.0], [96.8, 6012.0], [96.9, 6012.0], [97.0, 6083.0], [97.1, 6083.0], [97.2, 6083.0], [97.3, 6083.0], [97.4, 6094.0], [97.5, 6094.0], [97.6, 6094.0], [97.7, 6103.0], [97.8, 6103.0], [97.9, 6103.0], [98.0, 6103.0], [98.1, 6103.0], [98.2, 6103.0], [98.3, 6103.0], [98.4, 6106.0], [98.5, 6106.0], [98.6, 6106.0], [98.7, 6130.0], [98.8, 6130.0], [98.9, 6130.0], [99.0, 6162.0], [99.1, 6162.0], [99.2, 6162.0], [99.3, 6162.0], [99.4, 6184.0], [99.5, 6184.0], [99.6, 6184.0], [99.7, 6258.0], [99.8, 6258.0], [99.9, 6258.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 28.0], [0.1, 28.0], [0.2, 28.0], [0.3, 28.0], [0.4, 36.0], [0.5, 36.0], [0.6, 36.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 45.0], [1.1, 45.0], [1.2, 45.0], [1.3, 45.0], [1.4, 50.0], [1.5, 50.0], [1.6, 50.0], [1.7, 57.0], [1.8, 57.0], [1.9, 57.0], [2.0, 76.0], [2.1, 76.0], [2.2, 76.0], [2.3, 76.0], [2.4, 81.0], [2.5, 81.0], [2.6, 81.0], [2.7, 89.0], [2.8, 89.0], [2.9, 89.0], [3.0, 93.0], [3.1, 93.0], [3.2, 93.0], [3.3, 93.0], [3.4, 97.0], [3.5, 97.0], [3.6, 97.0], [3.7, 101.0], [3.8, 101.0], [3.9, 101.0], [4.0, 112.0], [4.1, 112.0], [4.2, 112.0], [4.3, 112.0], [4.4, 114.0], [4.5, 114.0], [4.6, 114.0], [4.7, 114.0], [4.8, 114.0], [4.9, 114.0], [5.0, 132.0], [5.1, 132.0], [5.2, 132.0], [5.3, 132.0], [5.4, 134.0], [5.5, 134.0], [5.6, 134.0], [5.7, 141.0], [5.8, 141.0], [5.9, 141.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 151.0], [6.5, 151.0], [6.6, 151.0], [6.7, 151.0], [6.8, 151.0], [6.9, 151.0], [7.0, 152.0], [7.1, 152.0], [7.2, 152.0], [7.3, 152.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 159.0], [8.1, 159.0], [8.2, 159.0], [8.3, 159.0], [8.4, 166.0], [8.5, 166.0], [8.6, 166.0], [8.7, 171.0], [8.8, 171.0], [8.9, 171.0], [9.0, 173.0], [9.1, 173.0], [9.2, 173.0], [9.3, 173.0], [9.4, 180.0], [9.5, 180.0], [9.6, 180.0], [9.7, 187.0], [9.8, 187.0], [9.9, 187.0], [10.0, 187.0], [10.1, 189.0], [10.2, 189.0], [10.3, 189.0], [10.4, 191.0], [10.5, 191.0], [10.6, 191.0], [10.7, 192.0], [10.8, 192.0], [10.9, 192.0], [11.0, 192.0], [11.1, 194.0], [11.2, 194.0], [11.3, 194.0], [11.4, 195.0], [11.5, 195.0], [11.6, 195.0], [11.7, 196.0], [11.8, 196.0], [11.9, 196.0], [12.0, 196.0], [12.1, 196.0], [12.2, 196.0], [12.3, 196.0], [12.4, 196.0], [12.5, 196.0], [12.6, 196.0], [12.7, 197.0], [12.8, 197.0], [12.9, 197.0], [13.0, 197.0], [13.1, 197.0], [13.2, 197.0], [13.3, 197.0], [13.4, 198.0], [13.5, 198.0], [13.6, 198.0], [13.7, 198.0], [13.8, 198.0], [13.9, 198.0], [14.0, 198.0], [14.1, 200.0], [14.2, 200.0], [14.3, 200.0], [14.4, 201.0], [14.5, 201.0], [14.6, 201.0], [14.7, 202.0], [14.8, 202.0], [14.9, 202.0], [15.0, 202.0], [15.1, 202.0], [15.2, 202.0], [15.3, 202.0], [15.4, 202.0], [15.5, 202.0], [15.6, 202.0], [15.7, 205.0], [15.8, 205.0], [15.9, 205.0], [16.0, 205.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 207.0], [16.5, 207.0], [16.6, 207.0], [16.7, 208.0], [16.8, 208.0], [16.9, 208.0], [17.0, 208.0], [17.1, 208.0], [17.2, 208.0], [17.3, 208.0], [17.4, 209.0], [17.5, 209.0], [17.6, 209.0], [17.7, 209.0], [17.8, 209.0], [17.9, 209.0], [18.0, 209.0], [18.1, 209.0], [18.2, 209.0], [18.3, 209.0], [18.4, 215.0], [18.5, 215.0], [18.6, 215.0], [18.7, 216.0], [18.8, 216.0], [18.9, 216.0], [19.0, 216.0], [19.1, 216.0], [19.2, 216.0], [19.3, 216.0], [19.4, 220.0], [19.5, 220.0], [19.6, 220.0], [19.7, 222.0], [19.8, 222.0], [19.9, 222.0], [20.0, 224.0], [20.1, 224.0], [20.2, 224.0], [20.3, 224.0], [20.4, 227.0], [20.5, 227.0], [20.6, 227.0], [20.7, 227.0], [20.8, 227.0], [20.9, 227.0], [21.0, 228.0], [21.1, 228.0], [21.2, 228.0], [21.3, 228.0], [21.4, 229.0], [21.5, 229.0], [21.6, 229.0], [21.7, 229.0], [21.8, 229.0], [21.9, 229.0], [22.0, 230.0], [22.1, 230.0], [22.2, 230.0], [22.3, 230.0], [22.4, 231.0], [22.5, 231.0], [22.6, 231.0], [22.7, 231.0], [22.8, 231.0], [22.9, 231.0], [23.0, 232.0], [23.1, 232.0], [23.2, 232.0], [23.3, 232.0], [23.4, 232.0], [23.5, 232.0], [23.6, 232.0], [23.7, 233.0], [23.8, 233.0], [23.9, 233.0], [24.0, 233.0], [24.1, 233.0], [24.2, 233.0], [24.3, 233.0], [24.4, 233.0], [24.5, 233.0], [24.6, 233.0], [24.7, 234.0], [24.8, 234.0], [24.9, 234.0], [25.0, 234.0], [25.1, 234.0], [25.2, 234.0], [25.3, 234.0], [25.4, 235.0], [25.5, 235.0], [25.6, 235.0], [25.7, 235.0], [25.8, 235.0], [25.9, 235.0], [26.0, 235.0], [26.1, 235.0], [26.2, 235.0], [26.3, 235.0], [26.4, 235.0], [26.5, 235.0], [26.6, 235.0], [26.7, 235.0], [26.8, 235.0], [26.9, 235.0], [27.0, 235.0], [27.1, 237.0], [27.2, 237.0], [27.3, 237.0], [27.4, 237.0], [27.5, 237.0], [27.6, 237.0], [27.7, 238.0], [27.8, 238.0], [27.9, 238.0], [28.0, 238.0], [28.1, 238.0], [28.2, 238.0], [28.3, 238.0], [28.4, 239.0], [28.5, 239.0], [28.6, 239.0], [28.7, 241.0], [28.8, 241.0], [28.9, 241.0], [29.0, 241.0], [29.1, 241.0], [29.2, 241.0], [29.3, 241.0], [29.4, 242.0], [29.5, 242.0], [29.6, 242.0], [29.7, 242.0], [29.8, 242.0], [29.9, 242.0], [30.0, 242.0], [30.1, 242.0], [30.2, 242.0], [30.3, 242.0], [30.4, 242.0], [30.5, 242.0], [30.6, 242.0], [30.7, 243.0], [30.8, 243.0], [30.9, 243.0], [31.0, 243.0], [31.1, 243.0], [31.2, 243.0], [31.3, 243.0], [31.4, 244.0], [31.5, 244.0], [31.6, 244.0], [31.7, 244.0], [31.8, 244.0], [31.9, 244.0], [32.0, 244.0], [32.1, 246.0], [32.2, 246.0], [32.3, 246.0], [32.4, 247.0], [32.5, 247.0], [32.6, 247.0], [32.7, 247.0], [32.8, 247.0], [32.9, 247.0], [33.0, 247.0], [33.1, 250.0], [33.2, 250.0], [33.3, 250.0], [33.4, 251.0], [33.5, 251.0], [33.6, 251.0], [33.7, 252.0], [33.8, 252.0], [33.9, 252.0], [34.0, 252.0], [34.1, 252.0], [34.2, 252.0], [34.3, 252.0], [34.4, 253.0], [34.5, 253.0], [34.6, 253.0], [34.7, 253.0], [34.8, 253.0], [34.9, 253.0], [35.0, 253.0], [35.1, 254.0], [35.2, 254.0], [35.3, 254.0], [35.4, 255.0], [35.5, 255.0], [35.6, 255.0], [35.7, 258.0], [35.8, 258.0], [35.9, 258.0], [36.0, 258.0], [36.1, 259.0], [36.2, 259.0], [36.3, 259.0], [36.4, 260.0], [36.5, 260.0], [36.6, 260.0], [36.7, 260.0], [36.8, 260.0], [36.9, 260.0], [37.0, 260.0], [37.1, 263.0], [37.2, 263.0], [37.3, 263.0], [37.4, 264.0], [37.5, 264.0], [37.6, 264.0], [37.7, 265.0], [37.8, 265.0], [37.9, 265.0], [38.0, 265.0], [38.1, 266.0], [38.2, 266.0], [38.3, 266.0], [38.4, 266.0], [38.5, 266.0], [38.6, 266.0], [38.7, 273.0], [38.8, 273.0], [38.9, 273.0], [39.0, 273.0], [39.1, 274.0], [39.2, 274.0], [39.3, 274.0], [39.4, 274.0], [39.5, 274.0], [39.6, 274.0], [39.7, 276.0], [39.8, 276.0], [39.9, 276.0], [40.0, 276.0], [40.1, 277.0], [40.2, 277.0], [40.3, 277.0], [40.4, 277.0], [40.5, 277.0], [40.6, 277.0], [40.7, 278.0], [40.8, 278.0], [40.9, 278.0], [41.0, 278.0], [41.1, 279.0], [41.2, 279.0], [41.3, 279.0], [41.4, 280.0], [41.5, 280.0], [41.6, 280.0], [41.7, 281.0], [41.8, 281.0], [41.9, 281.0], [42.0, 281.0], [42.1, 281.0], [42.2, 281.0], [42.3, 281.0], [42.4, 281.0], [42.5, 281.0], [42.6, 281.0], [42.7, 281.0], [42.8, 281.0], [42.9, 281.0], [43.0, 281.0], [43.1, 282.0], [43.2, 282.0], [43.3, 282.0], [43.4, 282.0], [43.5, 282.0], [43.6, 282.0], [43.7, 282.0], [43.8, 282.0], [43.9, 282.0], [44.0, 282.0], [44.1, 283.0], [44.2, 283.0], [44.3, 283.0], [44.4, 285.0], [44.5, 285.0], [44.6, 285.0], [44.7, 288.0], [44.8, 288.0], [44.9, 288.0], [45.0, 288.0], [45.1, 293.0], [45.2, 293.0], [45.3, 293.0], [45.4, 293.0], [45.5, 293.0], [45.6, 293.0], [45.7, 293.0], [45.8, 293.0], [45.9, 293.0], [46.0, 293.0], [46.1, 293.0], [46.2, 293.0], [46.3, 293.0], [46.4, 293.0], [46.5, 293.0], [46.6, 293.0], [46.7, 294.0], [46.8, 294.0], [46.9, 294.0], [47.0, 294.0], [47.1, 297.0], [47.2, 297.0], [47.3, 297.0], [47.4, 298.0], [47.5, 298.0], [47.6, 298.0], [47.7, 298.0], [47.8, 298.0], [47.9, 298.0], [48.0, 298.0], [48.1, 300.0], [48.2, 300.0], [48.3, 300.0], [48.4, 300.0], [48.5, 300.0], [48.6, 300.0], [48.7, 302.0], [48.8, 302.0], [48.9, 302.0], [49.0, 302.0], [49.1, 302.0], [49.2, 302.0], [49.3, 302.0], [49.4, 303.0], [49.5, 303.0], [49.6, 303.0], [49.7, 306.0], [49.8, 306.0], [49.9, 306.0], [50.0, 306.0], [50.1, 307.0], [50.2, 307.0], [50.3, 307.0], [50.4, 307.0], [50.5, 307.0], [50.6, 307.0], [50.7, 309.0], [50.8, 309.0], [50.9, 309.0], [51.0, 309.0], [51.1, 309.0], [51.2, 309.0], [51.3, 309.0], [51.4, 310.0], [51.5, 310.0], [51.6, 310.0], [51.7, 310.0], [51.8, 310.0], [51.9, 310.0], [52.0, 310.0], [52.1, 312.0], [52.2, 312.0], [52.3, 312.0], [52.4, 312.0], [52.5, 312.0], [52.6, 312.0], [52.7, 313.0], [52.8, 313.0], [52.9, 313.0], [53.0, 313.0], [53.1, 313.0], [53.2, 313.0], [53.3, 313.0], [53.4, 314.0], [53.5, 314.0], [53.6, 314.0], [53.7, 315.0], [53.8, 315.0], [53.9, 315.0], [54.0, 315.0], [54.1, 315.0], [54.2, 315.0], [54.3, 315.0], [54.4, 316.0], [54.5, 316.0], [54.6, 316.0], [54.7, 316.0], [54.8, 316.0], [54.9, 316.0], [55.0, 316.0], [55.1, 317.0], [55.2, 317.0], [55.3, 317.0], [55.4, 318.0], [55.5, 318.0], [55.6, 318.0], [55.7, 318.0], [55.8, 318.0], [55.9, 318.0], [56.0, 318.0], [56.1, 318.0], [56.2, 318.0], [56.3, 318.0], [56.4, 319.0], [56.5, 319.0], [56.6, 319.0], [56.7, 321.0], [56.8, 321.0], [56.9, 321.0], [57.0, 321.0], [57.1, 322.0], [57.2, 322.0], [57.3, 322.0], [57.4, 324.0], [57.5, 324.0], [57.6, 324.0], [57.7, 325.0], [57.8, 325.0], [57.9, 325.0], [58.0, 325.0], [58.1, 325.0], [58.2, 325.0], [58.3, 325.0], [58.4, 326.0], [58.5, 326.0], [58.6, 326.0], [58.7, 326.0], [58.8, 326.0], [58.9, 326.0], [59.0, 326.0], [59.1, 331.0], [59.2, 331.0], [59.3, 331.0], [59.4, 331.0], [59.5, 331.0], [59.6, 331.0], [59.7, 332.0], [59.8, 332.0], [59.9, 332.0], [60.0, 332.0], [60.1, 332.0], [60.2, 332.0], [60.3, 332.0], [60.4, 334.0], [60.5, 334.0], [60.6, 334.0], [60.7, 338.0], [60.8, 338.0], [60.9, 338.0], [61.0, 338.0], [61.1, 339.0], [61.2, 339.0], [61.3, 339.0], [61.4, 343.0], [61.5, 343.0], [61.6, 343.0], [61.7, 345.0], [61.8, 345.0], [61.9, 345.0], [62.0, 345.0], [62.1, 345.0], [62.2, 345.0], [62.3, 345.0], [62.4, 348.0], [62.5, 348.0], [62.6, 348.0], [62.7, 349.0], [62.8, 349.0], [62.9, 349.0], [63.0, 349.0], [63.1, 349.0], [63.2, 349.0], [63.3, 349.0], [63.4, 351.0], [63.5, 351.0], [63.6, 351.0], [63.7, 352.0], [63.8, 352.0], [63.9, 352.0], [64.0, 352.0], [64.1, 356.0], [64.2, 356.0], [64.3, 356.0], [64.4, 356.0], [64.5, 356.0], [64.6, 356.0], [64.7, 358.0], [64.8, 358.0], [64.9, 358.0], [65.0, 358.0], [65.1, 360.0], [65.2, 360.0], [65.3, 360.0], [65.4, 360.0], [65.5, 360.0], [65.6, 360.0], [65.7, 363.0], [65.8, 363.0], [65.9, 363.0], [66.0, 363.0], [66.1, 363.0], [66.2, 363.0], [66.3, 363.0], [66.4, 366.0], [66.5, 366.0], [66.6, 366.0], [66.7, 367.0], [66.8, 367.0], [66.9, 367.0], [67.0, 367.0], [67.1, 368.0], [67.2, 368.0], [67.3, 368.0], [67.4, 368.0], [67.5, 368.0], [67.6, 368.0], [67.7, 368.0], [67.8, 368.0], [67.9, 368.0], [68.0, 368.0], [68.1, 369.0], [68.2, 369.0], [68.3, 369.0], [68.4, 369.0], [68.5, 369.0], [68.6, 369.0], [68.7, 370.0], [68.8, 370.0], [68.9, 370.0], [69.0, 370.0], [69.1, 370.0], [69.2, 370.0], [69.3, 370.0], [69.4, 371.0], [69.5, 371.0], [69.6, 371.0], [69.7, 372.0], [69.8, 372.0], [69.9, 372.0], [70.0, 372.0], [70.1, 372.0], [70.2, 372.0], [70.3, 372.0], [70.4, 373.0], [70.5, 373.0], [70.6, 373.0], [70.7, 375.0], [70.8, 375.0], [70.9, 375.0], [71.0, 375.0], [71.1, 375.0], [71.2, 375.0], [71.3, 375.0], [71.4, 375.0], [71.5, 375.0], [71.6, 375.0], [71.7, 376.0], [71.8, 376.0], [71.9, 376.0], [72.0, 376.0], [72.1, 376.0], [72.2, 376.0], [72.3, 376.0], [72.4, 377.0], [72.5, 377.0], [72.6, 377.0], [72.7, 377.0], [72.8, 377.0], [72.9, 377.0], [73.0, 377.0], [73.1, 379.0], [73.2, 379.0], [73.3, 379.0], [73.4, 380.0], [73.5, 380.0], [73.6, 380.0], [73.7, 380.0], [73.8, 380.0], [73.9, 380.0], [74.0, 380.0], [74.1, 381.0], [74.2, 381.0], [74.3, 381.0], [74.4, 381.0], [74.5, 381.0], [74.6, 381.0], [74.7, 382.0], [74.8, 382.0], [74.9, 382.0], [75.0, 382.0], [75.1, 382.0], [75.2, 382.0], [75.3, 382.0], [75.4, 383.0], [75.5, 383.0], [75.6, 383.0], [75.7, 386.0], [75.8, 386.0], [75.9, 386.0], [76.0, 386.0], [76.1, 389.0], [76.2, 389.0], [76.3, 389.0], [76.4, 390.0], [76.5, 390.0], [76.6, 390.0], [76.7, 390.0], [76.8, 390.0], [76.9, 390.0], [77.0, 390.0], [77.1, 390.0], [77.2, 390.0], [77.3, 390.0], [77.4, 392.0], [77.5, 392.0], [77.6, 392.0], [77.7, 394.0], [77.8, 394.0], [77.9, 394.0], [78.0, 394.0], [78.1, 395.0], [78.2, 395.0], [78.3, 395.0], [78.4, 395.0], [78.5, 395.0], [78.6, 395.0], [78.7, 396.0], [78.8, 396.0], [78.9, 396.0], [79.0, 396.0], [79.1, 402.0], [79.2, 402.0], [79.3, 402.0], [79.4, 403.0], [79.5, 403.0], [79.6, 403.0], [79.7, 405.0], [79.8, 405.0], [79.9, 405.0], [80.0, 405.0], [80.1, 407.0], [80.2, 407.0], [80.3, 407.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 409.0], [81.2, 409.0], [81.3, 409.0], [81.4, 412.0], [81.5, 412.0], [81.6, 412.0], [81.7, 413.0], [81.8, 413.0], [81.9, 413.0], [82.0, 416.0], [82.1, 416.0], [82.2, 416.0], [82.3, 416.0], [82.4, 419.0], [82.5, 419.0], [82.6, 419.0], [82.7, 419.0], [82.8, 419.0], [82.9, 419.0], [83.0, 421.0], [83.1, 421.0], [83.2, 421.0], [83.3, 421.0], [83.4, 421.0], [83.5, 421.0], [83.6, 421.0], [83.7, 422.0], [83.8, 422.0], [83.9, 422.0], [84.0, 422.0], [84.1, 422.0], [84.2, 422.0], [84.3, 422.0], [84.4, 424.0], [84.5, 424.0], [84.6, 424.0], [84.7, 424.0], [84.8, 424.0], [84.9, 424.0], [85.0, 424.0], [85.1, 425.0], [85.2, 425.0], [85.3, 425.0], [85.4, 426.0], [85.5, 426.0], [85.6, 426.0], [85.7, 427.0], [85.8, 427.0], [85.9, 427.0], [86.0, 428.0], [86.1, 428.0], [86.2, 428.0], [86.3, 428.0], [86.4, 429.0], [86.5, 429.0], [86.6, 429.0], [86.7, 431.0], [86.8, 431.0], [86.9, 431.0], [87.0, 433.0], [87.1, 433.0], [87.2, 433.0], [87.3, 433.0], [87.4, 433.0], [87.5, 433.0], [87.6, 433.0], [87.7, 434.0], [87.8, 434.0], [87.9, 434.0], [88.0, 437.0], [88.1, 437.0], [88.2, 437.0], [88.3, 437.0], [88.4, 438.0], [88.5, 438.0], [88.6, 438.0], [88.7, 438.0], [88.8, 438.0], [88.9, 438.0], [89.0, 442.0], [89.1, 442.0], [89.2, 442.0], [89.3, 442.0], [89.4, 442.0], [89.5, 442.0], [89.6, 442.0], [89.7, 447.0], [89.8, 447.0], [89.9, 447.0], [90.0, 451.0], [90.1, 451.0], [90.2, 451.0], [90.3, 451.0], [90.4, 456.0], [90.5, 456.0], [90.6, 456.0], [90.7, 459.0], [90.8, 459.0], [90.9, 459.0], [91.0, 459.0], [91.1, 459.0], [91.2, 459.0], [91.3, 459.0], [91.4, 461.0], [91.5, 461.0], [91.6, 461.0], [91.7, 466.0], [91.8, 466.0], [91.9, 466.0], [92.0, 468.0], [92.1, 468.0], [92.2, 468.0], [92.3, 468.0], [92.4, 473.0], [92.5, 473.0], [92.6, 473.0], [92.7, 473.0], [92.8, 473.0], [92.9, 473.0], [93.0, 482.0], [93.1, 482.0], [93.2, 482.0], [93.3, 482.0], [93.4, 498.0], [93.5, 498.0], [93.6, 498.0], [93.7, 499.0], [93.8, 499.0], [93.9, 499.0], [94.0, 503.0], [94.1, 503.0], [94.2, 503.0], [94.3, 503.0], [94.4, 511.0], [94.5, 511.0], [94.6, 511.0], [94.7, 512.0], [94.8, 512.0], [94.9, 512.0], [95.0, 513.0], [95.1, 513.0], [95.2, 513.0], [95.3, 513.0], [95.4, 525.0], [95.5, 525.0], [95.6, 525.0], [95.7, 535.0], [95.8, 535.0], [95.9, 535.0], [96.0, 537.0], [96.1, 537.0], [96.2, 537.0], [96.3, 537.0], [96.4, 570.0], [96.5, 570.0], [96.6, 570.0], [96.7, 583.0], [96.8, 583.0], [96.9, 583.0], [97.0, 583.0], [97.1, 583.0], [97.2, 583.0], [97.3, 583.0], [97.4, 614.0], [97.5, 614.0], [97.6, 614.0], [97.7, 812.0], [97.8, 812.0], [97.9, 812.0], [98.0, 831.0], [98.1, 831.0], [98.2, 831.0], [98.3, 831.0], [98.4, 833.0], [98.5, 833.0], [98.6, 833.0], [98.7, 855.0], [98.8, 855.0], [98.9, 855.0], [99.0, 1122.0], [99.1, 1122.0], [99.2, 1122.0], [99.3, 1122.0], [99.4, 1157.0], [99.5, 1157.0], [99.6, 1157.0], [99.7, 1647.0], [99.8, 1647.0], [99.9, 1647.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 102.0, "series": [{"data": [[0.0, 2.0], [600.0, 8.0], [700.0, 21.0], [200.0, 72.0], [800.0, 1.0], [1000.0, 1.0], [1100.0, 2.0], [300.0, 91.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 6.0], [100.0, 32.0], [400.0, 49.0], [500.0, 13.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 1.0], [1500.0, 1.0], [100.0, 4.0], [1600.0, 3.0], [1700.0, 4.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 4.0], [2200.0, 2.0], [2500.0, 1.0], [2600.0, 6.0], [2700.0, 4.0], [2900.0, 3.0], [3000.0, 3.0], [3100.0, 4.0], [3300.0, 4.0], [200.0, 5.0], [3400.0, 12.0], [3500.0, 13.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 3.0], [4200.0, 5.0], [4300.0, 2.0], [4100.0, 1.0], [4500.0, 3.0], [4400.0, 7.0], [4600.0, 4.0], [4700.0, 5.0], [300.0, 9.0], [4800.0, 8.0], [5100.0, 24.0], [4900.0, 5.0], [5000.0, 7.0], [5200.0, 31.0], [5300.0, 21.0], [5400.0, 17.0], [5500.0, 15.0], [5600.0, 7.0], [5700.0, 5.0], [5800.0, 7.0], [5900.0, 14.0], [6000.0, 4.0], [6100.0, 6.0], [6200.0, 1.0], [400.0, 9.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 11.0], [1100.0, 2.0], [300.0, 93.0], [600.0, 1.0], [1600.0, 1.0], [100.0, 31.0], [200.0, 102.0], [400.0, 45.0], [800.0, 4.0], [500.0, 10.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 71.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 556.0, "series": [{"data": [[0.0, 556.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 71.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 273.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 238.23888888888882, "minX": 1.7303961E12, "maxY": 238.23888888888882, "series": [{"data": [[1.7303961E12, 238.23888888888882]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7303961E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 51.66666666666667, "minX": 1.0, "maxY": 6258.0, "series": [{"data": [[2.0, 1214.0], [4.0, 1434.0], [5.0, 1145.0], [6.0, 1416.0], [7.0, 1417.0], [8.0, 1408.0], [9.0, 1414.0], [10.0, 1403.0], [11.0, 1355.0], [12.0, 405.0], [13.0, 1075.0], [16.0, 766.5], [17.0, 771.5], [18.0, 765.0], [19.0, 757.0], [21.0, 770.0], [22.0, 892.0], [23.0, 755.0], [24.0, 749.0], [26.0, 759.5], [27.0, 764.0], [28.0, 319.0], [29.0, 294.0], [33.0, 738.0], [35.0, 269.5], [34.0, 613.0], [37.0, 576.0], [36.0, 773.0], [39.0, 697.0], [38.0, 744.0], [41.0, 186.0], [40.0, 166.0], [43.0, 179.0], [45.0, 243.0], [47.0, 303.0], [49.0, 421.0], [48.0, 642.0], [51.0, 280.0], [53.0, 395.0], [52.0, 611.0], [55.0, 744.0], [54.0, 735.0], [57.0, 721.0], [56.0, 241.0], [59.0, 259.0], [58.0, 272.0], [61.0, 272.0], [60.0, 259.0], [63.0, 280.0], [67.0, 615.0], [71.0, 340.0], [69.0, 370.0], [75.0, 424.5], [74.0, 429.0], [73.0, 314.0], [79.0, 274.0], [78.0, 559.0], [77.0, 346.0], [76.0, 352.0], [83.0, 393.0], [82.0, 382.0], [81.0, 554.0], [80.0, 279.0], [87.0, 379.0], [86.0, 413.0], [85.0, 386.0], [84.0, 401.0], [90.0, 323.0], [89.0, 385.0], [94.0, 311.0], [93.0, 385.6666666666667], [92.0, 457.5], [99.0, 315.0], [98.0, 370.0], [97.0, 372.0], [96.0, 344.5], [103.0, 428.5], [102.0, 354.0], [100.0, 364.0], [107.0, 341.0], [105.0, 386.25], [115.0, 334.0], [119.0, 336.5], [120.0, 344.0], [127.0, 320.0], [126.0, 316.0], [125.0, 456.0], [135.0, 334.0], [147.0, 338.0], [157.0, 428.0], [154.0, 422.0], [152.0, 426.0], [167.0, 276.0], [164.0, 290.0], [161.0, 287.0], [160.0, 388.0], [174.0, 416.0], [172.0, 359.0], [169.0, 359.66666666666663], [171.0, 392.0], [178.0, 402.0], [177.0, 474.3333333333333], [191.0, 426.0], [190.0, 468.0], [189.0, 472.0], [199.0, 326.0], [198.0, 338.5], [196.0, 427.0], [194.0, 405.0], [192.0, 357.0], [207.0, 403.3333333333333], [206.0, 327.0], [205.0, 374.0], [200.0, 416.0], [213.0, 437.0], [212.0, 431.2], [210.0, 411.0], [208.0, 471.0], [223.0, 441.0], [222.0, 445.0], [221.0, 375.25], [219.0, 526.0], [217.0, 424.0], [216.0, 423.0], [231.0, 354.0], [230.0, 363.0], [229.0, 355.0], [228.0, 360.0], [227.0, 539.0], [225.0, 363.0], [224.0, 357.0], [236.0, 355.0], [235.0, 414.0], [233.0, 398.7878787878788], [247.0, 203.0], [246.0, 254.4], [245.0, 240.0], [242.0, 247.0], [240.0, 277.375], [255.0, 236.0], [253.0, 201.0], [252.0, 247.5], [250.0, 205.0], [248.0, 247.0], [258.0, 287.0], [275.0, 186.0], [285.0, 175.0], [284.0, 152.5], [282.0, 166.0], [280.0, 162.0], [277.0, 184.0], [274.0, 188.0], [273.0, 192.0], [272.0, 226.0], [286.0, 159.69230769230768], [292.0, 218.5], [294.0, 269.99999999999994], [295.0, 252.22222222222226], [291.0, 299.3], [288.0, 128.0], [1.0, 94.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[170.2433333333334, 402.3933333333332]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[271.0, 5723.8], [270.0, 5994.333333333333], [260.0, 6258.0], [285.0, 4732.041666666667], [277.0, 4096.0], [278.0, 82.0], [281.0, 2215.333333333333], [283.0, 3458.1794871794878], [279.0, 3484.238095238096], [280.0, 3380.0], [284.0, 4563.333333333333], [286.0, 4409.0], [275.0, 5979.0], [274.0, 6106.0], [272.0, 5392.571428571428], [288.0, 4867.704545454548], [289.0, 4486.647058823531], [292.0, 4991.636363636363], [293.0, 4406.333333333333], [294.0, 4936.425000000001], [295.0, 2777.5652173913045], [291.0, 4161.928571428571]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[286.36, 4264.570000000004]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[5.0, 1157.0], [21.0, 1122.0], [60.0, 614.0], [71.0, 405.0], [87.0, 356.0], [120.0, 831.0], [124.0, 855.0], [135.0, 812.0], [136.0, 833.0], [150.0, 437.0], [148.0, 433.0], [177.0, 513.0], [198.0, 583.0], [194.0, 498.0], [207.0, 375.0], [200.0, 583.0], [214.0, 345.0], [213.0, 343.0], [211.0, 570.0], [223.0, 360.0], [222.0, 456.0], [221.0, 373.0], [219.0, 375.6666666666667], [218.0, 338.0], [230.0, 442.0], [236.0, 300.27272727272725], [235.0, 341.2], [233.0, 413.58461538461535], [246.0, 260.0], [245.0, 233.33333333333334], [243.0, 230.0], [242.0, 252.0], [240.0, 259.05263157894734], [255.0, 242.0], [250.0, 242.5], [248.0, 260.5], [263.0, 274.0], [283.0, 51.66666666666667], [285.0, 390.0], [284.0, 101.25], [282.0, 151.0], [279.0, 176.5], [276.0, 171.0], [272.0, 194.5], [286.0, 155.0], [288.0, 129.0], [292.0, 214.13636363636365], [294.0, 299.74074074074076], [293.0, 248.2727272727273], [295.0, 313.65625], [291.0, 298.2903225806451]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[258.1133333333331, 321.2766666666665]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 295.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.7303961E12, "maxY": 9330.0, "series": [{"data": [[1.7303961E12, 9330.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7303961E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7303961E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 321.2766666666665, "minX": 1.7303961E12, "maxY": 4264.570000000004, "series": [{"data": [[1.7303961E12, 402.3933333333332]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.7303961E12, 4264.570000000004]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.7303961E12, 321.2766666666665]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7303961E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 320.09000000000003, "minX": 1.7303961E12, "maxY": 4097.133333333335, "series": [{"data": [[1.7303961E12, 402.1066666666666]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.7303961E12, 4097.133333333335]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.7303961E12, 320.09000000000003]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7303961E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7303961E12, "maxY": 747.2833333333336, "series": [{"data": [[1.7303961E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.7303961E12, 747.2833333333336]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.7303961E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7303961E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.7303961E12, "maxY": 6258.0, "series": [{"data": [[1.7303961E12, 6258.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7303961E12, 5313.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7303961E12, 6082.290000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7303961E12, 5595.699999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7303961E12, 28.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7303961E12, 395.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7303961E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 318.0, "minX": 34.0, "maxY": 4998.0, "series": [{"data": [[34.0, 769.5], [326.0, 376.5], [45.0, 3424.0], [376.0, 318.0], [119.0, 4998.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 318.0, "minX": 34.0, "maxY": 4461.0, "series": [{"data": [[34.0, 769.5], [326.0, 375.5], [45.0, 3424.0], [376.0, 318.0], [119.0, 4461.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.7303961E12, "maxY": 15.0, "series": [{"data": [[1.7303961E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7303961E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.7303961E12, "maxY": 15.0, "series": [{"data": [[1.7303961E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7303961E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.7303961E12, "maxY": 5.0, "series": [{"data": [[1.7303961E12, 5.0]], "isOverall": false, "label": "Home Request-success", "isController": false}, {"data": [[1.7303961E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.7303961E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7303961E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.7303961E12, "maxY": 15.0, "series": [{"data": [[1.7303961E12, 15.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7303961E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

