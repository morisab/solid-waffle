/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 1966.0, "series": [{"data": [[0.0, 40.0], [0.1, 40.0], [0.2, 40.0], [0.3, 40.0], [0.4, 45.0], [0.5, 45.0], [0.6, 45.0], [0.7, 57.0], [0.8, 57.0], [0.9, 57.0], [1.0, 63.0], [1.1, 63.0], [1.2, 63.0], [1.3, 63.0], [1.4, 67.0], [1.5, 67.0], [1.6, 67.0], [1.7, 68.0], [1.8, 68.0], [1.9, 68.0], [2.0, 71.0], [2.1, 71.0], [2.2, 71.0], [2.3, 71.0], [2.4, 71.0], [2.5, 71.0], [2.6, 71.0], [2.7, 75.0], [2.8, 75.0], [2.9, 75.0], [3.0, 83.0], [3.1, 83.0], [3.2, 83.0], [3.3, 83.0], [3.4, 88.0], [3.5, 88.0], [3.6, 88.0], [3.7, 93.0], [3.8, 93.0], [3.9, 93.0], [4.0, 94.0], [4.1, 94.0], [4.2, 94.0], [4.3, 94.0], [4.4, 97.0], [4.5, 97.0], [4.6, 97.0], [4.7, 101.0], [4.8, 101.0], [4.9, 101.0], [5.0, 101.0], [5.1, 101.0], [5.2, 101.0], [5.3, 101.0], [5.4, 102.0], [5.5, 102.0], [5.6, 102.0], [5.7, 102.0], [5.8, 102.0], [5.9, 102.0], [6.0, 105.0], [6.1, 105.0], [6.2, 105.0], [6.3, 105.0], [6.4, 105.0], [6.5, 105.0], [6.6, 105.0], [6.7, 107.0], [6.8, 107.0], [6.9, 107.0], [7.0, 107.0], [7.1, 107.0], [7.2, 107.0], [7.3, 107.0], [7.4, 107.0], [7.5, 107.0], [7.6, 107.0], [7.7, 109.0], [7.8, 109.0], [7.9, 109.0], [8.0, 109.0], [8.1, 109.0], [8.2, 109.0], [8.3, 109.0], [8.4, 112.0], [8.5, 112.0], [8.6, 112.0], [8.7, 114.0], [8.8, 114.0], [8.9, 114.0], [9.0, 114.0], [9.1, 114.0], [9.2, 114.0], [9.3, 114.0], [9.4, 115.0], [9.5, 115.0], [9.6, 115.0], [9.7, 116.0], [9.8, 116.0], [9.9, 116.0], [10.0, 116.0], [10.1, 117.0], [10.2, 117.0], [10.3, 117.0], [10.4, 119.0], [10.5, 119.0], [10.6, 119.0], [10.7, 119.0], [10.8, 119.0], [10.9, 119.0], [11.0, 119.0], [11.1, 120.0], [11.2, 120.0], [11.3, 120.0], [11.4, 120.0], [11.5, 120.0], [11.6, 120.0], [11.7, 120.0], [11.8, 120.0], [11.9, 120.0], [12.0, 120.0], [12.1, 122.0], [12.2, 122.0], [12.3, 122.0], [12.4, 123.0], [12.5, 123.0], [12.6, 123.0], [12.7, 123.0], [12.8, 123.0], [12.9, 123.0], [13.0, 123.0], [13.1, 123.0], [13.2, 123.0], [13.3, 123.0], [13.4, 124.0], [13.5, 124.0], [13.6, 124.0], [13.7, 124.0], [13.8, 124.0], [13.9, 124.0], [14.0, 124.0], [14.1, 124.0], [14.2, 124.0], [14.3, 124.0], [14.4, 125.0], [14.5, 125.0], [14.6, 125.0], [14.7, 125.0], [14.8, 125.0], [14.9, 125.0], [15.0, 125.0], [15.1, 126.0], [15.2, 126.0], [15.3, 126.0], [15.4, 126.0], [15.5, 126.0], [15.6, 126.0], [15.7, 127.0], [15.8, 127.0], [15.9, 127.0], [16.0, 128.0], [16.1, 128.0], [16.2, 128.0], [16.3, 128.0], [16.4, 128.0], [16.5, 128.0], [16.6, 128.0], [16.7, 130.0], [16.8, 130.0], [16.9, 130.0], [17.0, 130.0], [17.1, 130.0], [17.2, 130.0], [17.3, 130.0], [17.4, 132.0], [17.5, 132.0], [17.6, 132.0], [17.7, 132.0], [17.8, 132.0], [17.9, 132.0], [18.0, 132.0], [18.1, 133.0], [18.2, 133.0], [18.3, 133.0], [18.4, 133.0], [18.5, 133.0], [18.6, 133.0], [18.7, 136.0], [18.8, 136.0], [18.9, 136.0], [19.0, 136.0], [19.1, 137.0], [19.2, 137.0], [19.3, 137.0], [19.4, 137.0], [19.5, 137.0], [19.6, 137.0], [19.7, 138.0], [19.8, 138.0], [19.9, 138.0], [20.0, 138.0], [20.1, 138.0], [20.2, 138.0], [20.3, 138.0], [20.4, 138.0], [20.5, 138.0], [20.6, 138.0], [20.7, 139.0], [20.8, 139.0], [20.9, 139.0], [21.0, 139.0], [21.1, 139.0], [21.2, 139.0], [21.3, 139.0], [21.4, 139.0], [21.5, 139.0], [21.6, 139.0], [21.7, 139.0], [21.8, 139.0], [21.9, 139.0], [22.0, 139.0], [22.1, 140.0], [22.2, 140.0], [22.3, 140.0], [22.4, 141.0], [22.5, 141.0], [22.6, 141.0], [22.7, 142.0], [22.8, 142.0], [22.9, 142.0], [23.0, 143.0], [23.1, 143.0], [23.2, 143.0], [23.3, 143.0], [23.4, 143.0], [23.5, 143.0], [23.6, 143.0], [23.7, 144.0], [23.8, 144.0], [23.9, 144.0], [24.0, 144.0], [24.1, 144.0], [24.2, 144.0], [24.3, 144.0], [24.4, 144.0], [24.5, 144.0], [24.6, 144.0], [24.7, 144.0], [24.8, 144.0], [24.9, 144.0], [25.0, 145.0], [25.1, 145.0], [25.2, 145.0], [25.3, 145.0], [25.4, 146.0], [25.5, 146.0], [25.6, 146.0], [25.7, 147.0], [25.8, 147.0], [25.9, 147.0], [26.0, 148.0], [26.1, 148.0], [26.2, 148.0], [26.3, 148.0], [26.4, 149.0], [26.5, 149.0], [26.6, 149.0], [26.7, 150.0], [26.8, 150.0], [26.9, 150.0], [27.0, 150.0], [27.1, 150.0], [27.2, 150.0], [27.3, 150.0], [27.4, 150.0], [27.5, 150.0], [27.6, 150.0], [27.7, 150.0], [27.8, 150.0], [27.9, 150.0], [28.0, 150.0], [28.1, 150.0], [28.2, 150.0], [28.3, 150.0], [28.4, 151.0], [28.5, 151.0], [28.6, 151.0], [28.7, 152.0], [28.8, 152.0], [28.9, 152.0], [29.0, 152.0], [29.1, 152.0], [29.2, 152.0], [29.3, 152.0], [29.4, 153.0], [29.5, 153.0], [29.6, 153.0], [29.7, 153.0], [29.8, 153.0], [29.9, 153.0], [30.0, 155.0], [30.1, 155.0], [30.2, 155.0], [30.3, 155.0], [30.4, 155.0], [30.5, 155.0], [30.6, 155.0], [30.7, 155.0], [30.8, 155.0], [30.9, 155.0], [31.0, 156.0], [31.1, 156.0], [31.2, 156.0], [31.3, 156.0], [31.4, 156.0], [31.5, 156.0], [31.6, 156.0], [31.7, 157.0], [31.8, 157.0], [31.9, 157.0], [32.0, 157.0], [32.1, 157.0], [32.2, 157.0], [32.3, 157.0], [32.4, 157.0], [32.5, 157.0], [32.6, 157.0], [32.7, 158.0], [32.8, 158.0], [32.9, 158.0], [33.0, 159.0], [33.1, 159.0], [33.2, 159.0], [33.3, 159.0], [33.4, 160.0], [33.5, 160.0], [33.6, 160.0], [33.7, 161.0], [33.8, 161.0], [33.9, 161.0], [34.0, 161.0], [34.1, 161.0], [34.2, 161.0], [34.3, 161.0], [34.4, 163.0], [34.5, 163.0], [34.6, 163.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 164.0], [35.4, 165.0], [35.5, 165.0], [35.6, 165.0], [35.7, 168.0], [35.8, 168.0], [35.9, 168.0], [36.0, 168.0], [36.1, 170.0], [36.2, 170.0], [36.3, 170.0], [36.4, 171.0], [36.5, 171.0], [36.6, 171.0], [36.7, 171.0], [36.8, 171.0], [36.9, 171.0], [37.0, 171.0], [37.1, 172.0], [37.2, 172.0], [37.3, 172.0], [37.4, 172.0], [37.5, 172.0], [37.6, 172.0], [37.7, 173.0], [37.8, 173.0], [37.9, 173.0], [38.0, 173.0], [38.1, 174.0], [38.2, 174.0], [38.3, 174.0], [38.4, 174.0], [38.5, 174.0], [38.6, 174.0], [38.7, 175.0], [38.8, 175.0], [38.9, 175.0], [39.0, 175.0], [39.1, 178.0], [39.2, 178.0], [39.3, 178.0], [39.4, 178.0], [39.5, 178.0], [39.6, 178.0], [39.7, 179.0], [39.8, 179.0], [39.9, 179.0], [40.0, 179.0], [40.1, 179.0], [40.2, 179.0], [40.3, 179.0], [40.4, 180.0], [40.5, 180.0], [40.6, 180.0], [40.7, 180.0], [40.8, 180.0], [40.9, 180.0], [41.0, 186.0], [41.1, 186.0], [41.2, 186.0], [41.3, 186.0], [41.4, 187.0], [41.5, 187.0], [41.6, 187.0], [41.7, 191.0], [41.8, 191.0], [41.9, 191.0], [42.0, 191.0], [42.1, 196.0], [42.2, 196.0], [42.3, 196.0], [42.4, 198.0], [42.5, 198.0], [42.6, 198.0], [42.7, 202.0], [42.8, 202.0], [42.9, 202.0], [43.0, 202.0], [43.1, 208.0], [43.2, 208.0], [43.3, 208.0], [43.4, 232.0], [43.5, 232.0], [43.6, 232.0], [43.7, 232.0], [43.8, 232.0], [43.9, 232.0], [44.0, 232.0], [44.1, 234.0], [44.2, 234.0], [44.3, 234.0], [44.4, 235.0], [44.5, 235.0], [44.6, 235.0], [44.7, 243.0], [44.8, 243.0], [44.9, 243.0], [45.0, 243.0], [45.1, 247.0], [45.2, 247.0], [45.3, 247.0], [45.4, 248.0], [45.5, 248.0], [45.6, 248.0], [45.7, 248.0], [45.8, 248.0], [45.9, 248.0], [46.0, 248.0], [46.1, 251.0], [46.2, 251.0], [46.3, 251.0], [46.4, 260.0], [46.5, 260.0], [46.6, 260.0], [46.7, 261.0], [46.8, 261.0], [46.9, 261.0], [47.0, 261.0], [47.1, 261.0], [47.2, 261.0], [47.3, 261.0], [47.4, 262.0], [47.5, 262.0], [47.6, 262.0], [47.7, 267.0], [47.8, 267.0], [47.9, 267.0], [48.0, 267.0], [48.1, 301.0], [48.2, 301.0], [48.3, 301.0], [48.4, 305.0], [48.5, 305.0], [48.6, 305.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 324.0], [49.2, 324.0], [49.3, 324.0], [49.4, 324.0], [49.5, 324.0], [49.6, 324.0], [49.7, 331.0], [49.8, 331.0], [49.9, 331.0], [50.0, 331.0], [50.1, 337.0], [50.2, 337.0], [50.3, 337.0], [50.4, 339.0], [50.5, 339.0], [50.6, 339.0], [50.7, 339.0], [50.8, 339.0], [50.9, 339.0], [51.0, 339.0], [51.1, 340.0], [51.2, 340.0], [51.3, 340.0], [51.4, 346.0], [51.5, 346.0], [51.6, 346.0], [51.7, 346.0], [51.8, 346.0], [51.9, 346.0], [52.0, 346.0], [52.1, 348.0], [52.2, 348.0], [52.3, 348.0], [52.4, 349.0], [52.5, 349.0], [52.6, 349.0], [52.7, 359.0], [52.8, 359.0], [52.9, 359.0], [53.0, 359.0], [53.1, 362.0], [53.2, 362.0], [53.3, 362.0], [53.4, 363.0], [53.5, 363.0], [53.6, 363.0], [53.7, 365.0], [53.8, 365.0], [53.9, 365.0], [54.0, 365.0], [54.1, 368.0], [54.2, 368.0], [54.3, 368.0], [54.4, 368.0], [54.5, 368.0], [54.6, 368.0], [54.7, 371.0], [54.8, 371.0], [54.9, 371.0], [55.0, 371.0], [55.1, 372.0], [55.2, 372.0], [55.3, 372.0], [55.4, 372.0], [55.5, 372.0], [55.6, 372.0], [55.7, 381.0], [55.8, 381.0], [55.9, 381.0], [56.0, 381.0], [56.1, 406.0], [56.2, 406.0], [56.3, 406.0], [56.4, 418.0], [56.5, 418.0], [56.6, 418.0], [56.7, 419.0], [56.8, 419.0], [56.9, 419.0], [57.0, 419.0], [57.1, 449.0], [57.2, 449.0], [57.3, 449.0], [57.4, 450.0], [57.5, 450.0], [57.6, 450.0], [57.7, 454.0], [57.8, 454.0], [57.9, 454.0], [58.0, 454.0], [58.1, 486.0], [58.2, 486.0], [58.3, 486.0], [58.4, 564.0], [58.5, 564.0], [58.6, 564.0], [58.7, 564.0], [58.8, 564.0], [58.9, 564.0], [59.0, 564.0], [59.1, 594.0], [59.2, 594.0], [59.3, 594.0], [59.4, 596.0], [59.5, 596.0], [59.6, 596.0], [59.7, 606.0], [59.8, 606.0], [59.9, 606.0], [60.0, 606.0], [60.1, 609.0], [60.2, 609.0], [60.3, 609.0], [60.4, 610.0], [60.5, 610.0], [60.6, 610.0], [60.7, 611.0], [60.8, 611.0], [60.9, 611.0], [61.0, 611.0], [61.1, 611.0], [61.2, 611.0], [61.3, 611.0], [61.4, 649.0], [61.5, 649.0], [61.6, 649.0], [61.7, 659.0], [61.8, 659.0], [61.9, 659.0], [62.0, 659.0], [62.1, 659.0], [62.2, 659.0], [62.3, 659.0], [62.4, 688.0], [62.5, 688.0], [62.6, 688.0], [62.7, 690.0], [62.8, 690.0], [62.9, 690.0], [63.0, 690.0], [63.1, 695.0], [63.2, 695.0], [63.3, 695.0], [63.4, 730.0], [63.5, 730.0], [63.6, 730.0], [63.7, 734.0], [63.8, 734.0], [63.9, 734.0], [64.0, 734.0], [64.1, 745.0], [64.2, 745.0], [64.3, 745.0], [64.4, 746.0], [64.5, 746.0], [64.6, 746.0], [64.7, 753.0], [64.8, 753.0], [64.9, 753.0], [65.0, 753.0], [65.1, 762.0], [65.2, 762.0], [65.3, 762.0], [65.4, 784.0], [65.5, 784.0], [65.6, 784.0], [65.7, 792.0], [65.8, 792.0], [65.9, 792.0], [66.0, 792.0], [66.1, 793.0], [66.2, 793.0], [66.3, 793.0], [66.4, 801.0], [66.5, 801.0], [66.6, 801.0], [66.7, 802.0], [66.8, 802.0], [66.9, 802.0], [67.0, 802.0], [67.1, 804.0], [67.2, 804.0], [67.3, 804.0], [67.4, 806.0], [67.5, 806.0], [67.6, 806.0], [67.7, 807.0], [67.8, 807.0], [67.9, 807.0], [68.0, 807.0], [68.1, 807.0], [68.2, 807.0], [68.3, 807.0], [68.4, 813.0], [68.5, 813.0], [68.6, 813.0], [68.7, 815.0], [68.8, 815.0], [68.9, 815.0], [69.0, 815.0], [69.1, 817.0], [69.2, 817.0], [69.3, 817.0], [69.4, 817.0], [69.5, 817.0], [69.6, 817.0], [69.7, 819.0], [69.8, 819.0], [69.9, 819.0], [70.0, 819.0], [70.1, 819.0], [70.2, 819.0], [70.3, 819.0], [70.4, 819.0], [70.5, 819.0], [70.6, 819.0], [70.7, 826.0], [70.8, 826.0], [70.9, 826.0], [71.0, 826.0], [71.1, 827.0], [71.2, 827.0], [71.3, 827.0], [71.4, 833.0], [71.5, 833.0], [71.6, 833.0], [71.7, 848.0], [71.8, 848.0], [71.9, 848.0], [72.0, 848.0], [72.1, 850.0], [72.2, 850.0], [72.3, 850.0], [72.4, 851.0], [72.5, 851.0], [72.6, 851.0], [72.7, 851.0], [72.8, 851.0], [72.9, 851.0], [73.0, 851.0], [73.1, 859.0], [73.2, 859.0], [73.3, 859.0], [73.4, 872.0], [73.5, 872.0], [73.6, 872.0], [73.7, 874.0], [73.8, 874.0], [73.9, 874.0], [74.0, 876.0], [74.1, 876.0], [74.2, 876.0], [74.3, 876.0], [74.4, 884.0], [74.5, 884.0], [74.6, 884.0], [74.7, 887.0], [74.8, 887.0], [74.9, 887.0], [75.0, 893.0], [75.1, 893.0], [75.2, 893.0], [75.3, 893.0], [75.4, 900.0], [75.5, 900.0], [75.6, 900.0], [75.7, 908.0], [75.8, 908.0], [75.9, 908.0], [76.0, 909.0], [76.1, 909.0], [76.2, 909.0], [76.3, 909.0], [76.4, 917.0], [76.5, 917.0], [76.6, 917.0], [76.7, 920.0], [76.8, 920.0], [76.9, 920.0], [77.0, 929.0], [77.1, 929.0], [77.2, 929.0], [77.3, 929.0], [77.4, 932.0], [77.5, 932.0], [77.6, 932.0], [77.7, 939.0], [77.8, 939.0], [77.9, 939.0], [78.0, 942.0], [78.1, 942.0], [78.2, 942.0], [78.3, 942.0], [78.4, 943.0], [78.5, 943.0], [78.6, 943.0], [78.7, 953.0], [78.8, 953.0], [78.9, 953.0], [79.0, 970.0], [79.1, 970.0], [79.2, 970.0], [79.3, 970.0], [79.4, 974.0], [79.5, 974.0], [79.6, 974.0], [79.7, 974.0], [79.8, 974.0], [79.9, 974.0], [80.0, 976.0], [80.1, 976.0], [80.2, 976.0], [80.3, 976.0], [80.4, 977.0], [80.5, 977.0], [80.6, 977.0], [80.7, 979.0], [80.8, 979.0], [80.9, 979.0], [81.0, 981.0], [81.1, 981.0], [81.2, 981.0], [81.3, 981.0], [81.4, 999.0], [81.5, 999.0], [81.6, 999.0], [81.7, 1006.0], [81.8, 1006.0], [81.9, 1006.0], [82.0, 1018.0], [82.1, 1018.0], [82.2, 1018.0], [82.3, 1018.0], [82.4, 1020.0], [82.5, 1020.0], [82.6, 1020.0], [82.7, 1029.0], [82.8, 1029.0], [82.9, 1029.0], [83.0, 1029.0], [83.1, 1029.0], [83.2, 1029.0], [83.3, 1029.0], [83.4, 1046.0], [83.5, 1046.0], [83.6, 1046.0], [83.7, 1048.0], [83.8, 1048.0], [83.9, 1048.0], [84.0, 1051.0], [84.1, 1051.0], [84.2, 1051.0], [84.3, 1051.0], [84.4, 1053.0], [84.5, 1053.0], [84.6, 1053.0], [84.7, 1065.0], [84.8, 1065.0], [84.9, 1065.0], [85.0, 1070.0], [85.1, 1070.0], [85.2, 1070.0], [85.3, 1070.0], [85.4, 1082.0], [85.5, 1082.0], [85.6, 1082.0], [85.7, 1085.0], [85.8, 1085.0], [85.9, 1085.0], [86.0, 1089.0], [86.1, 1089.0], [86.2, 1089.0], [86.3, 1089.0], [86.4, 1094.0], [86.5, 1094.0], [86.6, 1094.0], [86.7, 1094.0], [86.8, 1094.0], [86.9, 1094.0], [87.0, 1105.0], [87.1, 1105.0], [87.2, 1105.0], [87.3, 1105.0], [87.4, 1105.0], [87.5, 1105.0], [87.6, 1105.0], [87.7, 1106.0], [87.8, 1106.0], [87.9, 1106.0], [88.0, 1120.0], [88.1, 1120.0], [88.2, 1120.0], [88.3, 1120.0], [88.4, 1121.0], [88.5, 1121.0], [88.6, 1121.0], [88.7, 1140.0], [88.8, 1140.0], [88.9, 1140.0], [89.0, 1140.0], [89.1, 1140.0], [89.2, 1140.0], [89.3, 1140.0], [89.4, 1141.0], [89.5, 1141.0], [89.6, 1141.0], [89.7, 1152.0], [89.8, 1152.0], [89.9, 1152.0], [90.0, 1163.0], [90.1, 1163.0], [90.2, 1163.0], [90.3, 1163.0], [90.4, 1167.0], [90.5, 1167.0], [90.6, 1167.0], [90.7, 1168.0], [90.8, 1168.0], [90.9, 1168.0], [91.0, 1171.0], [91.1, 1171.0], [91.2, 1171.0], [91.3, 1171.0], [91.4, 1172.0], [91.5, 1172.0], [91.6, 1172.0], [91.7, 1180.0], [91.8, 1180.0], [91.9, 1180.0], [92.0, 1181.0], [92.1, 1181.0], [92.2, 1181.0], [92.3, 1181.0], [92.4, 1182.0], [92.5, 1182.0], [92.6, 1182.0], [92.7, 1182.0], [92.8, 1182.0], [92.9, 1182.0], [93.0, 1184.0], [93.1, 1184.0], [93.2, 1184.0], [93.3, 1184.0], [93.4, 1186.0], [93.5, 1186.0], [93.6, 1186.0], [93.7, 1195.0], [93.8, 1195.0], [93.9, 1195.0], [94.0, 1196.0], [94.1, 1196.0], [94.2, 1196.0], [94.3, 1196.0], [94.4, 1218.0], [94.5, 1218.0], [94.6, 1218.0], [94.7, 1218.0], [94.8, 1218.0], [94.9, 1218.0], [95.0, 1226.0], [95.1, 1226.0], [95.2, 1226.0], [95.3, 1226.0], [95.4, 1241.0], [95.5, 1241.0], [95.6, 1241.0], [95.7, 1286.0], [95.8, 1286.0], [95.9, 1286.0], [96.0, 1300.0], [96.1, 1300.0], [96.2, 1300.0], [96.3, 1300.0], [96.4, 1317.0], [96.5, 1317.0], [96.6, 1317.0], [96.7, 1344.0], [96.8, 1344.0], [96.9, 1344.0], [97.0, 1395.0], [97.1, 1395.0], [97.2, 1395.0], [97.3, 1395.0], [97.4, 1398.0], [97.5, 1398.0], [97.6, 1398.0], [97.7, 1401.0], [97.8, 1401.0], [97.9, 1401.0], [98.0, 1418.0], [98.1, 1418.0], [98.2, 1418.0], [98.3, 1418.0], [98.4, 1421.0], [98.5, 1421.0], [98.6, 1421.0], [98.7, 1432.0], [98.8, 1432.0], [98.9, 1432.0], [99.0, 1437.0], [99.1, 1437.0], [99.2, 1437.0], [99.3, 1437.0], [99.4, 1444.0], [99.5, 1444.0], [99.6, 1444.0], [99.7, 1466.0], [99.8, 1466.0], [99.9, 1466.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 33.0], [0.1, 33.0], [0.2, 33.0], [0.3, 33.0], [0.4, 41.0], [0.5, 41.0], [0.6, 41.0], [0.7, 48.0], [0.8, 48.0], [0.9, 48.0], [1.0, 60.0], [1.1, 60.0], [1.2, 60.0], [1.3, 60.0], [1.4, 65.0], [1.5, 65.0], [1.6, 65.0], [1.7, 66.0], [1.8, 66.0], [1.9, 66.0], [2.0, 72.0], [2.1, 72.0], [2.2, 72.0], [2.3, 72.0], [2.4, 72.0], [2.5, 72.0], [2.6, 72.0], [2.7, 82.0], [2.8, 82.0], [2.9, 82.0], [3.0, 91.0], [3.1, 91.0], [3.2, 91.0], [3.3, 91.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 113.0], [3.8, 113.0], [3.9, 113.0], [4.0, 119.0], [4.1, 119.0], [4.2, 119.0], [4.3, 119.0], [4.4, 119.0], [4.5, 119.0], [4.6, 119.0], [4.7, 127.0], [4.8, 127.0], [4.9, 127.0], [5.0, 127.0], [5.1, 127.0], [5.2, 127.0], [5.3, 127.0], [5.4, 131.0], [5.5, 131.0], [5.6, 131.0], [5.7, 138.0], [5.8, 138.0], [5.9, 138.0], [6.0, 138.0], [6.1, 138.0], [6.2, 138.0], [6.3, 138.0], [6.4, 138.0], [6.5, 138.0], [6.6, 138.0], [6.7, 139.0], [6.8, 139.0], [6.9, 139.0], [7.0, 143.0], [7.1, 143.0], [7.2, 143.0], [7.3, 143.0], [7.4, 143.0], [7.5, 143.0], [7.6, 143.0], [7.7, 144.0], [7.8, 144.0], [7.9, 144.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 147.0], [8.5, 147.0], [8.6, 147.0], [8.7, 153.0], [8.8, 153.0], [8.9, 153.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 153.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 157.0], [9.8, 157.0], [9.9, 157.0], [10.0, 157.0], [10.1, 158.0], [10.2, 158.0], [10.3, 158.0], [10.4, 160.0], [10.5, 160.0], [10.6, 160.0], [10.7, 162.0], [10.8, 162.0], [10.9, 162.0], [11.0, 162.0], [11.1, 166.0], [11.2, 166.0], [11.3, 166.0], [11.4, 166.0], [11.5, 166.0], [11.6, 166.0], [11.7, 167.0], [11.8, 167.0], [11.9, 167.0], [12.0, 167.0], [12.1, 168.0], [12.2, 168.0], [12.3, 168.0], [12.4, 169.0], [12.5, 169.0], [12.6, 169.0], [12.7, 170.0], [12.8, 170.0], [12.9, 170.0], [13.0, 170.0], [13.1, 172.0], [13.2, 172.0], [13.3, 172.0], [13.4, 172.0], [13.5, 172.0], [13.6, 172.0], [13.7, 172.0], [13.8, 172.0], [13.9, 172.0], [14.0, 172.0], [14.1, 177.0], [14.2, 177.0], [14.3, 177.0], [14.4, 177.0], [14.5, 177.0], [14.6, 177.0], [14.7, 179.0], [14.8, 179.0], [14.9, 179.0], [15.0, 179.0], [15.1, 179.0], [15.2, 179.0], [15.3, 179.0], [15.4, 179.0], [15.5, 179.0], [15.6, 179.0], [15.7, 180.0], [15.8, 180.0], [15.9, 180.0], [16.0, 180.0], [16.1, 182.0], [16.2, 182.0], [16.3, 182.0], [16.4, 183.0], [16.5, 183.0], [16.6, 183.0], [16.7, 183.0], [16.8, 183.0], [16.9, 183.0], [17.0, 183.0], [17.1, 184.0], [17.2, 184.0], [17.3, 184.0], [17.4, 185.0], [17.5, 185.0], [17.6, 185.0], [17.7, 186.0], [17.8, 186.0], [17.9, 186.0], [18.0, 187.0], [18.1, 187.0], [18.2, 187.0], [18.3, 187.0], [18.4, 187.0], [18.5, 187.0], [18.6, 187.0], [18.7, 188.0], [18.8, 188.0], [18.9, 188.0], [19.0, 189.0], [19.1, 189.0], [19.2, 189.0], [19.3, 189.0], [19.4, 189.0], [19.5, 189.0], [19.6, 189.0], [19.7, 190.0], [19.8, 190.0], [19.9, 190.0], [20.0, 192.0], [20.1, 192.0], [20.2, 192.0], [20.3, 192.0], [20.4, 193.0], [20.5, 193.0], [20.6, 193.0], [20.7, 195.0], [20.8, 195.0], [20.9, 195.0], [21.0, 196.0], [21.1, 196.0], [21.2, 196.0], [21.3, 196.0], [21.4, 198.0], [21.5, 198.0], [21.6, 198.0], [21.7, 198.0], [21.8, 198.0], [21.9, 198.0], [22.0, 198.0], [22.1, 198.0], [22.2, 198.0], [22.3, 198.0], [22.4, 198.0], [22.5, 198.0], [22.6, 198.0], [22.7, 199.0], [22.8, 199.0], [22.9, 199.0], [23.0, 200.0], [23.1, 200.0], [23.2, 200.0], [23.3, 200.0], [23.4, 201.0], [23.5, 201.0], [23.6, 201.0], [23.7, 201.0], [23.8, 201.0], [23.9, 201.0], [24.0, 202.0], [24.1, 202.0], [24.2, 202.0], [24.3, 202.0], [24.4, 204.0], [24.5, 204.0], [24.6, 204.0], [24.7, 205.0], [24.8, 205.0], [24.9, 205.0], [25.0, 205.0], [25.1, 205.0], [25.2, 205.0], [25.3, 205.0], [25.4, 207.0], [25.5, 207.0], [25.6, 207.0], [25.7, 207.0], [25.8, 207.0], [25.9, 207.0], [26.0, 207.0], [26.1, 207.0], [26.2, 207.0], [26.3, 207.0], [26.4, 209.0], [26.5, 209.0], [26.6, 209.0], [26.7, 209.0], [26.8, 209.0], [26.9, 209.0], [27.0, 210.0], [27.1, 210.0], [27.2, 210.0], [27.3, 210.0], [27.4, 212.0], [27.5, 212.0], [27.6, 212.0], [27.7, 213.0], [27.8, 213.0], [27.9, 213.0], [28.0, 215.0], [28.1, 215.0], [28.2, 215.0], [28.3, 215.0], [28.4, 216.0], [28.5, 216.0], [28.6, 216.0], [28.7, 216.0], [28.8, 216.0], [28.9, 216.0], [29.0, 216.0], [29.1, 216.0], [29.2, 216.0], [29.3, 216.0], [29.4, 219.0], [29.5, 219.0], [29.6, 219.0], [29.7, 220.0], [29.8, 220.0], [29.9, 220.0], [30.0, 223.0], [30.1, 223.0], [30.2, 223.0], [30.3, 223.0], [30.4, 223.0], [30.5, 223.0], [30.6, 223.0], [30.7, 224.0], [30.8, 224.0], [30.9, 224.0], [31.0, 225.0], [31.1, 225.0], [31.2, 225.0], [31.3, 225.0], [31.4, 226.0], [31.5, 226.0], [31.6, 226.0], [31.7, 226.0], [31.8, 226.0], [31.9, 226.0], [32.0, 227.0], [32.1, 227.0], [32.2, 227.0], [32.3, 227.0], [32.4, 227.0], [32.5, 227.0], [32.6, 227.0], [32.7, 228.0], [32.8, 228.0], [32.9, 228.0], [33.0, 229.0], [33.1, 229.0], [33.2, 229.0], [33.3, 229.0], [33.4, 234.0], [33.5, 234.0], [33.6, 234.0], [33.7, 234.0], [33.8, 234.0], [33.9, 234.0], [34.0, 236.0], [34.1, 236.0], [34.2, 236.0], [34.3, 236.0], [34.4, 240.0], [34.5, 240.0], [34.6, 240.0], [34.7, 240.0], [34.8, 240.0], [34.9, 240.0], [35.0, 244.0], [35.1, 244.0], [35.2, 244.0], [35.3, 244.0], [35.4, 245.0], [35.5, 245.0], [35.6, 245.0], [35.7, 253.0], [35.8, 253.0], [35.9, 253.0], [36.0, 263.0], [36.1, 263.0], [36.2, 263.0], [36.3, 263.0], [36.4, 271.0], [36.5, 271.0], [36.6, 271.0], [36.7, 273.0], [36.8, 273.0], [36.9, 273.0], [37.0, 275.0], [37.1, 275.0], [37.2, 275.0], [37.3, 275.0], [37.4, 278.0], [37.5, 278.0], [37.6, 278.0], [37.7, 288.0], [37.8, 288.0], [37.9, 288.0], [38.0, 288.0], [38.1, 303.0], [38.2, 303.0], [38.3, 303.0], [38.4, 341.0], [38.5, 341.0], [38.6, 341.0], [38.7, 356.0], [38.8, 356.0], [38.9, 356.0], [39.0, 356.0], [39.1, 383.0], [39.2, 383.0], [39.3, 383.0], [39.4, 388.0], [39.5, 388.0], [39.6, 388.0], [39.7, 407.0], [39.8, 407.0], [39.9, 407.0], [40.0, 407.0], [40.1, 414.0], [40.2, 414.0], [40.3, 414.0], [40.4, 416.0], [40.5, 416.0], [40.6, 416.0], [40.7, 425.0], [40.8, 425.0], [40.9, 425.0], [41.0, 425.0], [41.1, 438.0], [41.2, 438.0], [41.3, 438.0], [41.4, 442.0], [41.5, 442.0], [41.6, 442.0], [41.7, 450.0], [41.8, 450.0], [41.9, 450.0], [42.0, 450.0], [42.1, 459.0], [42.2, 459.0], [42.3, 459.0], [42.4, 463.0], [42.5, 463.0], [42.6, 463.0], [42.7, 478.0], [42.8, 478.0], [42.9, 478.0], [43.0, 478.0], [43.1, 504.0], [43.2, 504.0], [43.3, 504.0], [43.4, 535.0], [43.5, 535.0], [43.6, 535.0], [43.7, 552.0], [43.8, 552.0], [43.9, 552.0], [44.0, 552.0], [44.1, 571.0], [44.2, 571.0], [44.3, 571.0], [44.4, 639.0], [44.5, 639.0], [44.6, 639.0], [44.7, 642.0], [44.8, 642.0], [44.9, 642.0], [45.0, 642.0], [45.1, 687.0], [45.2, 687.0], [45.3, 687.0], [45.4, 689.0], [45.5, 689.0], [45.6, 689.0], [45.7, 692.0], [45.8, 692.0], [45.9, 692.0], [46.0, 692.0], [46.1, 712.0], [46.2, 712.0], [46.3, 712.0], [46.4, 733.0], [46.5, 733.0], [46.6, 733.0], [46.7, 753.0], [46.8, 753.0], [46.9, 753.0], [47.0, 753.0], [47.1, 766.0], [47.2, 766.0], [47.3, 766.0], [47.4, 779.0], [47.5, 779.0], [47.6, 779.0], [47.7, 905.0], [47.8, 905.0], [47.9, 905.0], [48.0, 905.0], [48.1, 955.0], [48.2, 955.0], [48.3, 955.0], [48.4, 961.0], [48.5, 961.0], [48.6, 961.0], [48.7, 988.0], [48.8, 988.0], [48.9, 988.0], [49.0, 988.0], [49.1, 990.0], [49.2, 990.0], [49.3, 990.0], [49.4, 997.0], [49.5, 997.0], [49.6, 997.0], [49.7, 1027.0], [49.8, 1027.0], [49.9, 1027.0], [50.0, 1027.0], [50.1, 1042.0], [50.2, 1042.0], [50.3, 1042.0], [50.4, 1053.0], [50.5, 1053.0], [50.6, 1053.0], [50.7, 1059.0], [50.8, 1059.0], [50.9, 1059.0], [51.0, 1059.0], [51.1, 1081.0], [51.2, 1081.0], [51.3, 1081.0], [51.4, 1106.0], [51.5, 1106.0], [51.6, 1106.0], [51.7, 1115.0], [51.8, 1115.0], [51.9, 1115.0], [52.0, 1115.0], [52.1, 1161.0], [52.2, 1161.0], [52.3, 1161.0], [52.4, 1167.0], [52.5, 1167.0], [52.6, 1167.0], [52.7, 1170.0], [52.8, 1170.0], [52.9, 1170.0], [53.0, 1170.0], [53.1, 1175.0], [53.2, 1175.0], [53.3, 1175.0], [53.4, 1187.0], [53.5, 1187.0], [53.6, 1187.0], [53.7, 1197.0], [53.8, 1197.0], [53.9, 1197.0], [54.0, 1197.0], [54.1, 1203.0], [54.2, 1203.0], [54.3, 1203.0], [54.4, 1204.0], [54.5, 1204.0], [54.6, 1204.0], [54.7, 1205.0], [54.8, 1205.0], [54.9, 1205.0], [55.0, 1205.0], [55.1, 1244.0], [55.2, 1244.0], [55.3, 1244.0], [55.4, 1248.0], [55.5, 1248.0], [55.6, 1248.0], [55.7, 1249.0], [55.8, 1249.0], [55.9, 1249.0], [56.0, 1249.0], [56.1, 1252.0], [56.2, 1252.0], [56.3, 1252.0], [56.4, 1266.0], [56.5, 1266.0], [56.6, 1266.0], [56.7, 1274.0], [56.8, 1274.0], [56.9, 1274.0], [57.0, 1274.0], [57.1, 1278.0], [57.2, 1278.0], [57.3, 1278.0], [57.4, 1306.0], [57.5, 1306.0], [57.6, 1306.0], [57.7, 1313.0], [57.8, 1313.0], [57.9, 1313.0], [58.0, 1313.0], [58.1, 1323.0], [58.2, 1323.0], [58.3, 1323.0], [58.4, 1324.0], [58.5, 1324.0], [58.6, 1324.0], [58.7, 1330.0], [58.8, 1330.0], [58.9, 1330.0], [59.0, 1330.0], [59.1, 1334.0], [59.2, 1334.0], [59.3, 1334.0], [59.4, 1339.0], [59.5, 1339.0], [59.6, 1339.0], [59.7, 1352.0], [59.8, 1352.0], [59.9, 1352.0], [60.0, 1352.0], [60.1, 1357.0], [60.2, 1357.0], [60.3, 1357.0], [60.4, 1364.0], [60.5, 1364.0], [60.6, 1364.0], [60.7, 1375.0], [60.8, 1375.0], [60.9, 1375.0], [61.0, 1375.0], [61.1, 1378.0], [61.2, 1378.0], [61.3, 1378.0], [61.4, 1388.0], [61.5, 1388.0], [61.6, 1388.0], [61.7, 1390.0], [61.8, 1390.0], [61.9, 1390.0], [62.0, 1390.0], [62.1, 1394.0], [62.2, 1394.0], [62.3, 1394.0], [62.4, 1402.0], [62.5, 1402.0], [62.6, 1402.0], [62.7, 1403.0], [62.8, 1403.0], [62.9, 1403.0], [63.0, 1403.0], [63.1, 1404.0], [63.2, 1404.0], [63.3, 1404.0], [63.4, 1411.0], [63.5, 1411.0], [63.6, 1411.0], [63.7, 1411.0], [63.8, 1411.0], [63.9, 1411.0], [64.0, 1411.0], [64.1, 1412.0], [64.2, 1412.0], [64.3, 1412.0], [64.4, 1413.0], [64.5, 1413.0], [64.6, 1413.0], [64.7, 1418.0], [64.8, 1418.0], [64.9, 1418.0], [65.0, 1418.0], [65.1, 1428.0], [65.2, 1428.0], [65.3, 1428.0], [65.4, 1436.0], [65.5, 1436.0], [65.6, 1436.0], [65.7, 1438.0], [65.8, 1438.0], [65.9, 1438.0], [66.0, 1438.0], [66.1, 1438.0], [66.2, 1438.0], [66.3, 1438.0], [66.4, 1449.0], [66.5, 1449.0], [66.6, 1449.0], [66.7, 1463.0], [66.8, 1463.0], [66.9, 1463.0], [67.0, 1463.0], [67.1, 1475.0], [67.2, 1475.0], [67.3, 1475.0], [67.4, 1475.0], [67.5, 1475.0], [67.6, 1475.0], [67.7, 1481.0], [67.8, 1481.0], [67.9, 1481.0], [68.0, 1481.0], [68.1, 1528.0], [68.2, 1528.0], [68.3, 1528.0], [68.4, 1528.0], [68.5, 1528.0], [68.6, 1528.0], [68.7, 1529.0], [68.8, 1529.0], [68.9, 1529.0], [69.0, 1529.0], [69.1, 1534.0], [69.2, 1534.0], [69.3, 1534.0], [69.4, 1538.0], [69.5, 1538.0], [69.6, 1538.0], [69.7, 1543.0], [69.8, 1543.0], [69.9, 1543.0], [70.0, 1543.0], [70.1, 1556.0], [70.2, 1556.0], [70.3, 1556.0], [70.4, 1560.0], [70.5, 1560.0], [70.6, 1560.0], [70.7, 1560.0], [70.8, 1560.0], [70.9, 1560.0], [71.0, 1560.0], [71.1, 1562.0], [71.2, 1562.0], [71.3, 1562.0], [71.4, 1563.0], [71.5, 1563.0], [71.6, 1563.0], [71.7, 1564.0], [71.8, 1564.0], [71.9, 1564.0], [72.0, 1564.0], [72.1, 1567.0], [72.2, 1567.0], [72.3, 1567.0], [72.4, 1567.0], [72.5, 1567.0], [72.6, 1567.0], [72.7, 1575.0], [72.8, 1575.0], [72.9, 1575.0], [73.0, 1575.0], [73.1, 1580.0], [73.2, 1580.0], [73.3, 1580.0], [73.4, 1582.0], [73.5, 1582.0], [73.6, 1582.0], [73.7, 1583.0], [73.8, 1583.0], [73.9, 1583.0], [74.0, 1583.0], [74.1, 1583.0], [74.2, 1583.0], [74.3, 1583.0], [74.4, 1591.0], [74.5, 1591.0], [74.6, 1591.0], [74.7, 1592.0], [74.8, 1592.0], [74.9, 1592.0], [75.0, 1592.0], [75.1, 1593.0], [75.2, 1593.0], [75.3, 1593.0], [75.4, 1600.0], [75.5, 1600.0], [75.6, 1600.0], [75.7, 1601.0], [75.8, 1601.0], [75.9, 1601.0], [76.0, 1601.0], [76.1, 1603.0], [76.2, 1603.0], [76.3, 1603.0], [76.4, 1605.0], [76.5, 1605.0], [76.6, 1605.0], [76.7, 1608.0], [76.8, 1608.0], [76.9, 1608.0], [77.0, 1608.0], [77.1, 1618.0], [77.2, 1618.0], [77.3, 1618.0], [77.4, 1630.0], [77.5, 1630.0], [77.6, 1630.0], [77.7, 1637.0], [77.8, 1637.0], [77.9, 1637.0], [78.0, 1637.0], [78.1, 1638.0], [78.2, 1638.0], [78.3, 1638.0], [78.4, 1640.0], [78.5, 1640.0], [78.6, 1640.0], [78.7, 1641.0], [78.8, 1641.0], [78.9, 1641.0], [79.0, 1641.0], [79.1, 1641.0], [79.2, 1641.0], [79.3, 1641.0], [79.4, 1645.0], [79.5, 1645.0], [79.6, 1645.0], [79.7, 1651.0], [79.8, 1651.0], [79.9, 1651.0], [80.0, 1651.0], [80.1, 1652.0], [80.2, 1652.0], [80.3, 1652.0], [80.4, 1653.0], [80.5, 1653.0], [80.6, 1653.0], [80.7, 1654.0], [80.8, 1654.0], [80.9, 1654.0], [81.0, 1654.0], [81.1, 1654.0], [81.2, 1654.0], [81.3, 1654.0], [81.4, 1654.0], [81.5, 1654.0], [81.6, 1654.0], [81.7, 1658.0], [81.8, 1658.0], [81.9, 1658.0], [82.0, 1658.0], [82.1, 1661.0], [82.2, 1661.0], [82.3, 1661.0], [82.4, 1669.0], [82.5, 1669.0], [82.6, 1669.0], [82.7, 1671.0], [82.8, 1671.0], [82.9, 1671.0], [83.0, 1671.0], [83.1, 1673.0], [83.2, 1673.0], [83.3, 1673.0], [83.4, 1674.0], [83.5, 1674.0], [83.6, 1674.0], [83.7, 1674.0], [83.8, 1674.0], [83.9, 1674.0], [84.0, 1674.0], [84.1, 1678.0], [84.2, 1678.0], [84.3, 1678.0], [84.4, 1680.0], [84.5, 1680.0], [84.6, 1680.0], [84.7, 1680.0], [84.8, 1680.0], [84.9, 1680.0], [85.0, 1680.0], [85.1, 1681.0], [85.2, 1681.0], [85.3, 1681.0], [85.4, 1686.0], [85.5, 1686.0], [85.6, 1686.0], [85.7, 1686.0], [85.8, 1686.0], [85.9, 1686.0], [86.0, 1686.0], [86.1, 1693.0], [86.2, 1693.0], [86.3, 1693.0], [86.4, 1695.0], [86.5, 1695.0], [86.6, 1695.0], [86.7, 1698.0], [86.8, 1698.0], [86.9, 1698.0], [87.0, 1698.0], [87.1, 1698.0], [87.2, 1698.0], [87.3, 1698.0], [87.4, 1701.0], [87.5, 1701.0], [87.6, 1701.0], [87.7, 1705.0], [87.8, 1705.0], [87.9, 1705.0], [88.0, 1705.0], [88.1, 1708.0], [88.2, 1708.0], [88.3, 1708.0], [88.4, 1708.0], [88.5, 1708.0], [88.6, 1708.0], [88.7, 1711.0], [88.8, 1711.0], [88.9, 1711.0], [89.0, 1711.0], [89.1, 1714.0], [89.2, 1714.0], [89.3, 1714.0], [89.4, 1717.0], [89.5, 1717.0], [89.6, 1717.0], [89.7, 1719.0], [89.8, 1719.0], [89.9, 1719.0], [90.0, 1721.0], [90.1, 1721.0], [90.2, 1721.0], [90.3, 1721.0], [90.4, 1722.0], [90.5, 1722.0], [90.6, 1722.0], [90.7, 1724.0], [90.8, 1724.0], [90.9, 1724.0], [91.0, 1728.0], [91.1, 1728.0], [91.2, 1728.0], [91.3, 1728.0], [91.4, 1731.0], [91.5, 1731.0], [91.6, 1731.0], [91.7, 1732.0], [91.8, 1732.0], [91.9, 1732.0], [92.0, 1737.0], [92.1, 1737.0], [92.2, 1737.0], [92.3, 1737.0], [92.4, 1742.0], [92.5, 1742.0], [92.6, 1742.0], [92.7, 1743.0], [92.8, 1743.0], [92.9, 1743.0], [93.0, 1746.0], [93.1, 1746.0], [93.2, 1746.0], [93.3, 1746.0], [93.4, 1753.0], [93.5, 1753.0], [93.6, 1753.0], [93.7, 1754.0], [93.8, 1754.0], [93.9, 1754.0], [94.0, 1758.0], [94.1, 1758.0], [94.2, 1758.0], [94.3, 1758.0], [94.4, 1763.0], [94.5, 1763.0], [94.6, 1763.0], [94.7, 1766.0], [94.8, 1766.0], [94.9, 1766.0], [95.0, 1771.0], [95.1, 1771.0], [95.2, 1771.0], [95.3, 1771.0], [95.4, 1772.0], [95.5, 1772.0], [95.6, 1772.0], [95.7, 1789.0], [95.8, 1789.0], [95.9, 1789.0], [96.0, 1796.0], [96.1, 1796.0], [96.2, 1796.0], [96.3, 1796.0], [96.4, 1860.0], [96.5, 1860.0], [96.6, 1860.0], [96.7, 1879.0], [96.8, 1879.0], [96.9, 1879.0], [97.0, 1894.0], [97.1, 1894.0], [97.2, 1894.0], [97.3, 1894.0], [97.4, 1903.0], [97.5, 1903.0], [97.6, 1903.0], [97.7, 1904.0], [97.8, 1904.0], [97.9, 1904.0], [98.0, 1907.0], [98.1, 1907.0], [98.2, 1907.0], [98.3, 1907.0], [98.4, 1925.0], [98.5, 1925.0], [98.6, 1925.0], [98.7, 1938.0], [98.8, 1938.0], [98.9, 1938.0], [99.0, 1941.0], [99.1, 1941.0], [99.2, 1941.0], [99.3, 1941.0], [99.4, 1954.0], [99.5, 1954.0], [99.6, 1954.0], [99.7, 1966.0], [99.8, 1966.0], [99.9, 1966.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 39.0], [0.1, 39.0], [0.2, 39.0], [0.3, 39.0], [0.4, 87.0], [0.5, 87.0], [0.6, 87.0], [0.7, 95.0], [0.8, 95.0], [0.9, 95.0], [1.0, 97.0], [1.1, 97.0], [1.2, 97.0], [1.3, 97.0], [1.4, 99.0], [1.5, 99.0], [1.6, 99.0], [1.7, 100.0], [1.8, 100.0], [1.9, 100.0], [2.0, 100.0], [2.1, 100.0], [2.2, 100.0], [2.3, 100.0], [2.4, 101.0], [2.5, 101.0], [2.6, 101.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 107.0], [3.1, 107.0], [3.2, 107.0], [3.3, 107.0], [3.4, 108.0], [3.5, 108.0], [3.6, 108.0], [3.7, 109.0], [3.8, 109.0], [3.9, 109.0], [4.0, 110.0], [4.1, 110.0], [4.2, 110.0], [4.3, 110.0], [4.4, 111.0], [4.5, 111.0], [4.6, 111.0], [4.7, 112.0], [4.8, 112.0], [4.9, 112.0], [5.0, 112.0], [5.1, 112.0], [5.2, 112.0], [5.3, 112.0], [5.4, 120.0], [5.5, 120.0], [5.6, 120.0], [5.7, 124.0], [5.8, 124.0], [5.9, 124.0], [6.0, 125.0], [6.1, 125.0], [6.2, 125.0], [6.3, 125.0], [6.4, 126.0], [6.5, 126.0], [6.6, 126.0], [6.7, 128.0], [6.8, 128.0], [6.9, 128.0], [7.0, 128.0], [7.1, 128.0], [7.2, 128.0], [7.3, 128.0], [7.4, 128.0], [7.5, 128.0], [7.6, 128.0], [7.7, 129.0], [7.8, 129.0], [7.9, 129.0], [8.0, 131.0], [8.1, 131.0], [8.2, 131.0], [8.3, 131.0], [8.4, 133.0], [8.5, 133.0], [8.6, 133.0], [8.7, 133.0], [8.8, 133.0], [8.9, 133.0], [9.0, 133.0], [9.1, 133.0], [9.2, 133.0], [9.3, 133.0], [9.4, 134.0], [9.5, 134.0], [9.6, 134.0], [9.7, 134.0], [9.8, 134.0], [9.9, 134.0], [10.0, 135.0], [10.1, 135.0], [10.2, 135.0], [10.3, 135.0], [10.4, 136.0], [10.5, 136.0], [10.6, 136.0], [10.7, 136.0], [10.8, 136.0], [10.9, 136.0], [11.0, 136.0], [11.1, 136.0], [11.2, 136.0], [11.3, 136.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 139.0], [11.8, 139.0], [11.9, 139.0], [12.0, 139.0], [12.1, 139.0], [12.2, 139.0], [12.3, 139.0], [12.4, 139.0], [12.5, 139.0], [12.6, 139.0], [12.7, 141.0], [12.8, 141.0], [12.9, 141.0], [13.0, 142.0], [13.1, 142.0], [13.2, 142.0], [13.3, 142.0], [13.4, 142.0], [13.5, 142.0], [13.6, 142.0], [13.7, 142.0], [13.8, 142.0], [13.9, 142.0], [14.0, 144.0], [14.1, 144.0], [14.2, 144.0], [14.3, 144.0], [14.4, 144.0], [14.5, 144.0], [14.6, 144.0], [14.7, 144.0], [14.8, 144.0], [14.9, 144.0], [15.0, 146.0], [15.1, 146.0], [15.2, 146.0], [15.3, 146.0], [15.4, 146.0], [15.5, 146.0], [15.6, 146.0], [15.7, 146.0], [15.8, 146.0], [15.9, 146.0], [16.0, 148.0], [16.1, 148.0], [16.2, 148.0], [16.3, 148.0], [16.4, 148.0], [16.5, 148.0], [16.6, 148.0], [16.7, 149.0], [16.8, 149.0], [16.9, 149.0], [17.0, 149.0], [17.1, 149.0], [17.2, 149.0], [17.3, 149.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 151.0], [18.2, 151.0], [18.3, 151.0], [18.4, 151.0], [18.5, 151.0], [18.6, 151.0], [18.7, 151.0], [18.8, 151.0], [18.9, 151.0], [19.0, 151.0], [19.1, 153.0], [19.2, 153.0], [19.3, 153.0], [19.4, 153.0], [19.5, 153.0], [19.6, 153.0], [19.7, 155.0], [19.8, 155.0], [19.9, 155.0], [20.0, 155.0], [20.1, 156.0], [20.2, 156.0], [20.3, 156.0], [20.4, 156.0], [20.5, 156.0], [20.6, 156.0], [20.7, 158.0], [20.8, 158.0], [20.9, 158.0], [21.0, 158.0], [21.1, 159.0], [21.2, 159.0], [21.3, 159.0], [21.4, 159.0], [21.5, 159.0], [21.6, 159.0], [21.7, 160.0], [21.8, 160.0], [21.9, 160.0], [22.0, 160.0], [22.1, 160.0], [22.2, 160.0], [22.3, 160.0], [22.4, 160.0], [22.5, 160.0], [22.6, 160.0], [22.7, 161.0], [22.8, 161.0], [22.9, 161.0], [23.0, 161.0], [23.1, 161.0], [23.2, 161.0], [23.3, 161.0], [23.4, 161.0], [23.5, 161.0], [23.6, 161.0], [23.7, 163.0], [23.8, 163.0], [23.9, 163.0], [24.0, 163.0], [24.1, 164.0], [24.2, 164.0], [24.3, 164.0], [24.4, 165.0], [24.5, 165.0], [24.6, 165.0], [24.7, 165.0], [24.8, 165.0], [24.9, 165.0], [25.0, 165.0], [25.1, 165.0], [25.2, 165.0], [25.3, 165.0], [25.4, 166.0], [25.5, 166.0], [25.6, 166.0], [25.7, 167.0], [25.8, 167.0], [25.9, 167.0], [26.0, 167.0], [26.1, 167.0], [26.2, 167.0], [26.3, 167.0], [26.4, 167.0], [26.5, 167.0], [26.6, 167.0], [26.7, 167.0], [26.8, 167.0], [26.9, 167.0], [27.0, 168.0], [27.1, 168.0], [27.2, 168.0], [27.3, 168.0], [27.4, 169.0], [27.5, 169.0], [27.6, 169.0], [27.7, 169.0], [27.8, 169.0], [27.9, 169.0], [28.0, 169.0], [28.1, 169.0], [28.2, 169.0], [28.3, 169.0], [28.4, 171.0], [28.5, 171.0], [28.6, 171.0], [28.7, 172.0], [28.8, 172.0], [28.9, 172.0], [29.0, 174.0], [29.1, 174.0], [29.2, 174.0], [29.3, 174.0], [29.4, 175.0], [29.5, 175.0], [29.6, 175.0], [29.7, 175.0], [29.8, 175.0], [29.9, 175.0], [30.0, 176.0], [30.1, 176.0], [30.2, 176.0], [30.3, 176.0], [30.4, 178.0], [30.5, 178.0], [30.6, 178.0], [30.7, 180.0], [30.8, 180.0], [30.9, 180.0], [31.0, 180.0], [31.1, 180.0], [31.2, 180.0], [31.3, 180.0], [31.4, 181.0], [31.5, 181.0], [31.6, 181.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 184.0], [32.1, 184.0], [32.2, 184.0], [32.3, 184.0], [32.4, 184.0], [32.5, 184.0], [32.6, 184.0], [32.7, 185.0], [32.8, 185.0], [32.9, 185.0], [33.0, 185.0], [33.1, 185.0], [33.2, 185.0], [33.3, 185.0], [33.4, 186.0], [33.5, 186.0], [33.6, 186.0], [33.7, 186.0], [33.8, 186.0], [33.9, 186.0], [34.0, 186.0], [34.1, 186.0], [34.2, 186.0], [34.3, 186.0], [34.4, 186.0], [34.5, 186.0], [34.6, 186.0], [34.7, 188.0], [34.8, 188.0], [34.9, 188.0], [35.0, 189.0], [35.1, 189.0], [35.2, 189.0], [35.3, 189.0], [35.4, 193.0], [35.5, 193.0], [35.6, 193.0], [35.7, 195.0], [35.8, 195.0], [35.9, 195.0], [36.0, 198.0], [36.1, 198.0], [36.2, 198.0], [36.3, 198.0], [36.4, 198.0], [36.5, 198.0], [36.6, 198.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 208.0], [37.1, 208.0], [37.2, 208.0], [37.3, 208.0], [37.4, 213.0], [37.5, 213.0], [37.6, 213.0], [37.7, 218.0], [37.8, 218.0], [37.9, 218.0], [38.0, 218.0], [38.1, 229.0], [38.2, 229.0], [38.3, 229.0], [38.4, 238.0], [38.5, 238.0], [38.6, 238.0], [38.7, 241.0], [38.8, 241.0], [38.9, 241.0], [39.0, 241.0], [39.1, 244.0], [39.2, 244.0], [39.3, 244.0], [39.4, 245.0], [39.5, 245.0], [39.6, 245.0], [39.7, 246.0], [39.8, 246.0], [39.9, 246.0], [40.0, 246.0], [40.1, 247.0], [40.2, 247.0], [40.3, 247.0], [40.4, 251.0], [40.5, 251.0], [40.6, 251.0], [40.7, 251.0], [40.8, 251.0], [40.9, 251.0], [41.0, 251.0], [41.1, 253.0], [41.2, 253.0], [41.3, 253.0], [41.4, 253.0], [41.5, 253.0], [41.6, 253.0], [41.7, 262.0], [41.8, 262.0], [41.9, 262.0], [42.0, 262.0], [42.1, 262.0], [42.2, 262.0], [42.3, 262.0], [42.4, 263.0], [42.5, 263.0], [42.6, 263.0], [42.7, 269.0], [42.8, 269.0], [42.9, 269.0], [43.0, 269.0], [43.1, 270.0], [43.2, 270.0], [43.3, 270.0], [43.4, 273.0], [43.5, 273.0], [43.6, 273.0], [43.7, 281.0], [43.8, 281.0], [43.9, 281.0], [44.0, 281.0], [44.1, 284.0], [44.2, 284.0], [44.3, 284.0], [44.4, 285.0], [44.5, 285.0], [44.6, 285.0], [44.7, 285.0], [44.8, 285.0], [44.9, 285.0], [45.0, 285.0], [45.1, 288.0], [45.2, 288.0], [45.3, 288.0], [45.4, 291.0], [45.5, 291.0], [45.6, 291.0], [45.7, 294.0], [45.8, 294.0], [45.9, 294.0], [46.0, 294.0], [46.1, 300.0], [46.2, 300.0], [46.3, 300.0], [46.4, 304.0], [46.5, 304.0], [46.6, 304.0], [46.7, 306.0], [46.8, 306.0], [46.9, 306.0], [47.0, 306.0], [47.1, 308.0], [47.2, 308.0], [47.3, 308.0], [47.4, 309.0], [47.5, 309.0], [47.6, 309.0], [47.7, 310.0], [47.8, 310.0], [47.9, 310.0], [48.0, 310.0], [48.1, 310.0], [48.2, 310.0], [48.3, 310.0], [48.4, 312.0], [48.5, 312.0], [48.6, 312.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 316.0], [49.2, 316.0], [49.3, 316.0], [49.4, 317.0], [49.5, 317.0], [49.6, 317.0], [49.7, 322.0], [49.8, 322.0], [49.9, 322.0], [50.0, 322.0], [50.1, 322.0], [50.2, 322.0], [50.3, 322.0], [50.4, 325.0], [50.5, 325.0], [50.6, 325.0], [50.7, 326.0], [50.8, 326.0], [50.9, 326.0], [51.0, 326.0], [51.1, 327.0], [51.2, 327.0], [51.3, 327.0], [51.4, 328.0], [51.5, 328.0], [51.6, 328.0], [51.7, 329.0], [51.8, 329.0], [51.9, 329.0], [52.0, 329.0], [52.1, 329.0], [52.2, 329.0], [52.3, 329.0], [52.4, 330.0], [52.5, 330.0], [52.6, 330.0], [52.7, 330.0], [52.8, 330.0], [52.9, 330.0], [53.0, 330.0], [53.1, 334.0], [53.2, 334.0], [53.3, 334.0], [53.4, 336.0], [53.5, 336.0], [53.6, 336.0], [53.7, 336.0], [53.8, 336.0], [53.9, 336.0], [54.0, 336.0], [54.1, 340.0], [54.2, 340.0], [54.3, 340.0], [54.4, 341.0], [54.5, 341.0], [54.6, 341.0], [54.7, 341.0], [54.8, 341.0], [54.9, 341.0], [55.0, 341.0], [55.1, 342.0], [55.2, 342.0], [55.3, 342.0], [55.4, 342.0], [55.5, 342.0], [55.6, 342.0], [55.7, 344.0], [55.8, 344.0], [55.9, 344.0], [56.0, 344.0], [56.1, 344.0], [56.2, 344.0], [56.3, 344.0], [56.4, 345.0], [56.5, 345.0], [56.6, 345.0], [56.7, 345.0], [56.8, 345.0], [56.9, 345.0], [57.0, 345.0], [57.1, 346.0], [57.2, 346.0], [57.3, 346.0], [57.4, 348.0], [57.5, 348.0], [57.6, 348.0], [57.7, 351.0], [57.8, 351.0], [57.9, 351.0], [58.0, 351.0], [58.1, 351.0], [58.2, 351.0], [58.3, 351.0], [58.4, 353.0], [58.5, 353.0], [58.6, 353.0], [58.7, 354.0], [58.8, 354.0], [58.9, 354.0], [59.0, 354.0], [59.1, 354.0], [59.2, 354.0], [59.3, 354.0], [59.4, 354.0], [59.5, 354.0], [59.6, 354.0], [59.7, 355.0], [59.8, 355.0], [59.9, 355.0], [60.0, 355.0], [60.1, 356.0], [60.2, 356.0], [60.3, 356.0], [60.4, 357.0], [60.5, 357.0], [60.6, 357.0], [60.7, 357.0], [60.8, 357.0], [60.9, 357.0], [61.0, 357.0], [61.1, 357.0], [61.2, 357.0], [61.3, 357.0], [61.4, 358.0], [61.5, 358.0], [61.6, 358.0], [61.7, 359.0], [61.8, 359.0], [61.9, 359.0], [62.0, 359.0], [62.1, 361.0], [62.2, 361.0], [62.3, 361.0], [62.4, 364.0], [62.5, 364.0], [62.6, 364.0], [62.7, 365.0], [62.8, 365.0], [62.9, 365.0], [63.0, 365.0], [63.1, 365.0], [63.2, 365.0], [63.3, 365.0], [63.4, 366.0], [63.5, 366.0], [63.6, 366.0], [63.7, 368.0], [63.8, 368.0], [63.9, 368.0], [64.0, 368.0], [64.1, 368.0], [64.2, 368.0], [64.3, 368.0], [64.4, 371.0], [64.5, 371.0], [64.6, 371.0], [64.7, 374.0], [64.8, 374.0], [64.9, 374.0], [65.0, 374.0], [65.1, 375.0], [65.2, 375.0], [65.3, 375.0], [65.4, 376.0], [65.5, 376.0], [65.6, 376.0], [65.7, 376.0], [65.8, 376.0], [65.9, 376.0], [66.0, 376.0], [66.1, 378.0], [66.2, 378.0], [66.3, 378.0], [66.4, 378.0], [66.5, 378.0], [66.6, 378.0], [66.7, 378.0], [66.8, 378.0], [66.9, 378.0], [67.0, 378.0], [67.1, 379.0], [67.2, 379.0], [67.3, 379.0], [67.4, 381.0], [67.5, 381.0], [67.6, 381.0], [67.7, 383.0], [67.8, 383.0], [67.9, 383.0], [68.0, 383.0], [68.1, 384.0], [68.2, 384.0], [68.3, 384.0], [68.4, 385.0], [68.5, 385.0], [68.6, 385.0], [68.7, 387.0], [68.8, 387.0], [68.9, 387.0], [69.0, 387.0], [69.1, 387.0], [69.2, 387.0], [69.3, 387.0], [69.4, 388.0], [69.5, 388.0], [69.6, 388.0], [69.7, 389.0], [69.8, 389.0], [69.9, 389.0], [70.0, 389.0], [70.1, 390.0], [70.2, 390.0], [70.3, 390.0], [70.4, 390.0], [70.5, 390.0], [70.6, 390.0], [70.7, 396.0], [70.8, 396.0], [70.9, 396.0], [71.0, 396.0], [71.1, 396.0], [71.2, 396.0], [71.3, 396.0], [71.4, 396.0], [71.5, 396.0], [71.6, 396.0], [71.7, 397.0], [71.8, 397.0], [71.9, 397.0], [72.0, 397.0], [72.1, 399.0], [72.2, 399.0], [72.3, 399.0], [72.4, 400.0], [72.5, 400.0], [72.6, 400.0], [72.7, 403.0], [72.8, 403.0], [72.9, 403.0], [73.0, 403.0], [73.1, 405.0], [73.2, 405.0], [73.3, 405.0], [73.4, 406.0], [73.5, 406.0], [73.6, 406.0], [73.7, 408.0], [73.8, 408.0], [73.9, 408.0], [74.0, 408.0], [74.1, 408.0], [74.2, 408.0], [74.3, 408.0], [74.4, 409.0], [74.5, 409.0], [74.6, 409.0], [74.7, 412.0], [74.8, 412.0], [74.9, 412.0], [75.0, 413.0], [75.1, 413.0], [75.2, 413.0], [75.3, 413.0], [75.4, 419.0], [75.5, 419.0], [75.6, 419.0], [75.7, 424.0], [75.8, 424.0], [75.9, 424.0], [76.0, 425.0], [76.1, 425.0], [76.2, 425.0], [76.3, 425.0], [76.4, 431.0], [76.5, 431.0], [76.6, 431.0], [76.7, 436.0], [76.8, 436.0], [76.9, 436.0], [77.0, 438.0], [77.1, 438.0], [77.2, 438.0], [77.3, 438.0], [77.4, 440.0], [77.5, 440.0], [77.6, 440.0], [77.7, 445.0], [77.8, 445.0], [77.9, 445.0], [78.0, 448.0], [78.1, 448.0], [78.2, 448.0], [78.3, 448.0], [78.4, 448.0], [78.5, 448.0], [78.6, 448.0], [78.7, 451.0], [78.8, 451.0], [78.9, 451.0], [79.0, 454.0], [79.1, 454.0], [79.2, 454.0], [79.3, 454.0], [79.4, 461.0], [79.5, 461.0], [79.6, 461.0], [79.7, 467.0], [79.8, 467.0], [79.9, 467.0], [80.0, 470.0], [80.1, 470.0], [80.2, 470.0], [80.3, 470.0], [80.4, 472.0], [80.5, 472.0], [80.6, 472.0], [80.7, 474.0], [80.8, 474.0], [80.9, 474.0], [81.0, 478.0], [81.1, 478.0], [81.2, 478.0], [81.3, 478.0], [81.4, 478.0], [81.5, 478.0], [81.6, 478.0], [81.7, 483.0], [81.8, 483.0], [81.9, 483.0], [82.0, 485.0], [82.1, 485.0], [82.2, 485.0], [82.3, 485.0], [82.4, 490.0], [82.5, 490.0], [82.6, 490.0], [82.7, 495.0], [82.8, 495.0], [82.9, 495.0], [83.0, 497.0], [83.1, 497.0], [83.2, 497.0], [83.3, 497.0], [83.4, 502.0], [83.5, 502.0], [83.6, 502.0], [83.7, 508.0], [83.8, 508.0], [83.9, 508.0], [84.0, 518.0], [84.1, 518.0], [84.2, 518.0], [84.3, 518.0], [84.4, 521.0], [84.5, 521.0], [84.6, 521.0], [84.7, 527.0], [84.8, 527.0], [84.9, 527.0], [85.0, 533.0], [85.1, 533.0], [85.2, 533.0], [85.3, 533.0], [85.4, 564.0], [85.5, 564.0], [85.6, 564.0], [85.7, 580.0], [85.8, 580.0], [85.9, 580.0], [86.0, 582.0], [86.1, 582.0], [86.2, 582.0], [86.3, 582.0], [86.4, 586.0], [86.5, 586.0], [86.6, 586.0], [86.7, 590.0], [86.8, 590.0], [86.9, 590.0], [87.0, 592.0], [87.1, 592.0], [87.2, 592.0], [87.3, 592.0], [87.4, 594.0], [87.5, 594.0], [87.6, 594.0], [87.7, 602.0], [87.8, 602.0], [87.9, 602.0], [88.0, 603.0], [88.1, 603.0], [88.2, 603.0], [88.3, 603.0], [88.4, 604.0], [88.5, 604.0], [88.6, 604.0], [88.7, 605.0], [88.8, 605.0], [88.9, 605.0], [89.0, 617.0], [89.1, 617.0], [89.2, 617.0], [89.3, 617.0], [89.4, 618.0], [89.5, 618.0], [89.6, 618.0], [89.7, 658.0], [89.8, 658.0], [89.9, 658.0], [90.0, 669.0], [90.1, 669.0], [90.2, 669.0], [90.3, 669.0], [90.4, 674.0], [90.5, 674.0], [90.6, 674.0], [90.7, 700.0], [90.8, 700.0], [90.9, 700.0], [91.0, 712.0], [91.1, 712.0], [91.2, 712.0], [91.3, 712.0], [91.4, 808.0], [91.5, 808.0], [91.6, 808.0], [91.7, 969.0], [91.8, 969.0], [91.9, 969.0], [92.0, 1044.0], [92.1, 1044.0], [92.2, 1044.0], [92.3, 1044.0], [92.4, 1068.0], [92.5, 1068.0], [92.6, 1068.0], [92.7, 1081.0], [92.8, 1081.0], [92.9, 1081.0], [93.0, 1082.0], [93.1, 1082.0], [93.2, 1082.0], [93.3, 1082.0], [93.4, 1097.0], [93.5, 1097.0], [93.6, 1097.0], [93.7, 1099.0], [93.8, 1099.0], [93.9, 1099.0], [94.0, 1104.0], [94.1, 1104.0], [94.2, 1104.0], [94.3, 1104.0], [94.4, 1162.0], [94.5, 1162.0], [94.6, 1162.0], [94.7, 1164.0], [94.8, 1164.0], [94.9, 1164.0], [95.0, 1171.0], [95.1, 1171.0], [95.2, 1171.0], [95.3, 1171.0], [95.4, 1216.0], [95.5, 1216.0], [95.6, 1216.0], [95.7, 1376.0], [95.8, 1376.0], [95.9, 1376.0], [96.0, 1381.0], [96.1, 1381.0], [96.2, 1381.0], [96.3, 1381.0], [96.4, 1384.0], [96.5, 1384.0], [96.6, 1384.0], [96.7, 1400.0], [96.8, 1400.0], [96.9, 1400.0], [97.0, 1401.0], [97.1, 1401.0], [97.2, 1401.0], [97.3, 1401.0], [97.4, 1416.0], [97.5, 1416.0], [97.6, 1416.0], [97.7, 1428.0], [97.8, 1428.0], [97.9, 1428.0], [98.0, 1430.0], [98.1, 1430.0], [98.2, 1430.0], [98.3, 1430.0], [98.4, 1433.0], [98.5, 1433.0], [98.6, 1433.0], [98.7, 1444.0], [98.8, 1444.0], [98.9, 1444.0], [99.0, 1454.0], [99.1, 1454.0], [99.2, 1454.0], [99.3, 1454.0], [99.4, 1496.0], [99.5, 1496.0], [99.6, 1496.0], [99.7, 1526.0], [99.8, 1526.0], [99.9, 1526.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 114.0, "series": [{"data": [[0.0, 14.0], [600.0, 11.0], [700.0, 9.0], [200.0, 16.0], [800.0, 27.0], [900.0, 19.0], [1000.0, 16.0], [1100.0, 22.0], [300.0, 24.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 7.0], [400.0, 7.0], [100.0, 114.0], [500.0, 4.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 10.0], [600.0, 5.0], [700.0, 5.0], [200.0, 45.0], [900.0, 6.0], [1000.0, 5.0], [1100.0, 8.0], [1200.0, 10.0], [300.0, 5.0], [1300.0, 15.0], [1400.0, 17.0], [1500.0, 22.0], [1600.0, 36.0], [400.0, 10.0], [100.0, 59.0], [1700.0, 27.0], [1800.0, 3.0], [1900.0, 8.0], [500.0, 4.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 5.0], [600.0, 9.0], [700.0, 2.0], [200.0, 28.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 6.0], [1100.0, 4.0], [300.0, 79.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 9.0], [1500.0, 1.0], [100.0, 105.0], [400.0, 33.0], [500.0, 13.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 97.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 554.0, "series": [{"data": [[0.0, 554.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 249.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 97.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 110.95777777777772, "minX": 1.73039706E12, "maxY": 110.95777777777772, "series": [{"data": [[1.73039706E12, 110.95777777777772]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039706E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 57.0, "minX": 2.0, "maxY": 1583.0, "series": [{"data": [[2.0, 98.0], [3.0, 57.0], [4.0, 88.0], [6.0, 135.5], [8.0, 139.0], [9.0, 124.0], [10.0, 112.5], [11.0, 71.0], [13.0, 115.5], [14.0, 123.0], [16.0, 299.3333333333333], [17.0, 404.0], [18.0, 673.6666666666667], [19.0, 935.8], [20.0, 131.33333333333334], [21.0, 591.3333333333334], [22.0, 804.0], [23.0, 356.0], [24.0, 125.0], [25.0, 313.25], [26.0, 146.5], [27.0, 156.5], [28.0, 157.5], [29.0, 148.66666666666666], [30.0, 128.5], [31.0, 148.5], [33.0, 122.0], [32.0, 153.5], [35.0, 236.5], [34.0, 157.0], [37.0, 180.0], [36.0, 147.0], [38.0, 365.0], [39.0, 173.0], [41.0, 445.4], [40.0, 354.0], [42.0, 230.5], [43.0, 132.5], [45.0, 538.75], [44.0, 163.0], [47.0, 317.42857142857144], [46.0, 129.2], [49.0, 101.5], [48.0, 135.4], [50.0, 172.4], [51.0, 127.8], [52.0, 140.2], [53.0, 130.0], [55.0, 416.7142857142857], [54.0, 190.0], [56.0, 146.25], [57.0, 129.5], [58.0, 407.8], [61.0, 817.3333333333334], [67.0, 172.0], [66.0, 171.0], [65.0, 171.0], [64.0, 189.66666666666666], [71.0, 150.0], [70.0, 454.0], [69.0, 1286.0], [68.0, 1395.0], [74.0, 1344.0], [72.0, 450.0], [78.0, 1300.0], [77.0, 1317.0], [83.0, 1211.0], [81.0, 1152.0], [80.0, 1195.0], [86.0, 1218.0], [85.0, 1241.0], [91.0, 872.0], [88.0, 1120.0], [93.0, 1085.0], [92.0, 1075.0], [97.0, 1048.0], [103.0, 1094.0], [101.0, 942.0], [100.0, 793.0], [104.0, 939.0], [111.0, 1094.0], [110.0, 1046.0], [109.0, 964.0], [114.0, 1180.0], [113.0, 1167.0], [112.0, 1155.5], [119.0, 1065.0], [118.0, 1168.0], [117.0, 1172.0], [116.0, 1107.5], [123.0, 1082.0], [122.0, 1056.3333333333333], [126.0, 1018.0], [125.0, 1070.0], [124.0, 1020.0], [134.0, 951.0], [133.0, 950.5], [131.0, 977.5], [130.0, 958.5], [129.0, 1053.0], [128.0, 963.5], [143.0, 862.0], [140.0, 977.0], [139.0, 909.0], [138.0, 900.0], [137.0, 896.0], [150.0, 745.0], [149.0, 759.0], [148.0, 795.3333333333334], [147.0, 802.0], [146.0, 859.0], [145.0, 863.5], [144.0, 884.0], [159.0, 850.5], [157.0, 673.5], [155.0, 659.0], [154.0, 692.5], [153.0, 730.0], [152.0, 827.0], [166.0, 767.75], [165.0, 595.0], [163.0, 721.5], [162.0, 608.5], [161.0, 611.0], [175.0, 564.0], [174.0, 564.0], [173.0, 1105.5], [171.0, 1105.0], [170.0, 1006.0], [169.0, 816.3333333333334], [183.0, 368.0], [182.0, 272.3333333333333], [180.0, 261.0], [178.0, 235.33333333333334], [177.0, 234.0], [176.0, 359.0], [190.0, 372.0], [191.0, 337.25], [187.0, 310.0], [186.0, 363.0], [185.0, 230.0], [193.0, 346.0], [192.0, 347.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[83.66000000000004, 515.9833333333337]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[26.0, 1481.0], [27.0, 229.8], [28.0, 144.5], [29.0, 132.5], [34.0, 204.5], [35.0, 167.66666666666666], [37.0, 274.5], [36.0, 253.0], [39.0, 1203.0], [38.0, 1266.0], [41.0, 802.0], [40.0, 1197.0], [43.0, 192.0], [45.0, 190.8], [44.0, 199.0], [47.0, 194.46153846153845], [46.0, 227.0], [49.0, 178.33333333333334], [48.0, 218.5], [51.0, 178.5], [50.0, 127.0], [52.0, 210.1875], [53.0, 159.0], [55.0, 184.8], [54.0, 182.11111111111111], [57.0, 170.0], [56.0, 296.0], [58.0, 171.0], [74.0, 1583.0], [72.0, 997.0], [81.0, 1329.0], [88.0, 1357.0], [129.0, 1081.0], [137.0, 905.0], [149.0, 779.0], [155.0, 753.0], [154.0, 1274.0], [166.0, 1336.7636363636361], [167.0, 1571.5], [168.0, 1493.4561403508767], [169.0, 1190.75], [175.0, 529.75], [173.0, 66.33333333333333], [171.0, 1478.3124999999998], [170.0, 1454.0833333333333], [179.0, 72.0], [177.0, 72.0], [182.0, 180.0], [183.0, 388.0], [176.0, 425.0], [187.0, 273.0], [188.0, 329.5], [190.0, 438.0], [191.0, 450.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[123.45, 918.0966666666667]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[13.0, 125.0], [18.0, 118.0], [19.0, 146.0], [22.0, 808.0], [23.0, 107.0], [25.0, 166.375], [29.0, 153.0], [31.0, 159.0], [32.0, 149.66666666666666], [35.0, 109.0], [37.0, 166.5], [36.0, 154.25], [39.0, 208.0], [40.0, 288.0], [41.0, 152.5], [42.0, 157.4], [43.0, 138.0], [44.0, 164.33333333333334], [45.0, 147.33333333333334], [47.0, 134.20000000000002], [46.0, 139.0], [48.0, 176.88888888888889], [49.0, 172.0], [50.0, 132.25], [51.0, 165.1], [52.0, 162.66666666666669], [53.0, 170.33333333333334], [55.0, 286.5], [54.0, 199.5], [56.0, 310.75000000000006], [57.0, 231.0], [58.0, 162.5], [71.0, 454.0], [68.0, 144.0], [74.0, 1442.6], [73.0, 1526.0], [72.0, 1416.0], [92.0, 1416.0], [118.0, 1269.6666666666667], [116.0, 1308.5], [129.0, 969.0], [155.0, 674.0], [154.0, 669.0], [171.0, 746.6666666666666], [175.0, 555.8571428571429], [173.0, 786.6666666666665], [170.0, 1134.3333333333333], [169.0, 1162.0], [183.0, 172.0], [178.0, 508.0], [176.0, 545.5], [187.0, 248.42857142857144], [188.0, 288.09999999999997], [189.0, 352.35135135135135], [190.0, 389.40000000000003], [191.0, 403.8461538461538], [186.0, 291.0], [192.0, 421.6666666666667], [193.0, 377.0]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[125.38333333333331, 376.6266666666666]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 193.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.73039706E12, "maxY": 9330.0, "series": [{"data": [[1.73039706E12, 9330.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73039706E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039706E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 376.6266666666666, "minX": 1.73039706E12, "maxY": 918.0966666666667, "series": [{"data": [[1.73039706E12, 515.9833333333337]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039706E12, 918.0966666666667]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039706E12, 376.6266666666666]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039706E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 362.186666666667, "minX": 1.73039706E12, "maxY": 902.5333333333331, "series": [{"data": [[1.73039706E12, 511.5866666666671]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039706E12, 902.5333333333331]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039706E12, 362.186666666667]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039706E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73039706E12, "maxY": 243.74666666666673, "series": [{"data": [[1.73039706E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039706E12, 243.74666666666673]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039706E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039706E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.73039706E12, "maxY": 1966.0, "series": [{"data": [[1.73039706E12, 1966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73039706E12, 1554.6999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73039706E12, 1893.8500000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73039706E12, 1680.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73039706E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73039706E12, 353.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039706E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 155.5, "minX": 181.0, "maxY": 1313.0, "series": [{"data": [[280.0, 155.5], [181.0, 806.0], [196.0, 488.0], [243.0, 1313.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 155.0, "minX": 181.0, "maxY": 1258.0, "series": [{"data": [[280.0, 155.0], [181.0, 508.0], [196.0, 485.5], [243.0, 1258.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039706E12, "maxY": 15.0, "series": [{"data": [[1.73039706E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039706E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039706E12, "maxY": 15.0, "series": [{"data": [[1.73039706E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039706E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039706E12, "maxY": 5.0, "series": [{"data": [[1.73039706E12, 5.0]], "isOverall": false, "label": "Home Request-success", "isController": false}, {"data": [[1.73039706E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.73039706E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039706E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039706E12, "maxY": 15.0, "series": [{"data": [[1.73039706E12, 15.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039706E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

