/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 2040.0, "series": [{"data": [[0.0, 34.0], [0.1, 34.0], [0.2, 34.0], [0.3, 34.0], [0.4, 40.0], [0.5, 40.0], [0.6, 40.0], [0.7, 52.0], [0.8, 52.0], [0.9, 52.0], [1.0, 57.0], [1.1, 57.0], [1.2, 57.0], [1.3, 57.0], [1.4, 59.0], [1.5, 59.0], [1.6, 59.0], [1.7, 61.0], [1.8, 61.0], [1.9, 61.0], [2.0, 62.0], [2.1, 62.0], [2.2, 62.0], [2.3, 62.0], [2.4, 63.0], [2.5, 63.0], [2.6, 63.0], [2.7, 63.0], [2.8, 63.0], [2.9, 63.0], [3.0, 65.0], [3.1, 65.0], [3.2, 65.0], [3.3, 65.0], [3.4, 66.0], [3.5, 66.0], [3.6, 66.0], [3.7, 66.0], [3.8, 66.0], [3.9, 66.0], [4.0, 66.0], [4.1, 66.0], [4.2, 66.0], [4.3, 66.0], [4.4, 71.0], [4.5, 71.0], [4.6, 71.0], [4.7, 72.0], [4.8, 72.0], [4.9, 72.0], [5.0, 72.0], [5.1, 72.0], [5.2, 72.0], [5.3, 72.0], [5.4, 74.0], [5.5, 74.0], [5.6, 74.0], [5.7, 75.0], [5.8, 75.0], [5.9, 75.0], [6.0, 76.0], [6.1, 76.0], [6.2, 76.0], [6.3, 76.0], [6.4, 76.0], [6.5, 76.0], [6.6, 76.0], [6.7, 77.0], [6.8, 77.0], [6.9, 77.0], [7.0, 78.0], [7.1, 78.0], [7.2, 78.0], [7.3, 78.0], [7.4, 78.0], [7.5, 78.0], [7.6, 78.0], [7.7, 78.0], [7.8, 78.0], [7.9, 78.0], [8.0, 78.0], [8.1, 78.0], [8.2, 78.0], [8.3, 78.0], [8.4, 80.0], [8.5, 80.0], [8.6, 80.0], [8.7, 80.0], [8.8, 80.0], [8.9, 80.0], [9.0, 84.0], [9.1, 84.0], [9.2, 84.0], [9.3, 84.0], [9.4, 85.0], [9.5, 85.0], [9.6, 85.0], [9.7, 86.0], [9.8, 86.0], [9.9, 86.0], [10.0, 86.0], [10.1, 86.0], [10.2, 86.0], [10.3, 86.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 87.0], [10.8, 87.0], [10.9, 87.0], [11.0, 89.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 90.0], [11.8, 90.0], [11.9, 90.0], [12.0, 91.0], [12.1, 91.0], [12.2, 91.0], [12.3, 91.0], [12.4, 93.0], [12.5, 93.0], [12.6, 93.0], [12.7, 94.0], [12.8, 94.0], [12.9, 94.0], [13.0, 94.0], [13.1, 94.0], [13.2, 94.0], [13.3, 94.0], [13.4, 94.0], [13.5, 94.0], [13.6, 94.0], [13.7, 95.0], [13.8, 95.0], [13.9, 95.0], [14.0, 95.0], [14.1, 95.0], [14.2, 95.0], [14.3, 95.0], [14.4, 95.0], [14.5, 95.0], [14.6, 95.0], [14.7, 96.0], [14.8, 96.0], [14.9, 96.0], [15.0, 96.0], [15.1, 96.0], [15.2, 96.0], [15.3, 96.0], [15.4, 97.0], [15.5, 97.0], [15.6, 97.0], [15.7, 99.0], [15.8, 99.0], [15.9, 99.0], [16.0, 99.0], [16.1, 99.0], [16.2, 99.0], [16.3, 99.0], [16.4, 99.0], [16.5, 99.0], [16.6, 99.0], [16.7, 101.0], [16.8, 101.0], [16.9, 101.0], [17.0, 101.0], [17.1, 101.0], [17.2, 101.0], [17.3, 101.0], [17.4, 102.0], [17.5, 102.0], [17.6, 102.0], [17.7, 102.0], [17.8, 102.0], [17.9, 102.0], [18.0, 102.0], [18.1, 102.0], [18.2, 102.0], [18.3, 102.0], [18.4, 102.0], [18.5, 102.0], [18.6, 102.0], [18.7, 103.0], [18.8, 103.0], [18.9, 103.0], [19.0, 103.0], [19.1, 103.0], [19.2, 103.0], [19.3, 103.0], [19.4, 105.0], [19.5, 105.0], [19.6, 105.0], [19.7, 106.0], [19.8, 106.0], [19.9, 106.0], [20.0, 106.0], [20.1, 106.0], [20.2, 106.0], [20.3, 106.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 107.0], [20.8, 107.0], [20.9, 107.0], [21.0, 107.0], [21.1, 107.0], [21.2, 107.0], [21.3, 107.0], [21.4, 108.0], [21.5, 108.0], [21.6, 108.0], [21.7, 108.0], [21.8, 108.0], [21.9, 108.0], [22.0, 109.0], [22.1, 109.0], [22.2, 109.0], [22.3, 109.0], [22.4, 110.0], [22.5, 110.0], [22.6, 110.0], [22.7, 110.0], [22.8, 110.0], [22.9, 110.0], [23.0, 113.0], [23.1, 113.0], [23.2, 113.0], [23.3, 113.0], [23.4, 114.0], [23.5, 114.0], [23.6, 114.0], [23.7, 115.0], [23.8, 115.0], [23.9, 115.0], [24.0, 117.0], [24.1, 117.0], [24.2, 117.0], [24.3, 117.0], [24.4, 118.0], [24.5, 118.0], [24.6, 118.0], [24.7, 118.0], [24.8, 118.0], [24.9, 118.0], [25.0, 120.0], [25.1, 120.0], [25.2, 120.0], [25.3, 120.0], [25.4, 124.0], [25.5, 124.0], [25.6, 124.0], [25.7, 124.0], [25.8, 124.0], [25.9, 124.0], [26.0, 124.0], [26.1, 124.0], [26.2, 124.0], [26.3, 124.0], [26.4, 125.0], [26.5, 125.0], [26.6, 125.0], [26.7, 128.0], [26.8, 128.0], [26.9, 128.0], [27.0, 134.0], [27.1, 134.0], [27.2, 134.0], [27.3, 134.0], [27.4, 136.0], [27.5, 136.0], [27.6, 136.0], [27.7, 138.0], [27.8, 138.0], [27.9, 138.0], [28.0, 139.0], [28.1, 139.0], [28.2, 139.0], [28.3, 139.0], [28.4, 140.0], [28.5, 140.0], [28.6, 140.0], [28.7, 142.0], [28.8, 142.0], [28.9, 142.0], [29.0, 145.0], [29.1, 145.0], [29.2, 145.0], [29.3, 145.0], [29.4, 146.0], [29.5, 146.0], [29.6, 146.0], [29.7, 148.0], [29.8, 148.0], [29.9, 148.0], [30.0, 149.0], [30.1, 149.0], [30.2, 149.0], [30.3, 149.0], [30.4, 152.0], [30.5, 152.0], [30.6, 152.0], [30.7, 153.0], [30.8, 153.0], [30.9, 153.0], [31.0, 155.0], [31.1, 155.0], [31.2, 155.0], [31.3, 155.0], [31.4, 159.0], [31.5, 159.0], [31.6, 159.0], [31.7, 161.0], [31.8, 161.0], [31.9, 161.0], [32.0, 164.0], [32.1, 164.0], [32.2, 164.0], [32.3, 164.0], [32.4, 165.0], [32.5, 165.0], [32.6, 165.0], [32.7, 169.0], [32.8, 169.0], [32.9, 169.0], [33.0, 172.0], [33.1, 172.0], [33.2, 172.0], [33.3, 172.0], [33.4, 178.0], [33.5, 178.0], [33.6, 178.0], [33.7, 179.0], [33.8, 179.0], [33.9, 179.0], [34.0, 181.0], [34.1, 181.0], [34.2, 181.0], [34.3, 181.0], [34.4, 185.0], [34.5, 185.0], [34.6, 185.0], [34.7, 186.0], [34.8, 186.0], [34.9, 186.0], [35.0, 187.0], [35.1, 187.0], [35.2, 187.0], [35.3, 187.0], [35.4, 194.0], [35.5, 194.0], [35.6, 194.0], [35.7, 194.0], [35.8, 194.0], [35.9, 194.0], [36.0, 195.0], [36.1, 195.0], [36.2, 195.0], [36.3, 195.0], [36.4, 198.0], [36.5, 198.0], [36.6, 198.0], [36.7, 202.0], [36.8, 202.0], [36.9, 202.0], [37.0, 205.0], [37.1, 205.0], [37.2, 205.0], [37.3, 205.0], [37.4, 208.0], [37.5, 208.0], [37.6, 208.0], [37.7, 210.0], [37.8, 210.0], [37.9, 210.0], [38.0, 210.0], [38.1, 210.0], [38.2, 210.0], [38.3, 210.0], [38.4, 211.0], [38.5, 211.0], [38.6, 211.0], [38.7, 212.0], [38.8, 212.0], [38.9, 212.0], [39.0, 212.0], [39.1, 213.0], [39.2, 213.0], [39.3, 213.0], [39.4, 217.0], [39.5, 217.0], [39.6, 217.0], [39.7, 217.0], [39.8, 217.0], [39.9, 217.0], [40.0, 217.0], [40.1, 217.0], [40.2, 217.0], [40.3, 217.0], [40.4, 218.0], [40.5, 218.0], [40.6, 218.0], [40.7, 220.0], [40.8, 220.0], [40.9, 220.0], [41.0, 220.0], [41.1, 222.0], [41.2, 222.0], [41.3, 222.0], [41.4, 222.0], [41.5, 222.0], [41.6, 222.0], [41.7, 226.0], [41.8, 226.0], [41.9, 226.0], [42.0, 226.0], [42.1, 241.0], [42.2, 241.0], [42.3, 241.0], [42.4, 242.0], [42.5, 242.0], [42.6, 242.0], [42.7, 242.0], [42.8, 242.0], [42.9, 242.0], [43.0, 242.0], [43.1, 246.0], [43.2, 246.0], [43.3, 246.0], [43.4, 259.0], [43.5, 259.0], [43.6, 259.0], [43.7, 259.0], [43.8, 259.0], [43.9, 259.0], [44.0, 259.0], [44.1, 261.0], [44.2, 261.0], [44.3, 261.0], [44.4, 262.0], [44.5, 262.0], [44.6, 262.0], [44.7, 263.0], [44.8, 263.0], [44.9, 263.0], [45.0, 263.0], [45.1, 268.0], [45.2, 268.0], [45.3, 268.0], [45.4, 268.0], [45.5, 268.0], [45.6, 268.0], [45.7, 271.0], [45.8, 271.0], [45.9, 271.0], [46.0, 271.0], [46.1, 282.0], [46.2, 282.0], [46.3, 282.0], [46.4, 285.0], [46.5, 285.0], [46.6, 285.0], [46.7, 288.0], [46.8, 288.0], [46.9, 288.0], [47.0, 288.0], [47.1, 303.0], [47.2, 303.0], [47.3, 303.0], [47.4, 308.0], [47.5, 308.0], [47.6, 308.0], [47.7, 311.0], [47.8, 311.0], [47.9, 311.0], [48.0, 311.0], [48.1, 316.0], [48.2, 316.0], [48.3, 316.0], [48.4, 318.0], [48.5, 318.0], [48.6, 318.0], [48.7, 323.0], [48.8, 323.0], [48.9, 323.0], [49.0, 323.0], [49.1, 328.0], [49.2, 328.0], [49.3, 328.0], [49.4, 328.0], [49.5, 328.0], [49.6, 328.0], [49.7, 330.0], [49.8, 330.0], [49.9, 330.0], [50.0, 330.0], [50.1, 331.0], [50.2, 331.0], [50.3, 331.0], [50.4, 337.0], [50.5, 337.0], [50.6, 337.0], [50.7, 352.0], [50.8, 352.0], [50.9, 352.0], [51.0, 352.0], [51.1, 355.0], [51.2, 355.0], [51.3, 355.0], [51.4, 355.0], [51.5, 355.0], [51.6, 355.0], [51.7, 357.0], [51.8, 357.0], [51.9, 357.0], [52.0, 357.0], [52.1, 357.0], [52.2, 357.0], [52.3, 357.0], [52.4, 358.0], [52.5, 358.0], [52.6, 358.0], [52.7, 360.0], [52.8, 360.0], [52.9, 360.0], [53.0, 360.0], [53.1, 362.0], [53.2, 362.0], [53.3, 362.0], [53.4, 362.0], [53.5, 362.0], [53.6, 362.0], [53.7, 362.0], [53.8, 362.0], [53.9, 362.0], [54.0, 362.0], [54.1, 363.0], [54.2, 363.0], [54.3, 363.0], [54.4, 368.0], [54.5, 368.0], [54.6, 368.0], [54.7, 370.0], [54.8, 370.0], [54.9, 370.0], [55.0, 370.0], [55.1, 376.0], [55.2, 376.0], [55.3, 376.0], [55.4, 380.0], [55.5, 380.0], [55.6, 380.0], [55.7, 386.0], [55.8, 386.0], [55.9, 386.0], [56.0, 386.0], [56.1, 386.0], [56.2, 386.0], [56.3, 386.0], [56.4, 390.0], [56.5, 390.0], [56.6, 390.0], [56.7, 391.0], [56.8, 391.0], [56.9, 391.0], [57.0, 391.0], [57.1, 391.0], [57.2, 391.0], [57.3, 391.0], [57.4, 393.0], [57.5, 393.0], [57.6, 393.0], [57.7, 395.0], [57.8, 395.0], [57.9, 395.0], [58.0, 395.0], [58.1, 398.0], [58.2, 398.0], [58.3, 398.0], [58.4, 413.0], [58.5, 413.0], [58.6, 413.0], [58.7, 422.0], [58.8, 422.0], [58.9, 422.0], [59.0, 422.0], [59.1, 430.0], [59.2, 430.0], [59.3, 430.0], [59.4, 456.0], [59.5, 456.0], [59.6, 456.0], [59.7, 466.0], [59.8, 466.0], [59.9, 466.0], [60.0, 466.0], [60.1, 472.0], [60.2, 472.0], [60.3, 472.0], [60.4, 482.0], [60.5, 482.0], [60.6, 482.0], [60.7, 522.0], [60.8, 522.0], [60.9, 522.0], [61.0, 522.0], [61.1, 533.0], [61.2, 533.0], [61.3, 533.0], [61.4, 539.0], [61.5, 539.0], [61.6, 539.0], [61.7, 540.0], [61.8, 540.0], [61.9, 540.0], [62.0, 540.0], [62.1, 547.0], [62.2, 547.0], [62.3, 547.0], [62.4, 552.0], [62.5, 552.0], [62.6, 552.0], [62.7, 553.0], [62.8, 553.0], [62.9, 553.0], [63.0, 553.0], [63.1, 566.0], [63.2, 566.0], [63.3, 566.0], [63.4, 567.0], [63.5, 567.0], [63.6, 567.0], [63.7, 568.0], [63.8, 568.0], [63.9, 568.0], [64.0, 568.0], [64.1, 568.0], [64.2, 568.0], [64.3, 568.0], [64.4, 569.0], [64.5, 569.0], [64.6, 569.0], [64.7, 571.0], [64.8, 571.0], [64.9, 571.0], [65.0, 571.0], [65.1, 575.0], [65.2, 575.0], [65.3, 575.0], [65.4, 575.0], [65.5, 575.0], [65.6, 575.0], [65.7, 578.0], [65.8, 578.0], [65.9, 578.0], [66.0, 578.0], [66.1, 583.0], [66.2, 583.0], [66.3, 583.0], [66.4, 585.0], [66.5, 585.0], [66.6, 585.0], [66.7, 592.0], [66.8, 592.0], [66.9, 592.0], [67.0, 592.0], [67.1, 593.0], [67.2, 593.0], [67.3, 593.0], [67.4, 600.0], [67.5, 600.0], [67.6, 600.0], [67.7, 601.0], [67.8, 601.0], [67.9, 601.0], [68.0, 601.0], [68.1, 605.0], [68.2, 605.0], [68.3, 605.0], [68.4, 606.0], [68.5, 606.0], [68.6, 606.0], [68.7, 609.0], [68.8, 609.0], [68.9, 609.0], [69.0, 609.0], [69.1, 609.0], [69.2, 609.0], [69.3, 609.0], [69.4, 611.0], [69.5, 611.0], [69.6, 611.0], [69.7, 612.0], [69.8, 612.0], [69.9, 612.0], [70.0, 612.0], [70.1, 621.0], [70.2, 621.0], [70.3, 621.0], [70.4, 621.0], [70.5, 621.0], [70.6, 621.0], [70.7, 623.0], [70.8, 623.0], [70.9, 623.0], [71.0, 623.0], [71.1, 626.0], [71.2, 626.0], [71.3, 626.0], [71.4, 626.0], [71.5, 626.0], [71.6, 626.0], [71.7, 627.0], [71.8, 627.0], [71.9, 627.0], [72.0, 627.0], [72.1, 627.0], [72.2, 627.0], [72.3, 627.0], [72.4, 629.0], [72.5, 629.0], [72.6, 629.0], [72.7, 632.0], [72.8, 632.0], [72.9, 632.0], [73.0, 632.0], [73.1, 632.0], [73.2, 632.0], [73.3, 632.0], [73.4, 636.0], [73.5, 636.0], [73.6, 636.0], [73.7, 636.0], [73.8, 636.0], [73.9, 636.0], [74.0, 636.0], [74.1, 639.0], [74.2, 639.0], [74.3, 639.0], [74.4, 641.0], [74.5, 641.0], [74.6, 641.0], [74.7, 646.0], [74.8, 646.0], [74.9, 646.0], [75.0, 646.0], [75.1, 658.0], [75.2, 658.0], [75.3, 658.0], [75.4, 661.0], [75.5, 661.0], [75.6, 661.0], [75.7, 662.0], [75.8, 662.0], [75.9, 662.0], [76.0, 662.0], [76.1, 667.0], [76.2, 667.0], [76.3, 667.0], [76.4, 669.0], [76.5, 669.0], [76.6, 669.0], [76.7, 671.0], [76.8, 671.0], [76.9, 671.0], [77.0, 671.0], [77.1, 674.0], [77.2, 674.0], [77.3, 674.0], [77.4, 733.0], [77.5, 733.0], [77.6, 733.0], [77.7, 771.0], [77.8, 771.0], [77.9, 771.0], [78.0, 771.0], [78.1, 782.0], [78.2, 782.0], [78.3, 782.0], [78.4, 784.0], [78.5, 784.0], [78.6, 784.0], [78.7, 784.0], [78.8, 784.0], [78.9, 784.0], [79.0, 784.0], [79.1, 787.0], [79.2, 787.0], [79.3, 787.0], [79.4, 815.0], [79.5, 815.0], [79.6, 815.0], [79.7, 884.0], [79.8, 884.0], [79.9, 884.0], [80.0, 884.0], [80.1, 884.0], [80.2, 884.0], [80.3, 884.0], [80.4, 885.0], [80.5, 885.0], [80.6, 885.0], [80.7, 887.0], [80.8, 887.0], [80.9, 887.0], [81.0, 889.0], [81.1, 889.0], [81.2, 889.0], [81.3, 889.0], [81.4, 890.0], [81.5, 890.0], [81.6, 890.0], [81.7, 891.0], [81.8, 891.0], [81.9, 891.0], [82.0, 891.0], [82.1, 891.0], [82.2, 891.0], [82.3, 891.0], [82.4, 896.0], [82.5, 896.0], [82.6, 896.0], [82.7, 898.0], [82.8, 898.0], [82.9, 898.0], [83.0, 899.0], [83.1, 899.0], [83.2, 899.0], [83.3, 899.0], [83.4, 901.0], [83.5, 901.0], [83.6, 901.0], [83.7, 903.0], [83.8, 903.0], [83.9, 903.0], [84.0, 906.0], [84.1, 906.0], [84.2, 906.0], [84.3, 906.0], [84.4, 906.0], [84.5, 906.0], [84.6, 906.0], [84.7, 907.0], [84.8, 907.0], [84.9, 907.0], [85.0, 907.0], [85.1, 907.0], [85.2, 907.0], [85.3, 907.0], [85.4, 913.0], [85.5, 913.0], [85.6, 913.0], [85.7, 914.0], [85.8, 914.0], [85.9, 914.0], [86.0, 915.0], [86.1, 915.0], [86.2, 915.0], [86.3, 915.0], [86.4, 919.0], [86.5, 919.0], [86.6, 919.0], [86.7, 920.0], [86.8, 920.0], [86.9, 920.0], [87.0, 920.0], [87.1, 920.0], [87.2, 920.0], [87.3, 920.0], [87.4, 921.0], [87.5, 921.0], [87.6, 921.0], [87.7, 921.0], [87.8, 921.0], [87.9, 921.0], [88.0, 926.0], [88.1, 926.0], [88.2, 926.0], [88.3, 926.0], [88.4, 928.0], [88.5, 928.0], [88.6, 928.0], [88.7, 935.0], [88.8, 935.0], [88.9, 935.0], [89.0, 951.0], [89.1, 951.0], [89.2, 951.0], [89.3, 951.0], [89.4, 998.0], [89.5, 998.0], [89.6, 998.0], [89.7, 1001.0], [89.8, 1001.0], [89.9, 1001.0], [90.0, 1008.0], [90.1, 1008.0], [90.2, 1008.0], [90.3, 1008.0], [90.4, 1008.0], [90.5, 1008.0], [90.6, 1008.0], [90.7, 1008.0], [90.8, 1008.0], [90.9, 1008.0], [91.0, 1011.0], [91.1, 1011.0], [91.2, 1011.0], [91.3, 1011.0], [91.4, 1011.0], [91.5, 1011.0], [91.6, 1011.0], [91.7, 1013.0], [91.8, 1013.0], [91.9, 1013.0], [92.0, 1013.0], [92.1, 1013.0], [92.2, 1013.0], [92.3, 1013.0], [92.4, 1013.0], [92.5, 1013.0], [92.6, 1013.0], [92.7, 1013.0], [92.8, 1013.0], [92.9, 1013.0], [93.0, 1016.0], [93.1, 1016.0], [93.2, 1016.0], [93.3, 1016.0], [93.4, 1019.0], [93.5, 1019.0], [93.6, 1019.0], [93.7, 1022.0], [93.8, 1022.0], [93.9, 1022.0], [94.0, 1047.0], [94.1, 1047.0], [94.2, 1047.0], [94.3, 1047.0], [94.4, 1097.0], [94.5, 1097.0], [94.6, 1097.0], [94.7, 1099.0], [94.8, 1099.0], [94.9, 1099.0], [95.0, 1280.0], [95.1, 1280.0], [95.2, 1280.0], [95.3, 1280.0], [95.4, 1281.0], [95.5, 1281.0], [95.6, 1281.0], [95.7, 1285.0], [95.8, 1285.0], [95.9, 1285.0], [96.0, 1286.0], [96.1, 1286.0], [96.2, 1286.0], [96.3, 1286.0], [96.4, 1287.0], [96.5, 1287.0], [96.6, 1287.0], [96.7, 1292.0], [96.8, 1292.0], [96.9, 1292.0], [97.0, 1299.0], [97.1, 1299.0], [97.2, 1299.0], [97.3, 1299.0], [97.4, 1310.0], [97.5, 1310.0], [97.6, 1310.0], [97.7, 1313.0], [97.8, 1313.0], [97.9, 1313.0], [98.0, 1316.0], [98.1, 1316.0], [98.2, 1316.0], [98.3, 1316.0], [98.4, 1322.0], [98.5, 1322.0], [98.6, 1322.0], [98.7, 1324.0], [98.8, 1324.0], [98.9, 1324.0], [99.0, 1340.0], [99.1, 1340.0], [99.2, 1340.0], [99.3, 1340.0], [99.4, 1340.0], [99.5, 1340.0], [99.6, 1340.0], [99.7, 1351.0], [99.8, 1351.0], [99.9, 1351.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 90.0], [0.1, 90.0], [0.2, 90.0], [0.3, 90.0], [0.4, 128.0], [0.5, 128.0], [0.6, 128.0], [0.7, 143.0], [0.8, 143.0], [0.9, 143.0], [1.0, 144.0], [1.1, 144.0], [1.2, 144.0], [1.3, 144.0], [1.4, 147.0], [1.5, 147.0], [1.6, 147.0], [1.7, 153.0], [1.8, 153.0], [1.9, 153.0], [2.0, 154.0], [2.1, 154.0], [2.2, 154.0], [2.3, 154.0], [2.4, 155.0], [2.5, 155.0], [2.6, 155.0], [2.7, 156.0], [2.8, 156.0], [2.9, 156.0], [3.0, 158.0], [3.1, 158.0], [3.2, 158.0], [3.3, 158.0], [3.4, 161.0], [3.5, 161.0], [3.6, 161.0], [3.7, 165.0], [3.8, 165.0], [3.9, 165.0], [4.0, 166.0], [4.1, 166.0], [4.2, 166.0], [4.3, 166.0], [4.4, 167.0], [4.5, 167.0], [4.6, 167.0], [4.7, 169.0], [4.8, 169.0], [4.9, 169.0], [5.0, 169.0], [5.1, 169.0], [5.2, 169.0], [5.3, 169.0], [5.4, 173.0], [5.5, 173.0], [5.6, 173.0], [5.7, 175.0], [5.8, 175.0], [5.9, 175.0], [6.0, 175.0], [6.1, 175.0], [6.2, 175.0], [6.3, 175.0], [6.4, 175.0], [6.5, 175.0], [6.6, 175.0], [6.7, 176.0], [6.8, 176.0], [6.9, 176.0], [7.0, 182.0], [7.1, 182.0], [7.2, 182.0], [7.3, 182.0], [7.4, 185.0], [7.5, 185.0], [7.6, 185.0], [7.7, 189.0], [7.8, 189.0], [7.9, 189.0], [8.0, 189.0], [8.1, 189.0], [8.2, 189.0], [8.3, 189.0], [8.4, 192.0], [8.5, 192.0], [8.6, 192.0], [8.7, 193.0], [8.8, 193.0], [8.9, 193.0], [9.0, 194.0], [9.1, 194.0], [9.2, 194.0], [9.3, 194.0], [9.4, 194.0], [9.5, 194.0], [9.6, 194.0], [9.7, 196.0], [9.8, 196.0], [9.9, 196.0], [10.0, 198.0], [10.1, 198.0], [10.2, 198.0], [10.3, 198.0], [10.4, 198.0], [10.5, 198.0], [10.6, 198.0], [10.7, 199.0], [10.8, 199.0], [10.9, 199.0], [11.0, 203.0], [11.1, 203.0], [11.2, 203.0], [11.3, 203.0], [11.4, 206.0], [11.5, 206.0], [11.6, 206.0], [11.7, 211.0], [11.8, 211.0], [11.9, 211.0], [12.0, 211.0], [12.1, 214.0], [12.2, 214.0], [12.3, 214.0], [12.4, 217.0], [12.5, 217.0], [12.6, 217.0], [12.7, 217.0], [12.8, 217.0], [12.9, 217.0], [13.0, 217.0], [13.1, 218.0], [13.2, 218.0], [13.3, 218.0], [13.4, 218.0], [13.5, 218.0], [13.6, 218.0], [13.7, 219.0], [13.8, 219.0], [13.9, 219.0], [14.0, 219.0], [14.1, 220.0], [14.2, 220.0], [14.3, 220.0], [14.4, 221.0], [14.5, 221.0], [14.6, 221.0], [14.7, 222.0], [14.8, 222.0], [14.9, 222.0], [15.0, 222.0], [15.1, 224.0], [15.2, 224.0], [15.3, 224.0], [15.4, 225.0], [15.5, 225.0], [15.6, 225.0], [15.7, 227.0], [15.8, 227.0], [15.9, 227.0], [16.0, 227.0], [16.1, 231.0], [16.2, 231.0], [16.3, 231.0], [16.4, 232.0], [16.5, 232.0], [16.6, 232.0], [16.7, 232.0], [16.8, 232.0], [16.9, 232.0], [17.0, 232.0], [17.1, 237.0], [17.2, 237.0], [17.3, 237.0], [17.4, 240.0], [17.5, 240.0], [17.6, 240.0], [17.7, 242.0], [17.8, 242.0], [17.9, 242.0], [18.0, 242.0], [18.1, 242.0], [18.2, 242.0], [18.3, 242.0], [18.4, 249.0], [18.5, 249.0], [18.6, 249.0], [18.7, 253.0], [18.8, 253.0], [18.9, 253.0], [19.0, 255.0], [19.1, 255.0], [19.2, 255.0], [19.3, 255.0], [19.4, 257.0], [19.5, 257.0], [19.6, 257.0], [19.7, 258.0], [19.8, 258.0], [19.9, 258.0], [20.0, 265.0], [20.1, 265.0], [20.2, 265.0], [20.3, 265.0], [20.4, 268.0], [20.5, 268.0], [20.6, 268.0], [20.7, 274.0], [20.8, 274.0], [20.9, 274.0], [21.0, 277.0], [21.1, 277.0], [21.2, 277.0], [21.3, 277.0], [21.4, 278.0], [21.5, 278.0], [21.6, 278.0], [21.7, 279.0], [21.8, 279.0], [21.9, 279.0], [22.0, 284.0], [22.1, 284.0], [22.2, 284.0], [22.3, 284.0], [22.4, 292.0], [22.5, 292.0], [22.6, 292.0], [22.7, 301.0], [22.8, 301.0], [22.9, 301.0], [23.0, 303.0], [23.1, 303.0], [23.2, 303.0], [23.3, 303.0], [23.4, 306.0], [23.5, 306.0], [23.6, 306.0], [23.7, 333.0], [23.8, 333.0], [23.9, 333.0], [24.0, 351.0], [24.1, 351.0], [24.2, 351.0], [24.3, 351.0], [24.4, 352.0], [24.5, 352.0], [24.6, 352.0], [24.7, 358.0], [24.8, 358.0], [24.9, 358.0], [25.0, 359.0], [25.1, 359.0], [25.2, 359.0], [25.3, 359.0], [25.4, 370.0], [25.5, 370.0], [25.6, 370.0], [25.7, 385.0], [25.8, 385.0], [25.9, 385.0], [26.0, 388.0], [26.1, 388.0], [26.2, 388.0], [26.3, 388.0], [26.4, 391.0], [26.5, 391.0], [26.6, 391.0], [26.7, 393.0], [26.8, 393.0], [26.9, 393.0], [27.0, 393.0], [27.1, 393.0], [27.2, 393.0], [27.3, 393.0], [27.4, 395.0], [27.5, 395.0], [27.6, 395.0], [27.7, 397.0], [27.8, 397.0], [27.9, 397.0], [28.0, 401.0], [28.1, 401.0], [28.2, 401.0], [28.3, 401.0], [28.4, 401.0], [28.5, 401.0], [28.6, 401.0], [28.7, 406.0], [28.8, 406.0], [28.9, 406.0], [29.0, 417.0], [29.1, 417.0], [29.2, 417.0], [29.3, 417.0], [29.4, 420.0], [29.5, 420.0], [29.6, 420.0], [29.7, 431.0], [29.8, 431.0], [29.9, 431.0], [30.0, 478.0], [30.1, 478.0], [30.2, 478.0], [30.3, 478.0], [30.4, 494.0], [30.5, 494.0], [30.6, 494.0], [30.7, 508.0], [30.8, 508.0], [30.9, 508.0], [31.0, 508.0], [31.1, 508.0], [31.2, 508.0], [31.3, 508.0], [31.4, 531.0], [31.5, 531.0], [31.6, 531.0], [31.7, 532.0], [31.8, 532.0], [31.9, 532.0], [32.0, 539.0], [32.1, 539.0], [32.2, 539.0], [32.3, 539.0], [32.4, 541.0], [32.5, 541.0], [32.6, 541.0], [32.7, 549.0], [32.8, 549.0], [32.9, 549.0], [33.0, 552.0], [33.1, 552.0], [33.2, 552.0], [33.3, 552.0], [33.4, 574.0], [33.5, 574.0], [33.6, 574.0], [33.7, 576.0], [33.8, 576.0], [33.9, 576.0], [34.0, 576.0], [34.1, 576.0], [34.2, 576.0], [34.3, 576.0], [34.4, 581.0], [34.5, 581.0], [34.6, 581.0], [34.7, 583.0], [34.8, 583.0], [34.9, 583.0], [35.0, 584.0], [35.1, 584.0], [35.2, 584.0], [35.3, 584.0], [35.4, 588.0], [35.5, 588.0], [35.6, 588.0], [35.7, 609.0], [35.8, 609.0], [35.9, 609.0], [36.0, 632.0], [36.1, 632.0], [36.2, 632.0], [36.3, 632.0], [36.4, 633.0], [36.5, 633.0], [36.6, 633.0], [36.7, 640.0], [36.8, 640.0], [36.9, 640.0], [37.0, 649.0], [37.1, 649.0], [37.2, 649.0], [37.3, 649.0], [37.4, 651.0], [37.5, 651.0], [37.6, 651.0], [37.7, 659.0], [37.8, 659.0], [37.9, 659.0], [38.0, 710.0], [38.1, 710.0], [38.2, 710.0], [38.3, 710.0], [38.4, 716.0], [38.5, 716.0], [38.6, 716.0], [38.7, 718.0], [38.8, 718.0], [38.9, 718.0], [39.0, 718.0], [39.1, 722.0], [39.2, 722.0], [39.3, 722.0], [39.4, 722.0], [39.5, 722.0], [39.6, 722.0], [39.7, 733.0], [39.8, 733.0], [39.9, 733.0], [40.0, 733.0], [40.1, 745.0], [40.2, 745.0], [40.3, 745.0], [40.4, 746.0], [40.5, 746.0], [40.6, 746.0], [40.7, 752.0], [40.8, 752.0], [40.9, 752.0], [41.0, 752.0], [41.1, 757.0], [41.2, 757.0], [41.3, 757.0], [41.4, 771.0], [41.5, 771.0], [41.6, 771.0], [41.7, 796.0], [41.8, 796.0], [41.9, 796.0], [42.0, 796.0], [42.1, 867.0], [42.2, 867.0], [42.3, 867.0], [42.4, 881.0], [42.5, 881.0], [42.6, 881.0], [42.7, 907.0], [42.8, 907.0], [42.9, 907.0], [43.0, 907.0], [43.1, 959.0], [43.2, 959.0], [43.3, 959.0], [43.4, 981.0], [43.5, 981.0], [43.6, 981.0], [43.7, 993.0], [43.8, 993.0], [43.9, 993.0], [44.0, 993.0], [44.1, 997.0], [44.2, 997.0], [44.3, 997.0], [44.4, 1010.0], [44.5, 1010.0], [44.6, 1010.0], [44.7, 1045.0], [44.8, 1045.0], [44.9, 1045.0], [45.0, 1045.0], [45.1, 1073.0], [45.2, 1073.0], [45.3, 1073.0], [45.4, 1077.0], [45.5, 1077.0], [45.6, 1077.0], [45.7, 1078.0], [45.8, 1078.0], [45.9, 1078.0], [46.0, 1078.0], [46.1, 1086.0], [46.2, 1086.0], [46.3, 1086.0], [46.4, 1120.0], [46.5, 1120.0], [46.6, 1120.0], [46.7, 1130.0], [46.8, 1130.0], [46.9, 1130.0], [47.0, 1130.0], [47.1, 1132.0], [47.2, 1132.0], [47.3, 1132.0], [47.4, 1133.0], [47.5, 1133.0], [47.6, 1133.0], [47.7, 1142.0], [47.8, 1142.0], [47.9, 1142.0], [48.0, 1142.0], [48.1, 1155.0], [48.2, 1155.0], [48.3, 1155.0], [48.4, 1176.0], [48.5, 1176.0], [48.6, 1176.0], [48.7, 1196.0], [48.8, 1196.0], [48.9, 1196.0], [49.0, 1196.0], [49.1, 1215.0], [49.2, 1215.0], [49.3, 1215.0], [49.4, 1228.0], [49.5, 1228.0], [49.6, 1228.0], [49.7, 1245.0], [49.8, 1245.0], [49.9, 1245.0], [50.0, 1245.0], [50.1, 1247.0], [50.2, 1247.0], [50.3, 1247.0], [50.4, 1257.0], [50.5, 1257.0], [50.6, 1257.0], [50.7, 1270.0], [50.8, 1270.0], [50.9, 1270.0], [51.0, 1270.0], [51.1, 1289.0], [51.2, 1289.0], [51.3, 1289.0], [51.4, 1299.0], [51.5, 1299.0], [51.6, 1299.0], [51.7, 1302.0], [51.8, 1302.0], [51.9, 1302.0], [52.0, 1302.0], [52.1, 1328.0], [52.2, 1328.0], [52.3, 1328.0], [52.4, 1335.0], [52.5, 1335.0], [52.6, 1335.0], [52.7, 1345.0], [52.8, 1345.0], [52.9, 1345.0], [53.0, 1345.0], [53.1, 1348.0], [53.2, 1348.0], [53.3, 1348.0], [53.4, 1348.0], [53.5, 1348.0], [53.6, 1348.0], [53.7, 1353.0], [53.8, 1353.0], [53.9, 1353.0], [54.0, 1353.0], [54.1, 1364.0], [54.2, 1364.0], [54.3, 1364.0], [54.4, 1366.0], [54.5, 1366.0], [54.6, 1366.0], [54.7, 1386.0], [54.8, 1386.0], [54.9, 1386.0], [55.0, 1386.0], [55.1, 1389.0], [55.2, 1389.0], [55.3, 1389.0], [55.4, 1396.0], [55.5, 1396.0], [55.6, 1396.0], [55.7, 1401.0], [55.8, 1401.0], [55.9, 1401.0], [56.0, 1401.0], [56.1, 1414.0], [56.2, 1414.0], [56.3, 1414.0], [56.4, 1418.0], [56.5, 1418.0], [56.6, 1418.0], [56.7, 1429.0], [56.8, 1429.0], [56.9, 1429.0], [57.0, 1429.0], [57.1, 1432.0], [57.2, 1432.0], [57.3, 1432.0], [57.4, 1459.0], [57.5, 1459.0], [57.6, 1459.0], [57.7, 1461.0], [57.8, 1461.0], [57.9, 1461.0], [58.0, 1461.0], [58.1, 1467.0], [58.2, 1467.0], [58.3, 1467.0], [58.4, 1473.0], [58.5, 1473.0], [58.6, 1473.0], [58.7, 1479.0], [58.8, 1479.0], [58.9, 1479.0], [59.0, 1479.0], [59.1, 1491.0], [59.2, 1491.0], [59.3, 1491.0], [59.4, 1496.0], [59.5, 1496.0], [59.6, 1496.0], [59.7, 1499.0], [59.8, 1499.0], [59.9, 1499.0], [60.0, 1499.0], [60.1, 1503.0], [60.2, 1503.0], [60.3, 1503.0], [60.4, 1508.0], [60.5, 1508.0], [60.6, 1508.0], [60.7, 1511.0], [60.8, 1511.0], [60.9, 1511.0], [61.0, 1511.0], [61.1, 1513.0], [61.2, 1513.0], [61.3, 1513.0], [61.4, 1526.0], [61.5, 1526.0], [61.6, 1526.0], [61.7, 1529.0], [61.8, 1529.0], [61.9, 1529.0], [62.0, 1529.0], [62.1, 1534.0], [62.2, 1534.0], [62.3, 1534.0], [62.4, 1542.0], [62.5, 1542.0], [62.6, 1542.0], [62.7, 1545.0], [62.8, 1545.0], [62.9, 1545.0], [63.0, 1545.0], [63.1, 1545.0], [63.2, 1545.0], [63.3, 1545.0], [63.4, 1552.0], [63.5, 1552.0], [63.6, 1552.0], [63.7, 1585.0], [63.8, 1585.0], [63.9, 1585.0], [64.0, 1585.0], [64.1, 1585.0], [64.2, 1585.0], [64.3, 1585.0], [64.4, 1590.0], [64.5, 1590.0], [64.6, 1590.0], [64.7, 1593.0], [64.8, 1593.0], [64.9, 1593.0], [65.0, 1593.0], [65.1, 1598.0], [65.2, 1598.0], [65.3, 1598.0], [65.4, 1601.0], [65.5, 1601.0], [65.6, 1601.0], [65.7, 1602.0], [65.8, 1602.0], [65.9, 1602.0], [66.0, 1602.0], [66.1, 1608.0], [66.2, 1608.0], [66.3, 1608.0], [66.4, 1612.0], [66.5, 1612.0], [66.6, 1612.0], [66.7, 1614.0], [66.8, 1614.0], [66.9, 1614.0], [67.0, 1614.0], [67.1, 1620.0], [67.2, 1620.0], [67.3, 1620.0], [67.4, 1625.0], [67.5, 1625.0], [67.6, 1625.0], [67.7, 1639.0], [67.8, 1639.0], [67.9, 1639.0], [68.0, 1639.0], [68.1, 1646.0], [68.2, 1646.0], [68.3, 1646.0], [68.4, 1649.0], [68.5, 1649.0], [68.6, 1649.0], [68.7, 1650.0], [68.8, 1650.0], [68.9, 1650.0], [69.0, 1650.0], [69.1, 1658.0], [69.2, 1658.0], [69.3, 1658.0], [69.4, 1664.0], [69.5, 1664.0], [69.6, 1664.0], [69.7, 1673.0], [69.8, 1673.0], [69.9, 1673.0], [70.0, 1673.0], [70.1, 1675.0], [70.2, 1675.0], [70.3, 1675.0], [70.4, 1678.0], [70.5, 1678.0], [70.6, 1678.0], [70.7, 1683.0], [70.8, 1683.0], [70.9, 1683.0], [71.0, 1683.0], [71.1, 1684.0], [71.2, 1684.0], [71.3, 1684.0], [71.4, 1685.0], [71.5, 1685.0], [71.6, 1685.0], [71.7, 1687.0], [71.8, 1687.0], [71.9, 1687.0], [72.0, 1687.0], [72.1, 1692.0], [72.2, 1692.0], [72.3, 1692.0], [72.4, 1692.0], [72.5, 1692.0], [72.6, 1692.0], [72.7, 1697.0], [72.8, 1697.0], [72.9, 1697.0], [73.0, 1697.0], [73.1, 1697.0], [73.2, 1697.0], [73.3, 1697.0], [73.4, 1698.0], [73.5, 1698.0], [73.6, 1698.0], [73.7, 1701.0], [73.8, 1701.0], [73.9, 1701.0], [74.0, 1701.0], [74.1, 1706.0], [74.2, 1706.0], [74.3, 1706.0], [74.4, 1708.0], [74.5, 1708.0], [74.6, 1708.0], [74.7, 1717.0], [74.8, 1717.0], [74.9, 1717.0], [75.0, 1717.0], [75.1, 1722.0], [75.2, 1722.0], [75.3, 1722.0], [75.4, 1730.0], [75.5, 1730.0], [75.6, 1730.0], [75.7, 1734.0], [75.8, 1734.0], [75.9, 1734.0], [76.0, 1734.0], [76.1, 1735.0], [76.2, 1735.0], [76.3, 1735.0], [76.4, 1738.0], [76.5, 1738.0], [76.6, 1738.0], [76.7, 1753.0], [76.8, 1753.0], [76.9, 1753.0], [77.0, 1753.0], [77.1, 1753.0], [77.2, 1753.0], [77.3, 1753.0], [77.4, 1759.0], [77.5, 1759.0], [77.6, 1759.0], [77.7, 1768.0], [77.8, 1768.0], [77.9, 1768.0], [78.0, 1768.0], [78.1, 1770.0], [78.2, 1770.0], [78.3, 1770.0], [78.4, 1776.0], [78.5, 1776.0], [78.6, 1776.0], [78.7, 1780.0], [78.8, 1780.0], [78.9, 1780.0], [79.0, 1788.0], [79.1, 1788.0], [79.2, 1788.0], [79.3, 1788.0], [79.4, 1792.0], [79.5, 1792.0], [79.6, 1792.0], [79.7, 1793.0], [79.8, 1793.0], [79.9, 1793.0], [80.0, 1794.0], [80.1, 1794.0], [80.2, 1794.0], [80.3, 1794.0], [80.4, 1795.0], [80.5, 1795.0], [80.6, 1795.0], [80.7, 1795.0], [80.8, 1795.0], [80.9, 1795.0], [81.0, 1797.0], [81.1, 1797.0], [81.2, 1797.0], [81.3, 1797.0], [81.4, 1798.0], [81.5, 1798.0], [81.6, 1798.0], [81.7, 1801.0], [81.8, 1801.0], [81.9, 1801.0], [82.0, 1806.0], [82.1, 1806.0], [82.2, 1806.0], [82.3, 1806.0], [82.4, 1810.0], [82.5, 1810.0], [82.6, 1810.0], [82.7, 1813.0], [82.8, 1813.0], [82.9, 1813.0], [83.0, 1814.0], [83.1, 1814.0], [83.2, 1814.0], [83.3, 1814.0], [83.4, 1819.0], [83.5, 1819.0], [83.6, 1819.0], [83.7, 1821.0], [83.8, 1821.0], [83.9, 1821.0], [84.0, 1821.0], [84.1, 1821.0], [84.2, 1821.0], [84.3, 1821.0], [84.4, 1822.0], [84.5, 1822.0], [84.6, 1822.0], [84.7, 1822.0], [84.8, 1822.0], [84.9, 1822.0], [85.0, 1822.0], [85.1, 1822.0], [85.2, 1822.0], [85.3, 1822.0], [85.4, 1826.0], [85.5, 1826.0], [85.6, 1826.0], [85.7, 1829.0], [85.8, 1829.0], [85.9, 1829.0], [86.0, 1830.0], [86.1, 1830.0], [86.2, 1830.0], [86.3, 1830.0], [86.4, 1832.0], [86.5, 1832.0], [86.6, 1832.0], [86.7, 1833.0], [86.8, 1833.0], [86.9, 1833.0], [87.0, 1833.0], [87.1, 1833.0], [87.2, 1833.0], [87.3, 1833.0], [87.4, 1833.0], [87.5, 1833.0], [87.6, 1833.0], [87.7, 1835.0], [87.8, 1835.0], [87.9, 1835.0], [88.0, 1840.0], [88.1, 1840.0], [88.2, 1840.0], [88.3, 1840.0], [88.4, 1842.0], [88.5, 1842.0], [88.6, 1842.0], [88.7, 1847.0], [88.8, 1847.0], [88.9, 1847.0], [89.0, 1847.0], [89.1, 1847.0], [89.2, 1847.0], [89.3, 1847.0], [89.4, 1848.0], [89.5, 1848.0], [89.6, 1848.0], [89.7, 1855.0], [89.8, 1855.0], [89.9, 1855.0], [90.0, 1855.0], [90.1, 1855.0], [90.2, 1855.0], [90.3, 1855.0], [90.4, 1866.0], [90.5, 1866.0], [90.6, 1866.0], [90.7, 1866.0], [90.8, 1866.0], [90.9, 1866.0], [91.0, 1869.0], [91.1, 1869.0], [91.2, 1869.0], [91.3, 1869.0], [91.4, 1873.0], [91.5, 1873.0], [91.6, 1873.0], [91.7, 1877.0], [91.8, 1877.0], [91.9, 1877.0], [92.0, 1880.0], [92.1, 1880.0], [92.2, 1880.0], [92.3, 1880.0], [92.4, 1880.0], [92.5, 1880.0], [92.6, 1880.0], [92.7, 1884.0], [92.8, 1884.0], [92.9, 1884.0], [93.0, 1886.0], [93.1, 1886.0], [93.2, 1886.0], [93.3, 1886.0], [93.4, 1889.0], [93.5, 1889.0], [93.6, 1889.0], [93.7, 1902.0], [93.8, 1902.0], [93.9, 1902.0], [94.0, 1912.0], [94.1, 1912.0], [94.2, 1912.0], [94.3, 1912.0], [94.4, 1914.0], [94.5, 1914.0], [94.6, 1914.0], [94.7, 1924.0], [94.8, 1924.0], [94.9, 1924.0], [95.0, 1927.0], [95.1, 1927.0], [95.2, 1927.0], [95.3, 1927.0], [95.4, 1931.0], [95.5, 1931.0], [95.6, 1931.0], [95.7, 1949.0], [95.8, 1949.0], [95.9, 1949.0], [96.0, 1953.0], [96.1, 1953.0], [96.2, 1953.0], [96.3, 1953.0], [96.4, 1956.0], [96.5, 1956.0], [96.6, 1956.0], [96.7, 1957.0], [96.8, 1957.0], [96.9, 1957.0], [97.0, 1984.0], [97.1, 1984.0], [97.2, 1984.0], [97.3, 1984.0], [97.4, 1993.0], [97.5, 1993.0], [97.6, 1993.0], [97.7, 1998.0], [97.8, 1998.0], [97.9, 1998.0], [98.0, 1998.0], [98.1, 1998.0], [98.2, 1998.0], [98.3, 1998.0], [98.4, 2004.0], [98.5, 2004.0], [98.6, 2004.0], [98.7, 2004.0], [98.8, 2004.0], [98.9, 2004.0], [99.0, 2010.0], [99.1, 2010.0], [99.2, 2010.0], [99.3, 2010.0], [99.4, 2038.0], [99.5, 2038.0], [99.6, 2038.0], [99.7, 2040.0], [99.8, 2040.0], [99.9, 2040.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 33.0], [0.1, 33.0], [0.2, 33.0], [0.3, 33.0], [0.4, 34.0], [0.5, 34.0], [0.6, 34.0], [0.7, 46.0], [0.8, 46.0], [0.9, 46.0], [1.0, 49.0], [1.1, 49.0], [1.2, 49.0], [1.3, 49.0], [1.4, 57.0], [1.5, 57.0], [1.6, 57.0], [1.7, 64.0], [1.8, 64.0], [1.9, 64.0], [2.0, 65.0], [2.1, 65.0], [2.2, 65.0], [2.3, 65.0], [2.4, 66.0], [2.5, 66.0], [2.6, 66.0], [2.7, 66.0], [2.8, 66.0], [2.9, 66.0], [3.0, 66.0], [3.1, 66.0], [3.2, 66.0], [3.3, 66.0], [3.4, 70.0], [3.5, 70.0], [3.6, 70.0], [3.7, 78.0], [3.8, 78.0], [3.9, 78.0], [4.0, 78.0], [4.1, 78.0], [4.2, 78.0], [4.3, 78.0], [4.4, 79.0], [4.5, 79.0], [4.6, 79.0], [4.7, 81.0], [4.8, 81.0], [4.9, 81.0], [5.0, 83.0], [5.1, 83.0], [5.2, 83.0], [5.3, 83.0], [5.4, 84.0], [5.5, 84.0], [5.6, 84.0], [5.7, 84.0], [5.8, 84.0], [5.9, 84.0], [6.0, 87.0], [6.1, 87.0], [6.2, 87.0], [6.3, 87.0], [6.4, 87.0], [6.5, 87.0], [6.6, 87.0], [6.7, 92.0], [6.8, 92.0], [6.9, 92.0], [7.0, 93.0], [7.1, 93.0], [7.2, 93.0], [7.3, 93.0], [7.4, 96.0], [7.5, 96.0], [7.6, 96.0], [7.7, 97.0], [7.8, 97.0], [7.9, 97.0], [8.0, 105.0], [8.1, 105.0], [8.2, 105.0], [8.3, 105.0], [8.4, 105.0], [8.5, 105.0], [8.6, 105.0], [8.7, 106.0], [8.8, 106.0], [8.9, 106.0], [9.0, 110.0], [9.1, 110.0], [9.2, 110.0], [9.3, 110.0], [9.4, 111.0], [9.5, 111.0], [9.6, 111.0], [9.7, 111.0], [9.8, 111.0], [9.9, 111.0], [10.0, 111.0], [10.1, 111.0], [10.2, 111.0], [10.3, 111.0], [10.4, 112.0], [10.5, 112.0], [10.6, 112.0], [10.7, 113.0], [10.8, 113.0], [10.9, 113.0], [11.0, 114.0], [11.1, 114.0], [11.2, 114.0], [11.3, 114.0], [11.4, 114.0], [11.5, 114.0], [11.6, 114.0], [11.7, 115.0], [11.8, 115.0], [11.9, 115.0], [12.0, 115.0], [12.1, 115.0], [12.2, 115.0], [12.3, 115.0], [12.4, 115.0], [12.5, 115.0], [12.6, 115.0], [12.7, 118.0], [12.8, 118.0], [12.9, 118.0], [13.0, 119.0], [13.1, 119.0], [13.2, 119.0], [13.3, 119.0], [13.4, 120.0], [13.5, 120.0], [13.6, 120.0], [13.7, 126.0], [13.8, 126.0], [13.9, 126.0], [14.0, 126.0], [14.1, 127.0], [14.2, 127.0], [14.3, 127.0], [14.4, 127.0], [14.5, 127.0], [14.6, 127.0], [14.7, 130.0], [14.8, 130.0], [14.9, 130.0], [15.0, 130.0], [15.1, 130.0], [15.2, 130.0], [15.3, 130.0], [15.4, 131.0], [15.5, 131.0], [15.6, 131.0], [15.7, 132.0], [15.8, 132.0], [15.9, 132.0], [16.0, 132.0], [16.1, 132.0], [16.2, 132.0], [16.3, 132.0], [16.4, 135.0], [16.5, 135.0], [16.6, 135.0], [16.7, 137.0], [16.8, 137.0], [16.9, 137.0], [17.0, 138.0], [17.1, 138.0], [17.2, 138.0], [17.3, 138.0], [17.4, 140.0], [17.5, 140.0], [17.6, 140.0], [17.7, 141.0], [17.8, 141.0], [17.9, 141.0], [18.0, 142.0], [18.1, 142.0], [18.2, 142.0], [18.3, 142.0], [18.4, 143.0], [18.5, 143.0], [18.6, 143.0], [18.7, 145.0], [18.8, 145.0], [18.9, 145.0], [19.0, 146.0], [19.1, 146.0], [19.2, 146.0], [19.3, 146.0], [19.4, 148.0], [19.5, 148.0], [19.6, 148.0], [19.7, 150.0], [19.8, 150.0], [19.9, 150.0], [20.0, 151.0], [20.1, 151.0], [20.2, 151.0], [20.3, 151.0], [20.4, 152.0], [20.5, 152.0], [20.6, 152.0], [20.7, 152.0], [20.8, 152.0], [20.9, 152.0], [21.0, 152.0], [21.1, 152.0], [21.2, 152.0], [21.3, 152.0], [21.4, 153.0], [21.5, 153.0], [21.6, 153.0], [21.7, 154.0], [21.8, 154.0], [21.9, 154.0], [22.0, 155.0], [22.1, 155.0], [22.2, 155.0], [22.3, 155.0], [22.4, 158.0], [22.5, 158.0], [22.6, 158.0], [22.7, 161.0], [22.8, 161.0], [22.9, 161.0], [23.0, 163.0], [23.1, 163.0], [23.2, 163.0], [23.3, 163.0], [23.4, 164.0], [23.5, 164.0], [23.6, 164.0], [23.7, 170.0], [23.8, 170.0], [23.9, 170.0], [24.0, 175.0], [24.1, 175.0], [24.2, 175.0], [24.3, 175.0], [24.4, 176.0], [24.5, 176.0], [24.6, 176.0], [24.7, 176.0], [24.8, 176.0], [24.9, 176.0], [25.0, 177.0], [25.1, 177.0], [25.2, 177.0], [25.3, 177.0], [25.4, 178.0], [25.5, 178.0], [25.6, 178.0], [25.7, 178.0], [25.8, 178.0], [25.9, 178.0], [26.0, 179.0], [26.1, 179.0], [26.2, 179.0], [26.3, 179.0], [26.4, 179.0], [26.5, 179.0], [26.6, 179.0], [26.7, 179.0], [26.8, 179.0], [26.9, 179.0], [27.0, 182.0], [27.1, 182.0], [27.2, 182.0], [27.3, 182.0], [27.4, 182.0], [27.5, 182.0], [27.6, 182.0], [27.7, 185.0], [27.8, 185.0], [27.9, 185.0], [28.0, 185.0], [28.1, 185.0], [28.2, 185.0], [28.3, 185.0], [28.4, 189.0], [28.5, 189.0], [28.6, 189.0], [28.7, 192.0], [28.8, 192.0], [28.9, 192.0], [29.0, 196.0], [29.1, 196.0], [29.2, 196.0], [29.3, 196.0], [29.4, 200.0], [29.5, 200.0], [29.6, 200.0], [29.7, 201.0], [29.8, 201.0], [29.9, 201.0], [30.0, 203.0], [30.1, 203.0], [30.2, 203.0], [30.3, 203.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 207.0], [30.8, 207.0], [30.9, 207.0], [31.0, 208.0], [31.1, 208.0], [31.2, 208.0], [31.3, 208.0], [31.4, 209.0], [31.5, 209.0], [31.6, 209.0], [31.7, 210.0], [31.8, 210.0], [31.9, 210.0], [32.0, 216.0], [32.1, 216.0], [32.2, 216.0], [32.3, 216.0], [32.4, 217.0], [32.5, 217.0], [32.6, 217.0], [32.7, 217.0], [32.8, 217.0], [32.9, 217.0], [33.0, 221.0], [33.1, 221.0], [33.2, 221.0], [33.3, 221.0], [33.4, 224.0], [33.5, 224.0], [33.6, 224.0], [33.7, 226.0], [33.8, 226.0], [33.9, 226.0], [34.0, 229.0], [34.1, 229.0], [34.2, 229.0], [34.3, 229.0], [34.4, 231.0], [34.5, 231.0], [34.6, 231.0], [34.7, 234.0], [34.8, 234.0], [34.9, 234.0], [35.0, 234.0], [35.1, 234.0], [35.2, 234.0], [35.3, 234.0], [35.4, 240.0], [35.5, 240.0], [35.6, 240.0], [35.7, 243.0], [35.8, 243.0], [35.9, 243.0], [36.0, 243.0], [36.1, 243.0], [36.2, 243.0], [36.3, 243.0], [36.4, 251.0], [36.5, 251.0], [36.6, 251.0], [36.7, 256.0], [36.8, 256.0], [36.9, 256.0], [37.0, 260.0], [37.1, 260.0], [37.2, 260.0], [37.3, 260.0], [37.4, 262.0], [37.5, 262.0], [37.6, 262.0], [37.7, 263.0], [37.8, 263.0], [37.9, 263.0], [38.0, 269.0], [38.1, 269.0], [38.2, 269.0], [38.3, 269.0], [38.4, 273.0], [38.5, 273.0], [38.6, 273.0], [38.7, 275.0], [38.8, 275.0], [38.9, 275.0], [39.0, 284.0], [39.1, 284.0], [39.2, 284.0], [39.3, 284.0], [39.4, 291.0], [39.5, 291.0], [39.6, 291.0], [39.7, 293.0], [39.8, 293.0], [39.9, 293.0], [40.0, 294.0], [40.1, 294.0], [40.2, 294.0], [40.3, 294.0], [40.4, 298.0], [40.5, 298.0], [40.6, 298.0], [40.7, 301.0], [40.8, 301.0], [40.9, 301.0], [41.0, 301.0], [41.1, 302.0], [41.2, 302.0], [41.3, 302.0], [41.4, 303.0], [41.5, 303.0], [41.6, 303.0], [41.7, 306.0], [41.8, 306.0], [41.9, 306.0], [42.0, 306.0], [42.1, 306.0], [42.2, 306.0], [42.3, 306.0], [42.4, 310.0], [42.5, 310.0], [42.6, 310.0], [42.7, 321.0], [42.8, 321.0], [42.9, 321.0], [43.0, 321.0], [43.1, 322.0], [43.2, 322.0], [43.3, 322.0], [43.4, 323.0], [43.5, 323.0], [43.6, 323.0], [43.7, 324.0], [43.8, 324.0], [43.9, 324.0], [44.0, 324.0], [44.1, 329.0], [44.2, 329.0], [44.3, 329.0], [44.4, 332.0], [44.5, 332.0], [44.6, 332.0], [44.7, 336.0], [44.8, 336.0], [44.9, 336.0], [45.0, 336.0], [45.1, 341.0], [45.2, 341.0], [45.3, 341.0], [45.4, 342.0], [45.5, 342.0], [45.6, 342.0], [45.7, 344.0], [45.8, 344.0], [45.9, 344.0], [46.0, 344.0], [46.1, 345.0], [46.2, 345.0], [46.3, 345.0], [46.4, 347.0], [46.5, 347.0], [46.6, 347.0], [46.7, 347.0], [46.8, 347.0], [46.9, 347.0], [47.0, 347.0], [47.1, 347.0], [47.2, 347.0], [47.3, 347.0], [47.4, 350.0], [47.5, 350.0], [47.6, 350.0], [47.7, 353.0], [47.8, 353.0], [47.9, 353.0], [48.0, 353.0], [48.1, 354.0], [48.2, 354.0], [48.3, 354.0], [48.4, 359.0], [48.5, 359.0], [48.6, 359.0], [48.7, 359.0], [48.8, 359.0], [48.9, 359.0], [49.0, 359.0], [49.1, 359.0], [49.2, 359.0], [49.3, 359.0], [49.4, 361.0], [49.5, 361.0], [49.6, 361.0], [49.7, 362.0], [49.8, 362.0], [49.9, 362.0], [50.0, 362.0], [50.1, 364.0], [50.2, 364.0], [50.3, 364.0], [50.4, 364.0], [50.5, 364.0], [50.6, 364.0], [50.7, 368.0], [50.8, 368.0], [50.9, 368.0], [51.0, 368.0], [51.1, 371.0], [51.2, 371.0], [51.3, 371.0], [51.4, 371.0], [51.5, 371.0], [51.6, 371.0], [51.7, 372.0], [51.8, 372.0], [51.9, 372.0], [52.0, 372.0], [52.1, 372.0], [52.2, 372.0], [52.3, 372.0], [52.4, 374.0], [52.5, 374.0], [52.6, 374.0], [52.7, 376.0], [52.8, 376.0], [52.9, 376.0], [53.0, 376.0], [53.1, 379.0], [53.2, 379.0], [53.3, 379.0], [53.4, 383.0], [53.5, 383.0], [53.6, 383.0], [53.7, 389.0], [53.8, 389.0], [53.9, 389.0], [54.0, 389.0], [54.1, 400.0], [54.2, 400.0], [54.3, 400.0], [54.4, 402.0], [54.5, 402.0], [54.6, 402.0], [54.7, 410.0], [54.8, 410.0], [54.9, 410.0], [55.0, 410.0], [55.1, 417.0], [55.2, 417.0], [55.3, 417.0], [55.4, 418.0], [55.5, 418.0], [55.6, 418.0], [55.7, 420.0], [55.8, 420.0], [55.9, 420.0], [56.0, 420.0], [56.1, 425.0], [56.2, 425.0], [56.3, 425.0], [56.4, 425.0], [56.5, 425.0], [56.6, 425.0], [56.7, 429.0], [56.8, 429.0], [56.9, 429.0], [57.0, 429.0], [57.1, 432.0], [57.2, 432.0], [57.3, 432.0], [57.4, 432.0], [57.5, 432.0], [57.6, 432.0], [57.7, 434.0], [57.8, 434.0], [57.9, 434.0], [58.0, 434.0], [58.1, 437.0], [58.2, 437.0], [58.3, 437.0], [58.4, 438.0], [58.5, 438.0], [58.6, 438.0], [58.7, 438.0], [58.8, 438.0], [58.9, 438.0], [59.0, 438.0], [59.1, 441.0], [59.2, 441.0], [59.3, 441.0], [59.4, 442.0], [59.5, 442.0], [59.6, 442.0], [59.7, 444.0], [59.8, 444.0], [59.9, 444.0], [60.0, 444.0], [60.1, 445.0], [60.2, 445.0], [60.3, 445.0], [60.4, 446.0], [60.5, 446.0], [60.6, 446.0], [60.7, 447.0], [60.8, 447.0], [60.9, 447.0], [61.0, 447.0], [61.1, 452.0], [61.2, 452.0], [61.3, 452.0], [61.4, 454.0], [61.5, 454.0], [61.6, 454.0], [61.7, 458.0], [61.8, 458.0], [61.9, 458.0], [62.0, 458.0], [62.1, 466.0], [62.2, 466.0], [62.3, 466.0], [62.4, 468.0], [62.5, 468.0], [62.6, 468.0], [62.7, 469.0], [62.8, 469.0], [62.9, 469.0], [63.0, 469.0], [63.1, 470.0], [63.2, 470.0], [63.3, 470.0], [63.4, 470.0], [63.5, 470.0], [63.6, 470.0], [63.7, 471.0], [63.8, 471.0], [63.9, 471.0], [64.0, 471.0], [64.1, 478.0], [64.2, 478.0], [64.3, 478.0], [64.4, 479.0], [64.5, 479.0], [64.6, 479.0], [64.7, 479.0], [64.8, 479.0], [64.9, 479.0], [65.0, 479.0], [65.1, 479.0], [65.2, 479.0], [65.3, 479.0], [65.4, 479.0], [65.5, 479.0], [65.6, 479.0], [65.7, 480.0], [65.8, 480.0], [65.9, 480.0], [66.0, 480.0], [66.1, 481.0], [66.2, 481.0], [66.3, 481.0], [66.4, 482.0], [66.5, 482.0], [66.6, 482.0], [66.7, 485.0], [66.8, 485.0], [66.9, 485.0], [67.0, 485.0], [67.1, 485.0], [67.2, 485.0], [67.3, 485.0], [67.4, 486.0], [67.5, 486.0], [67.6, 486.0], [67.7, 487.0], [67.8, 487.0], [67.9, 487.0], [68.0, 487.0], [68.1, 488.0], [68.2, 488.0], [68.3, 488.0], [68.4, 491.0], [68.5, 491.0], [68.6, 491.0], [68.7, 492.0], [68.8, 492.0], [68.9, 492.0], [69.0, 492.0], [69.1, 494.0], [69.2, 494.0], [69.3, 494.0], [69.4, 494.0], [69.5, 494.0], [69.6, 494.0], [69.7, 494.0], [69.8, 494.0], [69.9, 494.0], [70.0, 494.0], [70.1, 499.0], [70.2, 499.0], [70.3, 499.0], [70.4, 500.0], [70.5, 500.0], [70.6, 500.0], [70.7, 501.0], [70.8, 501.0], [70.9, 501.0], [71.0, 501.0], [71.1, 504.0], [71.2, 504.0], [71.3, 504.0], [71.4, 506.0], [71.5, 506.0], [71.6, 506.0], [71.7, 507.0], [71.8, 507.0], [71.9, 507.0], [72.0, 507.0], [72.1, 508.0], [72.2, 508.0], [72.3, 508.0], [72.4, 510.0], [72.5, 510.0], [72.6, 510.0], [72.7, 512.0], [72.8, 512.0], [72.9, 512.0], [73.0, 512.0], [73.1, 512.0], [73.2, 512.0], [73.3, 512.0], [73.4, 513.0], [73.5, 513.0], [73.6, 513.0], [73.7, 514.0], [73.8, 514.0], [73.9, 514.0], [74.0, 514.0], [74.1, 520.0], [74.2, 520.0], [74.3, 520.0], [74.4, 520.0], [74.5, 520.0], [74.6, 520.0], [74.7, 522.0], [74.8, 522.0], [74.9, 522.0], [75.0, 522.0], [75.1, 528.0], [75.2, 528.0], [75.3, 528.0], [75.4, 528.0], [75.5, 528.0], [75.6, 528.0], [75.7, 531.0], [75.8, 531.0], [75.9, 531.0], [76.0, 531.0], [76.1, 531.0], [76.2, 531.0], [76.3, 531.0], [76.4, 531.0], [76.5, 531.0], [76.6, 531.0], [76.7, 534.0], [76.8, 534.0], [76.9, 534.0], [77.0, 534.0], [77.1, 535.0], [77.2, 535.0], [77.3, 535.0], [77.4, 539.0], [77.5, 539.0], [77.6, 539.0], [77.7, 546.0], [77.8, 546.0], [77.9, 546.0], [78.0, 550.0], [78.1, 550.0], [78.2, 550.0], [78.3, 550.0], [78.4, 551.0], [78.5, 551.0], [78.6, 551.0], [78.7, 551.0], [78.8, 551.0], [78.9, 551.0], [79.0, 552.0], [79.1, 552.0], [79.2, 552.0], [79.3, 552.0], [79.4, 556.0], [79.5, 556.0], [79.6, 556.0], [79.7, 556.0], [79.8, 556.0], [79.9, 556.0], [80.0, 567.0], [80.1, 567.0], [80.2, 567.0], [80.3, 567.0], [80.4, 570.0], [80.5, 570.0], [80.6, 570.0], [80.7, 573.0], [80.8, 573.0], [80.9, 573.0], [81.0, 581.0], [81.1, 581.0], [81.2, 581.0], [81.3, 581.0], [81.4, 600.0], [81.5, 600.0], [81.6, 600.0], [81.7, 600.0], [81.8, 600.0], [81.9, 600.0], [82.0, 612.0], [82.1, 612.0], [82.2, 612.0], [82.3, 612.0], [82.4, 620.0], [82.5, 620.0], [82.6, 620.0], [82.7, 621.0], [82.8, 621.0], [82.9, 621.0], [83.0, 627.0], [83.1, 627.0], [83.2, 627.0], [83.3, 627.0], [83.4, 631.0], [83.5, 631.0], [83.6, 631.0], [83.7, 637.0], [83.8, 637.0], [83.9, 637.0], [84.0, 637.0], [84.1, 637.0], [84.2, 637.0], [84.3, 637.0], [84.4, 640.0], [84.5, 640.0], [84.6, 640.0], [84.7, 641.0], [84.8, 641.0], [84.9, 641.0], [85.0, 646.0], [85.1, 646.0], [85.2, 646.0], [85.3, 646.0], [85.4, 653.0], [85.5, 653.0], [85.6, 653.0], [85.7, 664.0], [85.8, 664.0], [85.9, 664.0], [86.0, 669.0], [86.1, 669.0], [86.2, 669.0], [86.3, 669.0], [86.4, 674.0], [86.5, 674.0], [86.6, 674.0], [86.7, 678.0], [86.8, 678.0], [86.9, 678.0], [87.0, 680.0], [87.1, 680.0], [87.2, 680.0], [87.3, 680.0], [87.4, 681.0], [87.5, 681.0], [87.6, 681.0], [87.7, 682.0], [87.8, 682.0], [87.9, 682.0], [88.0, 687.0], [88.1, 687.0], [88.2, 687.0], [88.3, 687.0], [88.4, 691.0], [88.5, 691.0], [88.6, 691.0], [88.7, 697.0], [88.8, 697.0], [88.9, 697.0], [89.0, 719.0], [89.1, 719.0], [89.2, 719.0], [89.3, 719.0], [89.4, 730.0], [89.5, 730.0], [89.6, 730.0], [89.7, 731.0], [89.8, 731.0], [89.9, 731.0], [90.0, 734.0], [90.1, 734.0], [90.2, 734.0], [90.3, 734.0], [90.4, 739.0], [90.5, 739.0], [90.6, 739.0], [90.7, 739.0], [90.8, 739.0], [90.9, 739.0], [91.0, 747.0], [91.1, 747.0], [91.2, 747.0], [91.3, 747.0], [91.4, 748.0], [91.5, 748.0], [91.6, 748.0], [91.7, 758.0], [91.8, 758.0], [91.9, 758.0], [92.0, 761.0], [92.1, 761.0], [92.2, 761.0], [92.3, 761.0], [92.4, 765.0], [92.5, 765.0], [92.6, 765.0], [92.7, 780.0], [92.8, 780.0], [92.9, 780.0], [93.0, 789.0], [93.1, 789.0], [93.2, 789.0], [93.3, 789.0], [93.4, 790.0], [93.5, 790.0], [93.6, 790.0], [93.7, 792.0], [93.8, 792.0], [93.9, 792.0], [94.0, 795.0], [94.1, 795.0], [94.2, 795.0], [94.3, 795.0], [94.4, 795.0], [94.5, 795.0], [94.6, 795.0], [94.7, 796.0], [94.8, 796.0], [94.9, 796.0], [95.0, 798.0], [95.1, 798.0], [95.2, 798.0], [95.3, 798.0], [95.4, 802.0], [95.5, 802.0], [95.6, 802.0], [95.7, 804.0], [95.8, 804.0], [95.9, 804.0], [96.0, 854.0], [96.1, 854.0], [96.2, 854.0], [96.3, 854.0], [96.4, 866.0], [96.5, 866.0], [96.6, 866.0], [96.7, 885.0], [96.8, 885.0], [96.9, 885.0], [97.0, 887.0], [97.1, 887.0], [97.2, 887.0], [97.3, 887.0], [97.4, 890.0], [97.5, 890.0], [97.6, 890.0], [97.7, 913.0], [97.8, 913.0], [97.9, 913.0], [98.0, 928.0], [98.1, 928.0], [98.2, 928.0], [98.3, 928.0], [98.4, 946.0], [98.5, 946.0], [98.6, 946.0], [98.7, 1003.0], [98.8, 1003.0], [98.9, 1003.0], [99.0, 1079.0], [99.1, 1079.0], [99.2, 1079.0], [99.3, 1079.0], [99.4, 1080.0], [99.5, 1080.0], [99.6, 1080.0], [99.7, 1340.0], [99.8, 1340.0], [99.9, 1340.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 64.0, "series": [{"data": [[0.0, 50.0], [600.0, 30.0], [700.0, 6.0], [200.0, 31.0], [800.0, 12.0], [900.0, 19.0], [1000.0, 16.0], [300.0, 34.0], [1200.0, 7.0], [1300.0, 8.0], [100.0, 60.0], [400.0, 7.0], [500.0, 20.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 1.0], [600.0, 7.0], [700.0, 12.0], [800.0, 2.0], [200.0, 35.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 8.0], [1200.0, 8.0], [300.0, 16.0], [1300.0, 12.0], [1400.0, 13.0], [1500.0, 16.0], [400.0, 8.0], [1600.0, 25.0], [100.0, 32.0], [1700.0, 24.0], [1800.0, 36.0], [1900.0, 14.0], [500.0, 15.0], [2000.0, 5.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 24.0], [300.0, 40.0], [600.0, 23.0], [1300.0, 1.0], [700.0, 19.0], [200.0, 34.0], [100.0, 64.0], [400.0, 49.0], [800.0, 7.0], [900.0, 3.0], [500.0, 33.0], [1000.0, 3.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 486.0, "series": [{"data": [[0.0, 486.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 294.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 120.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 145.56444444444432, "minX": 1.73039688E12, "maxY": 145.56444444444432, "series": [{"data": [[1.73039688E12, 145.56444444444432]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039688E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.0, "minX": 2.0, "maxY": 1712.8181818181818, "series": [{"data": [[2.0, 37.0], [3.0, 78.0], [5.0, 104.0], [6.0, 107.0], [7.0, 110.0], [8.0, 86.0], [10.0, 101.0], [12.0, 102.5], [13.0, 169.0], [14.0, 115.0], [15.0, 195.0], [16.0, 115.5], [17.0, 70.0], [18.0, 299.1666666666667], [19.0, 173.55555555555554], [20.0, 66.0], [21.0, 159.8], [22.0, 294.0], [23.0, 89.5], [24.0, 99.0], [25.0, 132.5], [26.0, 106.0], [27.0, 121.5], [28.0, 136.66666666666666], [30.0, 121.33333333333333], [31.0, 138.44444444444446], [33.0, 120.66666666666667], [32.0, 119.33333333333333], [34.0, 145.0], [35.0, 178.0], [37.0, 208.0], [36.0, 139.0], [39.0, 187.5], [38.0, 193.0], [40.0, 181.0], [43.0, 261.0], [45.0, 242.0], [44.0, 246.0], [47.0, 213.0], [46.0, 242.0], [49.0, 222.0], [48.0, 198.0], [50.0, 210.5], [52.0, 141.6], [53.0, 213.5], [55.0, 78.0], [54.0, 126.66666666666666], [56.0, 141.75], [57.0, 80.5], [58.0, 74.0], [85.0, 85.0], [90.0, 66.0], [89.0, 84.0], [92.0, 124.0], [96.0, 179.0], [102.0, 61.0], [100.0, 94.0], [105.0, 109.33333333333333], [106.0, 166.0], [118.0, 212.0], [133.0, 153.0], [138.0, 146.0], [146.0, 97.0], [156.0, 96.0], [152.0, 80.0], [167.0, 71.0], [161.0, 99.0], [186.0, 1047.0], [199.0, 437.1666666666667], [198.0, 883.3913043478261], [200.0, 460.2708333333332], [204.0, 402.5], [206.0, 348.25], [205.0, 352.0], [203.0, 428.2], [202.0, 417.0], [201.0, 391.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[128.1100000000001, 445.8966666666667]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[12.0, 272.0], [14.0, 161.0], [15.0, 151.66666666666666], [16.0, 632.0], [17.0, 374.5], [18.0, 588.0], [20.0, 144.0], [21.0, 398.0], [22.0, 399.0], [25.0, 165.0], [26.0, 292.0], [27.0, 185.0], [30.0, 260.5], [31.0, 297.0], [32.0, 181.6], [33.0, 196.5], [34.0, 192.0], [35.0, 224.5], [36.0, 206.0], [37.0, 156.0], [38.0, 243.33333333333334], [39.0, 213.7777777777778], [48.0, 333.0], [106.0, 220.0], [108.0, 229.33333333333334], [133.0, 218.0], [131.0, 255.0], [135.0, 155.0], [156.0, 752.0], [155.0, 796.0], [154.0, 145.0], [152.0, 169.0], [161.0, 733.0], [188.0, 1117.1874999999998], [189.0, 1042.7692307692307], [190.0, 1394.7142857142858], [192.0, 797.0], [194.0, 1042.6666666666667], [195.0, 1559.0], [196.0, 1296.0], [197.0, 1418.7894736842106], [198.0, 1153.826086956522], [199.0, 1522.392857142857], [200.0, 1340.0], [202.0, 1602.6], [203.0, 1598.2352941176464], [201.0, 1438.7500000000002], [204.0, 1712.8181818181818], [205.0, 481.5], [206.0, 487.5]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[156.81666666666666, 1081.3266666666668]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[8.0, 105.0], [10.0, 93.0], [12.0, 168.5], [16.0, 650.5], [17.0, 87.5], [18.0, 169.33333333333331], [20.0, 68.0], [21.0, 86.33333333333333], [22.0, 268.2], [23.0, 106.0], [24.0, 111.0], [25.0, 111.5], [27.0, 212.0], [28.0, 113.0], [29.0, 57.0], [30.0, 131.66666666666666], [32.0, 121.0], [35.0, 158.0], [34.0, 145.0], [37.0, 137.66666666666666], [36.0, 137.0], [39.0, 178.68421052631584], [43.0, 263.0], [45.0, 241.5], [56.0, 87.0], [91.0, 110.0], [99.0, 83.0], [106.0, 220.33333333333334], [105.0, 151.2], [108.0, 189.0], [133.0, 175.75], [149.0, 119.0], [155.0, 113.0], [154.0, 65.0], [163.0, 78.0], [161.0, 78.0], [168.0, 87.0], [189.0, 33.0], [190.0, 34.0], [194.0, 92.0], [199.0, 337.75], [198.0, 764.4444444444445], [197.0, 269.0], [200.0, 610.2564102564103], [202.0, 448.16666666666663], [201.0, 486.0], [203.0, 528.375], [204.0, 338.2307692307692], [205.0, 461.7], [206.0, 367.47999999999996]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[151.7666666666667, 386.1333333333332]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 206.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.73039688E12, "maxY": 9330.0, "series": [{"data": [[1.73039688E12, 9330.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73039688E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039688E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 386.1333333333332, "minX": 1.73039688E12, "maxY": 1081.3266666666668, "series": [{"data": [[1.73039688E12, 445.8966666666667]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039688E12, 1081.3266666666668]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039688E12, 386.1333333333332]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039688E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 384.79333333333335, "minX": 1.73039688E12, "maxY": 938.7133333333347, "series": [{"data": [[1.73039688E12, 445.47333333333324]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039688E12, 938.7133333333347]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039688E12, 384.79333333333335]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039688E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73039688E12, "maxY": 264.9433333333334, "series": [{"data": [[1.73039688E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039688E12, 264.9433333333334]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039688E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039688E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.73039688E12, "maxY": 2040.0, "series": [{"data": [[1.73039688E12, 2040.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73039688E12, 1674.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73039688E12, 1983.7300000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73039688E12, 1822.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73039688E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73039688E12, 446.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039688E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 145.0, "minX": 79.0, "maxY": 1392.5, "series": [{"data": [[258.0, 1392.5], [129.0, 145.0], [79.0, 161.0], [214.0, 462.5], [220.0, 512.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 258.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 145.0, "minX": 79.0, "maxY": 1208.0, "series": [{"data": [[258.0, 1208.0], [129.0, 145.0], [79.0, 161.0], [214.0, 462.0], [220.0, 512.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 258.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9666666666666666, "minX": 1.73039682E12, "maxY": 13.033333333333333, "series": [{"data": [[1.73039682E12, 1.9666666666666666], [1.73039688E12, 13.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039688E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039688E12, "maxY": 15.0, "series": [{"data": [[1.73039688E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039688E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039688E12, "maxY": 5.0, "series": [{"data": [[1.73039688E12, 5.0]], "isOverall": false, "label": "Home Request-success", "isController": false}, {"data": [[1.73039688E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.73039688E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039688E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039688E12, "maxY": 15.0, "series": [{"data": [[1.73039688E12, 15.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039688E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

