/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 3090.0, "series": [{"data": [[0.0, 45.0], [0.1, 45.0], [0.2, 45.0], [0.3, 45.0], [0.4, 46.0], [0.5, 46.0], [0.6, 46.0], [0.7, 50.0], [0.8, 50.0], [0.9, 50.0], [1.0, 53.0], [1.1, 53.0], [1.2, 53.0], [1.3, 53.0], [1.4, 53.0], [1.5, 53.0], [1.6, 53.0], [1.7, 55.0], [1.8, 55.0], [1.9, 55.0], [2.0, 82.0], [2.1, 82.0], [2.2, 82.0], [2.3, 82.0], [2.4, 83.0], [2.5, 83.0], [2.6, 83.0], [2.7, 84.0], [2.8, 84.0], [2.9, 84.0], [3.0, 86.0], [3.1, 86.0], [3.2, 86.0], [3.3, 86.0], [3.4, 96.0], [3.5, 96.0], [3.6, 96.0], [3.7, 96.0], [3.8, 96.0], [3.9, 96.0], [4.0, 99.0], [4.1, 99.0], [4.2, 99.0], [4.3, 99.0], [4.4, 101.0], [4.5, 101.0], [4.6, 101.0], [4.7, 101.0], [4.8, 101.0], [4.9, 101.0], [5.0, 106.0], [5.1, 106.0], [5.2, 106.0], [5.3, 106.0], [5.4, 106.0], [5.5, 106.0], [5.6, 106.0], [5.7, 109.0], [5.8, 109.0], [5.9, 109.0], [6.0, 115.0], [6.1, 115.0], [6.2, 115.0], [6.3, 115.0], [6.4, 116.0], [6.5, 116.0], [6.6, 116.0], [6.7, 119.0], [6.8, 119.0], [6.9, 119.0], [7.0, 121.0], [7.1, 121.0], [7.2, 121.0], [7.3, 121.0], [7.4, 123.0], [7.5, 123.0], [7.6, 123.0], [7.7, 128.0], [7.8, 128.0], [7.9, 128.0], [8.0, 130.0], [8.1, 130.0], [8.2, 130.0], [8.3, 130.0], [8.4, 131.0], [8.5, 131.0], [8.6, 131.0], [8.7, 133.0], [8.8, 133.0], [8.9, 133.0], [9.0, 134.0], [9.1, 134.0], [9.2, 134.0], [9.3, 134.0], [9.4, 135.0], [9.5, 135.0], [9.6, 135.0], [9.7, 135.0], [9.8, 135.0], [9.9, 135.0], [10.0, 135.0], [10.1, 135.0], [10.2, 135.0], [10.3, 135.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 138.0], [10.8, 138.0], [10.9, 138.0], [11.0, 138.0], [11.1, 139.0], [11.2, 139.0], [11.3, 139.0], [11.4, 139.0], [11.5, 139.0], [11.6, 139.0], [11.7, 140.0], [11.8, 140.0], [11.9, 140.0], [12.0, 140.0], [12.1, 140.0], [12.2, 140.0], [12.3, 140.0], [12.4, 142.0], [12.5, 142.0], [12.6, 142.0], [12.7, 146.0], [12.8, 146.0], [12.9, 146.0], [13.0, 146.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 148.0], [13.5, 148.0], [13.6, 148.0], [13.7, 149.0], [13.8, 149.0], [13.9, 149.0], [14.0, 149.0], [14.1, 152.0], [14.2, 152.0], [14.3, 152.0], [14.4, 153.0], [14.5, 153.0], [14.6, 153.0], [14.7, 154.0], [14.8, 154.0], [14.9, 154.0], [15.0, 154.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 156.0], [15.5, 156.0], [15.6, 156.0], [15.7, 158.0], [15.8, 158.0], [15.9, 158.0], [16.0, 158.0], [16.1, 160.0], [16.2, 160.0], [16.3, 160.0], [16.4, 160.0], [16.5, 160.0], [16.6, 160.0], [16.7, 162.0], [16.8, 162.0], [16.9, 162.0], [17.0, 162.0], [17.1, 163.0], [17.2, 163.0], [17.3, 163.0], [17.4, 163.0], [17.5, 163.0], [17.6, 163.0], [17.7, 164.0], [17.8, 164.0], [17.9, 164.0], [18.0, 164.0], [18.1, 165.0], [18.2, 165.0], [18.3, 165.0], [18.4, 165.0], [18.5, 165.0], [18.6, 165.0], [18.7, 167.0], [18.8, 167.0], [18.9, 167.0], [19.0, 167.0], [19.1, 167.0], [19.2, 167.0], [19.3, 167.0], [19.4, 168.0], [19.5, 168.0], [19.6, 168.0], [19.7, 168.0], [19.8, 168.0], [19.9, 168.0], [20.0, 168.0], [20.1, 169.0], [20.2, 169.0], [20.3, 169.0], [20.4, 171.0], [20.5, 171.0], [20.6, 171.0], [20.7, 171.0], [20.8, 171.0], [20.9, 171.0], [21.0, 171.0], [21.1, 171.0], [21.2, 171.0], [21.3, 171.0], [21.4, 172.0], [21.5, 172.0], [21.6, 172.0], [21.7, 172.0], [21.8, 172.0], [21.9, 172.0], [22.0, 172.0], [22.1, 173.0], [22.2, 173.0], [22.3, 173.0], [22.4, 174.0], [22.5, 174.0], [22.6, 174.0], [22.7, 175.0], [22.8, 175.0], [22.9, 175.0], [23.0, 175.0], [23.1, 176.0], [23.2, 176.0], [23.3, 176.0], [23.4, 176.0], [23.5, 176.0], [23.6, 176.0], [23.7, 178.0], [23.8, 178.0], [23.9, 178.0], [24.0, 178.0], [24.1, 182.0], [24.2, 182.0], [24.3, 182.0], [24.4, 185.0], [24.5, 185.0], [24.6, 185.0], [24.7, 187.0], [24.8, 187.0], [24.9, 187.0], [25.0, 188.0], [25.1, 188.0], [25.2, 188.0], [25.3, 188.0], [25.4, 190.0], [25.5, 190.0], [25.6, 190.0], [25.7, 191.0], [25.8, 191.0], [25.9, 191.0], [26.0, 191.0], [26.1, 191.0], [26.2, 191.0], [26.3, 191.0], [26.4, 192.0], [26.5, 192.0], [26.6, 192.0], [26.7, 207.0], [26.8, 207.0], [26.9, 207.0], [27.0, 210.0], [27.1, 210.0], [27.2, 210.0], [27.3, 210.0], [27.4, 215.0], [27.5, 215.0], [27.6, 215.0], [27.7, 217.0], [27.8, 217.0], [27.9, 217.0], [28.0, 218.0], [28.1, 218.0], [28.2, 218.0], [28.3, 218.0], [28.4, 219.0], [28.5, 219.0], [28.6, 219.0], [28.7, 221.0], [28.8, 221.0], [28.9, 221.0], [29.0, 221.0], [29.1, 221.0], [29.2, 221.0], [29.3, 221.0], [29.4, 222.0], [29.5, 222.0], [29.6, 222.0], [29.7, 232.0], [29.8, 232.0], [29.9, 232.0], [30.0, 232.0], [30.1, 232.0], [30.2, 232.0], [30.3, 232.0], [30.4, 233.0], [30.5, 233.0], [30.6, 233.0], [30.7, 235.0], [30.8, 235.0], [30.9, 235.0], [31.0, 236.0], [31.1, 236.0], [31.2, 236.0], [31.3, 236.0], [31.4, 236.0], [31.5, 236.0], [31.6, 236.0], [31.7, 237.0], [31.8, 237.0], [31.9, 237.0], [32.0, 237.0], [32.1, 237.0], [32.2, 237.0], [32.3, 237.0], [32.4, 238.0], [32.5, 238.0], [32.6, 238.0], [32.7, 239.0], [32.8, 239.0], [32.9, 239.0], [33.0, 239.0], [33.1, 239.0], [33.2, 239.0], [33.3, 239.0], [33.4, 239.0], [33.5, 239.0], [33.6, 239.0], [33.7, 242.0], [33.8, 242.0], [33.9, 242.0], [34.0, 242.0], [34.1, 242.0], [34.2, 242.0], [34.3, 242.0], [34.4, 243.0], [34.5, 243.0], [34.6, 243.0], [34.7, 246.0], [34.8, 246.0], [34.9, 246.0], [35.0, 246.0], [35.1, 246.0], [35.2, 246.0], [35.3, 246.0], [35.4, 246.0], [35.5, 246.0], [35.6, 246.0], [35.7, 247.0], [35.8, 247.0], [35.9, 247.0], [36.0, 248.0], [36.1, 248.0], [36.2, 248.0], [36.3, 248.0], [36.4, 253.0], [36.5, 253.0], [36.6, 253.0], [36.7, 255.0], [36.8, 255.0], [36.9, 255.0], [37.0, 255.0], [37.1, 255.0], [37.2, 255.0], [37.3, 255.0], [37.4, 260.0], [37.5, 260.0], [37.6, 260.0], [37.7, 261.0], [37.8, 261.0], [37.9, 261.0], [38.0, 262.0], [38.1, 262.0], [38.2, 262.0], [38.3, 262.0], [38.4, 267.0], [38.5, 267.0], [38.6, 267.0], [38.7, 267.0], [38.8, 267.0], [38.9, 267.0], [39.0, 267.0], [39.1, 267.0], [39.2, 267.0], [39.3, 267.0], [39.4, 270.0], [39.5, 270.0], [39.6, 270.0], [39.7, 270.0], [39.8, 270.0], [39.9, 270.0], [40.0, 272.0], [40.1, 272.0], [40.2, 272.0], [40.3, 272.0], [40.4, 272.0], [40.5, 272.0], [40.6, 272.0], [40.7, 275.0], [40.8, 275.0], [40.9, 275.0], [41.0, 276.0], [41.1, 276.0], [41.2, 276.0], [41.3, 276.0], [41.4, 277.0], [41.5, 277.0], [41.6, 277.0], [41.7, 277.0], [41.8, 277.0], [41.9, 277.0], [42.0, 278.0], [42.1, 278.0], [42.2, 278.0], [42.3, 278.0], [42.4, 279.0], [42.5, 279.0], [42.6, 279.0], [42.7, 281.0], [42.8, 281.0], [42.9, 281.0], [43.0, 281.0], [43.1, 282.0], [43.2, 282.0], [43.3, 282.0], [43.4, 285.0], [43.5, 285.0], [43.6, 285.0], [43.7, 287.0], [43.8, 287.0], [43.9, 287.0], [44.0, 287.0], [44.1, 290.0], [44.2, 290.0], [44.3, 290.0], [44.4, 292.0], [44.5, 292.0], [44.6, 292.0], [44.7, 295.0], [44.8, 295.0], [44.9, 295.0], [45.0, 295.0], [45.1, 295.0], [45.2, 295.0], [45.3, 295.0], [45.4, 298.0], [45.5, 298.0], [45.6, 298.0], [45.7, 300.0], [45.8, 300.0], [45.9, 300.0], [46.0, 300.0], [46.1, 300.0], [46.2, 300.0], [46.3, 300.0], [46.4, 304.0], [46.5, 304.0], [46.6, 304.0], [46.7, 305.0], [46.8, 305.0], [46.9, 305.0], [47.0, 305.0], [47.1, 307.0], [47.2, 307.0], [47.3, 307.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 313.0], [47.8, 313.0], [47.9, 313.0], [48.0, 313.0], [48.1, 314.0], [48.2, 314.0], [48.3, 314.0], [48.4, 315.0], [48.5, 315.0], [48.6, 315.0], [48.7, 316.0], [48.8, 316.0], [48.9, 316.0], [49.0, 316.0], [49.1, 318.0], [49.2, 318.0], [49.3, 318.0], [49.4, 319.0], [49.5, 319.0], [49.6, 319.0], [49.7, 319.0], [49.8, 319.0], [49.9, 319.0], [50.0, 319.0], [50.1, 322.0], [50.2, 322.0], [50.3, 322.0], [50.4, 322.0], [50.5, 322.0], [50.6, 322.0], [50.7, 331.0], [50.8, 331.0], [50.9, 331.0], [51.0, 331.0], [51.1, 332.0], [51.2, 332.0], [51.3, 332.0], [51.4, 336.0], [51.5, 336.0], [51.6, 336.0], [51.7, 341.0], [51.8, 341.0], [51.9, 341.0], [52.0, 341.0], [52.1, 341.0], [52.2, 341.0], [52.3, 341.0], [52.4, 360.0], [52.5, 360.0], [52.6, 360.0], [52.7, 374.0], [52.8, 374.0], [52.9, 374.0], [53.0, 374.0], [53.1, 382.0], [53.2, 382.0], [53.3, 382.0], [53.4, 388.0], [53.5, 388.0], [53.6, 388.0], [53.7, 390.0], [53.8, 390.0], [53.9, 390.0], [54.0, 390.0], [54.1, 405.0], [54.2, 405.0], [54.3, 405.0], [54.4, 407.0], [54.5, 407.0], [54.6, 407.0], [54.7, 408.0], [54.8, 408.0], [54.9, 408.0], [55.0, 408.0], [55.1, 411.0], [55.2, 411.0], [55.3, 411.0], [55.4, 415.0], [55.5, 415.0], [55.6, 415.0], [55.7, 416.0], [55.8, 416.0], [55.9, 416.0], [56.0, 416.0], [56.1, 419.0], [56.2, 419.0], [56.3, 419.0], [56.4, 420.0], [56.5, 420.0], [56.6, 420.0], [56.7, 423.0], [56.8, 423.0], [56.9, 423.0], [57.0, 423.0], [57.1, 424.0], [57.2, 424.0], [57.3, 424.0], [57.4, 424.0], [57.5, 424.0], [57.6, 424.0], [57.7, 437.0], [57.8, 437.0], [57.9, 437.0], [58.0, 437.0], [58.1, 445.0], [58.2, 445.0], [58.3, 445.0], [58.4, 445.0], [58.5, 445.0], [58.6, 445.0], [58.7, 451.0], [58.8, 451.0], [58.9, 451.0], [59.0, 451.0], [59.1, 457.0], [59.2, 457.0], [59.3, 457.0], [59.4, 458.0], [59.5, 458.0], [59.6, 458.0], [59.7, 458.0], [59.8, 458.0], [59.9, 458.0], [60.0, 458.0], [60.1, 458.0], [60.2, 458.0], [60.3, 458.0], [60.4, 458.0], [60.5, 458.0], [60.6, 458.0], [60.7, 462.0], [60.8, 462.0], [60.9, 462.0], [61.0, 462.0], [61.1, 469.0], [61.2, 469.0], [61.3, 469.0], [61.4, 471.0], [61.5, 471.0], [61.6, 471.0], [61.7, 472.0], [61.8, 472.0], [61.9, 472.0], [62.0, 472.0], [62.1, 473.0], [62.2, 473.0], [62.3, 473.0], [62.4, 477.0], [62.5, 477.0], [62.6, 477.0], [62.7, 478.0], [62.8, 478.0], [62.9, 478.0], [63.0, 478.0], [63.1, 484.0], [63.2, 484.0], [63.3, 484.0], [63.4, 486.0], [63.5, 486.0], [63.6, 486.0], [63.7, 489.0], [63.8, 489.0], [63.9, 489.0], [64.0, 489.0], [64.1, 505.0], [64.2, 505.0], [64.3, 505.0], [64.4, 508.0], [64.5, 508.0], [64.6, 508.0], [64.7, 510.0], [64.8, 510.0], [64.9, 510.0], [65.0, 510.0], [65.1, 521.0], [65.2, 521.0], [65.3, 521.0], [65.4, 526.0], [65.5, 526.0], [65.6, 526.0], [65.7, 538.0], [65.8, 538.0], [65.9, 538.0], [66.0, 538.0], [66.1, 539.0], [66.2, 539.0], [66.3, 539.0], [66.4, 547.0], [66.5, 547.0], [66.6, 547.0], [66.7, 557.0], [66.8, 557.0], [66.9, 557.0], [67.0, 557.0], [67.1, 559.0], [67.2, 559.0], [67.3, 559.0], [67.4, 561.0], [67.5, 561.0], [67.6, 561.0], [67.7, 564.0], [67.8, 564.0], [67.9, 564.0], [68.0, 564.0], [68.1, 565.0], [68.2, 565.0], [68.3, 565.0], [68.4, 573.0], [68.5, 573.0], [68.6, 573.0], [68.7, 574.0], [68.8, 574.0], [68.9, 574.0], [69.0, 574.0], [69.1, 586.0], [69.2, 586.0], [69.3, 586.0], [69.4, 586.0], [69.5, 586.0], [69.6, 586.0], [69.7, 592.0], [69.8, 592.0], [69.9, 592.0], [70.0, 592.0], [70.1, 600.0], [70.2, 600.0], [70.3, 600.0], [70.4, 608.0], [70.5, 608.0], [70.6, 608.0], [70.7, 612.0], [70.8, 612.0], [70.9, 612.0], [71.0, 623.0], [71.1, 623.0], [71.2, 623.0], [71.3, 623.0], [71.4, 624.0], [71.5, 624.0], [71.6, 624.0], [71.7, 625.0], [71.8, 625.0], [71.9, 625.0], [72.0, 641.0], [72.1, 641.0], [72.2, 641.0], [72.3, 641.0], [72.4, 641.0], [72.5, 641.0], [72.6, 641.0], [72.7, 642.0], [72.8, 642.0], [72.9, 642.0], [73.0, 647.0], [73.1, 647.0], [73.2, 647.0], [73.3, 647.0], [73.4, 648.0], [73.5, 648.0], [73.6, 648.0], [73.7, 652.0], [73.8, 652.0], [73.9, 652.0], [74.0, 653.0], [74.1, 653.0], [74.2, 653.0], [74.3, 653.0], [74.4, 653.0], [74.5, 653.0], [74.6, 653.0], [74.7, 657.0], [74.8, 657.0], [74.9, 657.0], [75.0, 659.0], [75.1, 659.0], [75.2, 659.0], [75.3, 659.0], [75.4, 664.0], [75.5, 664.0], [75.6, 664.0], [75.7, 666.0], [75.8, 666.0], [75.9, 666.0], [76.0, 667.0], [76.1, 667.0], [76.2, 667.0], [76.3, 667.0], [76.4, 667.0], [76.5, 667.0], [76.6, 667.0], [76.7, 668.0], [76.8, 668.0], [76.9, 668.0], [77.0, 668.0], [77.1, 668.0], [77.2, 668.0], [77.3, 668.0], [77.4, 669.0], [77.5, 669.0], [77.6, 669.0], [77.7, 672.0], [77.8, 672.0], [77.9, 672.0], [78.0, 674.0], [78.1, 674.0], [78.2, 674.0], [78.3, 674.0], [78.4, 678.0], [78.5, 678.0], [78.6, 678.0], [78.7, 695.0], [78.8, 695.0], [78.9, 695.0], [79.0, 696.0], [79.1, 696.0], [79.2, 696.0], [79.3, 696.0], [79.4, 750.0], [79.5, 750.0], [79.6, 750.0], [79.7, 758.0], [79.8, 758.0], [79.9, 758.0], [80.0, 762.0], [80.1, 762.0], [80.2, 762.0], [80.3, 762.0], [80.4, 786.0], [80.5, 786.0], [80.6, 786.0], [80.7, 791.0], [80.8, 791.0], [80.9, 791.0], [81.0, 814.0], [81.1, 814.0], [81.2, 814.0], [81.3, 814.0], [81.4, 861.0], [81.5, 861.0], [81.6, 861.0], [81.7, 889.0], [81.8, 889.0], [81.9, 889.0], [82.0, 899.0], [82.1, 899.0], [82.2, 899.0], [82.3, 899.0], [82.4, 924.0], [82.5, 924.0], [82.6, 924.0], [82.7, 951.0], [82.8, 951.0], [82.9, 951.0], [83.0, 979.0], [83.1, 979.0], [83.2, 979.0], [83.3, 979.0], [83.4, 1000.0], [83.5, 1000.0], [83.6, 1000.0], [83.7, 1020.0], [83.8, 1020.0], [83.9, 1020.0], [84.0, 1022.0], [84.1, 1022.0], [84.2, 1022.0], [84.3, 1022.0], [84.4, 1030.0], [84.5, 1030.0], [84.6, 1030.0], [84.7, 1033.0], [84.8, 1033.0], [84.9, 1033.0], [85.0, 1042.0], [85.1, 1042.0], [85.2, 1042.0], [85.3, 1042.0], [85.4, 1057.0], [85.5, 1057.0], [85.6, 1057.0], [85.7, 1080.0], [85.8, 1080.0], [85.9, 1080.0], [86.0, 1092.0], [86.1, 1092.0], [86.2, 1092.0], [86.3, 1092.0], [86.4, 1105.0], [86.5, 1105.0], [86.6, 1105.0], [86.7, 1108.0], [86.8, 1108.0], [86.9, 1108.0], [87.0, 1110.0], [87.1, 1110.0], [87.2, 1110.0], [87.3, 1110.0], [87.4, 1110.0], [87.5, 1110.0], [87.6, 1110.0], [87.7, 1114.0], [87.8, 1114.0], [87.9, 1114.0], [88.0, 1117.0], [88.1, 1117.0], [88.2, 1117.0], [88.3, 1117.0], [88.4, 1123.0], [88.5, 1123.0], [88.6, 1123.0], [88.7, 1123.0], [88.8, 1123.0], [88.9, 1123.0], [89.0, 1126.0], [89.1, 1126.0], [89.2, 1126.0], [89.3, 1126.0], [89.4, 1127.0], [89.5, 1127.0], [89.6, 1127.0], [89.7, 1142.0], [89.8, 1142.0], [89.9, 1142.0], [90.0, 1143.0], [90.1, 1143.0], [90.2, 1143.0], [90.3, 1143.0], [90.4, 1149.0], [90.5, 1149.0], [90.6, 1149.0], [90.7, 1161.0], [90.8, 1161.0], [90.9, 1161.0], [91.0, 1170.0], [91.1, 1170.0], [91.2, 1170.0], [91.3, 1170.0], [91.4, 1174.0], [91.5, 1174.0], [91.6, 1174.0], [91.7, 1176.0], [91.8, 1176.0], [91.9, 1176.0], [92.0, 1177.0], [92.1, 1177.0], [92.2, 1177.0], [92.3, 1177.0], [92.4, 1181.0], [92.5, 1181.0], [92.6, 1181.0], [92.7, 1193.0], [92.8, 1193.0], [92.9, 1193.0], [93.0, 1195.0], [93.1, 1195.0], [93.2, 1195.0], [93.3, 1195.0], [93.4, 1202.0], [93.5, 1202.0], [93.6, 1202.0], [93.7, 1231.0], [93.8, 1231.0], [93.9, 1231.0], [94.0, 1233.0], [94.1, 1233.0], [94.2, 1233.0], [94.3, 1233.0], [94.4, 1254.0], [94.5, 1254.0], [94.6, 1254.0], [94.7, 1264.0], [94.8, 1264.0], [94.9, 1264.0], [95.0, 1269.0], [95.1, 1269.0], [95.2, 1269.0], [95.3, 1269.0], [95.4, 1277.0], [95.5, 1277.0], [95.6, 1277.0], [95.7, 1287.0], [95.8, 1287.0], [95.9, 1287.0], [96.0, 1288.0], [96.1, 1288.0], [96.2, 1288.0], [96.3, 1288.0], [96.4, 1300.0], [96.5, 1300.0], [96.6, 1300.0], [96.7, 1302.0], [96.8, 1302.0], [96.9, 1302.0], [97.0, 1305.0], [97.1, 1305.0], [97.2, 1305.0], [97.3, 1305.0], [97.4, 1307.0], [97.5, 1307.0], [97.6, 1307.0], [97.7, 1319.0], [97.8, 1319.0], [97.9, 1319.0], [98.0, 1375.0], [98.1, 1375.0], [98.2, 1375.0], [98.3, 1375.0], [98.4, 1400.0], [98.5, 1400.0], [98.6, 1400.0], [98.7, 1465.0], [98.8, 1465.0], [98.9, 1465.0], [99.0, 1501.0], [99.1, 1501.0], [99.2, 1501.0], [99.3, 1501.0], [99.4, 1506.0], [99.5, 1506.0], [99.6, 1506.0], [99.7, 1519.0], [99.8, 1519.0], [99.9, 1519.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 101.0], [0.1, 101.0], [0.2, 101.0], [0.3, 101.0], [0.4, 126.0], [0.5, 126.0], [0.6, 126.0], [0.7, 137.0], [0.8, 137.0], [0.9, 137.0], [1.0, 137.0], [1.1, 137.0], [1.2, 137.0], [1.3, 137.0], [1.4, 138.0], [1.5, 138.0], [1.6, 138.0], [1.7, 142.0], [1.8, 142.0], [1.9, 142.0], [2.0, 148.0], [2.1, 148.0], [2.2, 148.0], [2.3, 148.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 154.0], [2.8, 154.0], [2.9, 154.0], [3.0, 155.0], [3.1, 155.0], [3.2, 155.0], [3.3, 155.0], [3.4, 155.0], [3.5, 155.0], [3.6, 155.0], [3.7, 159.0], [3.8, 159.0], [3.9, 159.0], [4.0, 159.0], [4.1, 159.0], [4.2, 159.0], [4.3, 159.0], [4.4, 161.0], [4.5, 161.0], [4.6, 161.0], [4.7, 161.0], [4.8, 161.0], [4.9, 161.0], [5.0, 162.0], [5.1, 162.0], [5.2, 162.0], [5.3, 162.0], [5.4, 163.0], [5.5, 163.0], [5.6, 163.0], [5.7, 163.0], [5.8, 163.0], [5.9, 163.0], [6.0, 163.0], [6.1, 163.0], [6.2, 163.0], [6.3, 163.0], [6.4, 164.0], [6.5, 164.0], [6.6, 164.0], [6.7, 167.0], [6.8, 167.0], [6.9, 167.0], [7.0, 168.0], [7.1, 168.0], [7.2, 168.0], [7.3, 168.0], [7.4, 169.0], [7.5, 169.0], [7.6, 169.0], [7.7, 170.0], [7.8, 170.0], [7.9, 170.0], [8.0, 173.0], [8.1, 173.0], [8.2, 173.0], [8.3, 173.0], [8.4, 181.0], [8.5, 181.0], [8.6, 181.0], [8.7, 182.0], [8.8, 182.0], [8.9, 182.0], [9.0, 183.0], [9.1, 183.0], [9.2, 183.0], [9.3, 183.0], [9.4, 187.0], [9.5, 187.0], [9.6, 187.0], [9.7, 203.0], [9.8, 203.0], [9.9, 203.0], [10.0, 203.0], [10.1, 207.0], [10.2, 207.0], [10.3, 207.0], [10.4, 216.0], [10.5, 216.0], [10.6, 216.0], [10.7, 216.0], [10.8, 216.0], [10.9, 216.0], [11.0, 216.0], [11.1, 216.0], [11.2, 216.0], [11.3, 216.0], [11.4, 217.0], [11.5, 217.0], [11.6, 217.0], [11.7, 233.0], [11.8, 233.0], [11.9, 233.0], [12.0, 233.0], [12.1, 238.0], [12.2, 238.0], [12.3, 238.0], [12.4, 248.0], [12.5, 248.0], [12.6, 248.0], [12.7, 254.0], [12.8, 254.0], [12.9, 254.0], [13.0, 254.0], [13.1, 256.0], [13.2, 256.0], [13.3, 256.0], [13.4, 266.0], [13.5, 266.0], [13.6, 266.0], [13.7, 271.0], [13.8, 271.0], [13.9, 271.0], [14.0, 271.0], [14.1, 271.0], [14.2, 271.0], [14.3, 271.0], [14.4, 276.0], [14.5, 276.0], [14.6, 276.0], [14.7, 300.0], [14.8, 300.0], [14.9, 300.0], [15.0, 300.0], [15.1, 300.0], [15.2, 300.0], [15.3, 300.0], [15.4, 302.0], [15.5, 302.0], [15.6, 302.0], [15.7, 304.0], [15.8, 304.0], [15.9, 304.0], [16.0, 304.0], [16.1, 307.0], [16.2, 307.0], [16.3, 307.0], [16.4, 308.0], [16.5, 308.0], [16.6, 308.0], [16.7, 313.0], [16.8, 313.0], [16.9, 313.0], [17.0, 313.0], [17.1, 324.0], [17.2, 324.0], [17.3, 324.0], [17.4, 325.0], [17.5, 325.0], [17.6, 325.0], [17.7, 339.0], [17.8, 339.0], [17.9, 339.0], [18.0, 344.0], [18.1, 344.0], [18.2, 344.0], [18.3, 344.0], [18.4, 345.0], [18.5, 345.0], [18.6, 345.0], [18.7, 354.0], [18.8, 354.0], [18.9, 354.0], [19.0, 357.0], [19.1, 357.0], [19.2, 357.0], [19.3, 357.0], [19.4, 358.0], [19.5, 358.0], [19.6, 358.0], [19.7, 361.0], [19.8, 361.0], [19.9, 361.0], [20.0, 367.0], [20.1, 367.0], [20.2, 367.0], [20.3, 367.0], [20.4, 378.0], [20.5, 378.0], [20.6, 378.0], [20.7, 380.0], [20.8, 380.0], [20.9, 380.0], [21.0, 388.0], [21.1, 388.0], [21.2, 388.0], [21.3, 388.0], [21.4, 396.0], [21.5, 396.0], [21.6, 396.0], [21.7, 399.0], [21.8, 399.0], [21.9, 399.0], [22.0, 406.0], [22.1, 406.0], [22.2, 406.0], [22.3, 406.0], [22.4, 408.0], [22.5, 408.0], [22.6, 408.0], [22.7, 408.0], [22.8, 408.0], [22.9, 408.0], [23.0, 410.0], [23.1, 410.0], [23.2, 410.0], [23.3, 410.0], [23.4, 412.0], [23.5, 412.0], [23.6, 412.0], [23.7, 414.0], [23.8, 414.0], [23.9, 414.0], [24.0, 436.0], [24.1, 436.0], [24.2, 436.0], [24.3, 436.0], [24.4, 439.0], [24.5, 439.0], [24.6, 439.0], [24.7, 446.0], [24.8, 446.0], [24.9, 446.0], [25.0, 448.0], [25.1, 448.0], [25.2, 448.0], [25.3, 448.0], [25.4, 500.0], [25.5, 500.0], [25.6, 500.0], [25.7, 543.0], [25.8, 543.0], [25.9, 543.0], [26.0, 559.0], [26.1, 559.0], [26.2, 559.0], [26.3, 559.0], [26.4, 560.0], [26.5, 560.0], [26.6, 560.0], [26.7, 575.0], [26.8, 575.0], [26.9, 575.0], [27.0, 580.0], [27.1, 580.0], [27.2, 580.0], [27.3, 580.0], [27.4, 586.0], [27.5, 586.0], [27.6, 586.0], [27.7, 601.0], [27.8, 601.0], [27.9, 601.0], [28.0, 616.0], [28.1, 616.0], [28.2, 616.0], [28.3, 616.0], [28.4, 632.0], [28.5, 632.0], [28.6, 632.0], [28.7, 650.0], [28.8, 650.0], [28.9, 650.0], [29.0, 668.0], [29.1, 668.0], [29.2, 668.0], [29.3, 668.0], [29.4, 671.0], [29.5, 671.0], [29.6, 671.0], [29.7, 691.0], [29.8, 691.0], [29.9, 691.0], [30.0, 699.0], [30.1, 699.0], [30.2, 699.0], [30.3, 699.0], [30.4, 702.0], [30.5, 702.0], [30.6, 702.0], [30.7, 704.0], [30.8, 704.0], [30.9, 704.0], [31.0, 705.0], [31.1, 705.0], [31.2, 705.0], [31.3, 705.0], [31.4, 714.0], [31.5, 714.0], [31.6, 714.0], [31.7, 718.0], [31.8, 718.0], [31.9, 718.0], [32.0, 719.0], [32.1, 719.0], [32.2, 719.0], [32.3, 719.0], [32.4, 719.0], [32.5, 719.0], [32.6, 719.0], [32.7, 723.0], [32.8, 723.0], [32.9, 723.0], [33.0, 757.0], [33.1, 757.0], [33.2, 757.0], [33.3, 757.0], [33.4, 814.0], [33.5, 814.0], [33.6, 814.0], [33.7, 817.0], [33.8, 817.0], [33.9, 817.0], [34.0, 823.0], [34.1, 823.0], [34.2, 823.0], [34.3, 823.0], [34.4, 825.0], [34.5, 825.0], [34.6, 825.0], [34.7, 833.0], [34.8, 833.0], [34.9, 833.0], [35.0, 833.0], [35.1, 833.0], [35.2, 833.0], [35.3, 833.0], [35.4, 833.0], [35.5, 833.0], [35.6, 833.0], [35.7, 834.0], [35.8, 834.0], [35.9, 834.0], [36.0, 835.0], [36.1, 835.0], [36.2, 835.0], [36.3, 835.0], [36.4, 870.0], [36.5, 870.0], [36.6, 870.0], [36.7, 942.0], [36.8, 942.0], [36.9, 942.0], [37.0, 963.0], [37.1, 963.0], [37.2, 963.0], [37.3, 963.0], [37.4, 1040.0], [37.5, 1040.0], [37.6, 1040.0], [37.7, 1043.0], [37.8, 1043.0], [37.9, 1043.0], [38.0, 1065.0], [38.1, 1065.0], [38.2, 1065.0], [38.3, 1065.0], [38.4, 1110.0], [38.5, 1110.0], [38.6, 1110.0], [38.7, 1110.0], [38.8, 1110.0], [38.9, 1110.0], [39.0, 1118.0], [39.1, 1118.0], [39.2, 1118.0], [39.3, 1118.0], [39.4, 1125.0], [39.5, 1125.0], [39.6, 1125.0], [39.7, 1125.0], [39.8, 1125.0], [39.9, 1125.0], [40.0, 1131.0], [40.1, 1131.0], [40.2, 1131.0], [40.3, 1131.0], [40.4, 1142.0], [40.5, 1142.0], [40.6, 1142.0], [40.7, 1143.0], [40.8, 1143.0], [40.9, 1143.0], [41.0, 1170.0], [41.1, 1170.0], [41.2, 1170.0], [41.3, 1170.0], [41.4, 1184.0], [41.5, 1184.0], [41.6, 1184.0], [41.7, 1208.0], [41.8, 1208.0], [41.9, 1208.0], [42.0, 1209.0], [42.1, 1209.0], [42.2, 1209.0], [42.3, 1209.0], [42.4, 1212.0], [42.5, 1212.0], [42.6, 1212.0], [42.7, 1217.0], [42.8, 1217.0], [42.9, 1217.0], [43.0, 1217.0], [43.1, 1228.0], [43.2, 1228.0], [43.3, 1228.0], [43.4, 1244.0], [43.5, 1244.0], [43.6, 1244.0], [43.7, 1262.0], [43.8, 1262.0], [43.9, 1262.0], [44.0, 1262.0], [44.1, 1273.0], [44.2, 1273.0], [44.3, 1273.0], [44.4, 1287.0], [44.5, 1287.0], [44.6, 1287.0], [44.7, 1303.0], [44.8, 1303.0], [44.9, 1303.0], [45.0, 1303.0], [45.1, 1325.0], [45.2, 1325.0], [45.3, 1325.0], [45.4, 1377.0], [45.5, 1377.0], [45.6, 1377.0], [45.7, 1386.0], [45.8, 1386.0], [45.9, 1386.0], [46.0, 1386.0], [46.1, 1395.0], [46.2, 1395.0], [46.3, 1395.0], [46.4, 1411.0], [46.5, 1411.0], [46.6, 1411.0], [46.7, 1440.0], [46.8, 1440.0], [46.9, 1440.0], [47.0, 1440.0], [47.1, 1444.0], [47.2, 1444.0], [47.3, 1444.0], [47.4, 1454.0], [47.5, 1454.0], [47.6, 1454.0], [47.7, 1465.0], [47.8, 1465.0], [47.9, 1465.0], [48.0, 1465.0], [48.1, 1472.0], [48.2, 1472.0], [48.3, 1472.0], [48.4, 1481.0], [48.5, 1481.0], [48.6, 1481.0], [48.7, 1490.0], [48.8, 1490.0], [48.9, 1490.0], [49.0, 1490.0], [49.1, 1490.0], [49.2, 1490.0], [49.3, 1490.0], [49.4, 1499.0], [49.5, 1499.0], [49.6, 1499.0], [49.7, 1517.0], [49.8, 1517.0], [49.9, 1517.0], [50.0, 1517.0], [50.1, 1525.0], [50.2, 1525.0], [50.3, 1525.0], [50.4, 1530.0], [50.5, 1530.0], [50.6, 1530.0], [50.7, 1532.0], [50.8, 1532.0], [50.9, 1532.0], [51.0, 1532.0], [51.1, 1535.0], [51.2, 1535.0], [51.3, 1535.0], [51.4, 1574.0], [51.5, 1574.0], [51.6, 1574.0], [51.7, 1576.0], [51.8, 1576.0], [51.9, 1576.0], [52.0, 1576.0], [52.1, 1578.0], [52.2, 1578.0], [52.3, 1578.0], [52.4, 1594.0], [52.5, 1594.0], [52.6, 1594.0], [52.7, 1624.0], [52.8, 1624.0], [52.9, 1624.0], [53.0, 1624.0], [53.1, 1657.0], [53.2, 1657.0], [53.3, 1657.0], [53.4, 1666.0], [53.5, 1666.0], [53.6, 1666.0], [53.7, 1669.0], [53.8, 1669.0], [53.9, 1669.0], [54.0, 1669.0], [54.1, 1671.0], [54.2, 1671.0], [54.3, 1671.0], [54.4, 1682.0], [54.5, 1682.0], [54.6, 1682.0], [54.7, 1693.0], [54.8, 1693.0], [54.9, 1693.0], [55.0, 1693.0], [55.1, 1699.0], [55.2, 1699.0], [55.3, 1699.0], [55.4, 1708.0], [55.5, 1708.0], [55.6, 1708.0], [55.7, 1715.0], [55.8, 1715.0], [55.9, 1715.0], [56.0, 1715.0], [56.1, 1717.0], [56.2, 1717.0], [56.3, 1717.0], [56.4, 1728.0], [56.5, 1728.0], [56.6, 1728.0], [56.7, 1741.0], [56.8, 1741.0], [56.9, 1741.0], [57.0, 1741.0], [57.1, 1752.0], [57.2, 1752.0], [57.3, 1752.0], [57.4, 1756.0], [57.5, 1756.0], [57.6, 1756.0], [57.7, 1784.0], [57.8, 1784.0], [57.9, 1784.0], [58.0, 1784.0], [58.1, 1788.0], [58.2, 1788.0], [58.3, 1788.0], [58.4, 1795.0], [58.5, 1795.0], [58.6, 1795.0], [58.7, 1802.0], [58.8, 1802.0], [58.9, 1802.0], [59.0, 1802.0], [59.1, 1805.0], [59.2, 1805.0], [59.3, 1805.0], [59.4, 1817.0], [59.5, 1817.0], [59.6, 1817.0], [59.7, 1827.0], [59.8, 1827.0], [59.9, 1827.0], [60.0, 1827.0], [60.1, 1835.0], [60.2, 1835.0], [60.3, 1835.0], [60.4, 1853.0], [60.5, 1853.0], [60.6, 1853.0], [60.7, 1855.0], [60.8, 1855.0], [60.9, 1855.0], [61.0, 1855.0], [61.1, 1869.0], [61.2, 1869.0], [61.3, 1869.0], [61.4, 1873.0], [61.5, 1873.0], [61.6, 1873.0], [61.7, 1873.0], [61.8, 1873.0], [61.9, 1873.0], [62.0, 1873.0], [62.1, 1885.0], [62.2, 1885.0], [62.3, 1885.0], [62.4, 1889.0], [62.5, 1889.0], [62.6, 1889.0], [62.7, 1895.0], [62.8, 1895.0], [62.9, 1895.0], [63.0, 1895.0], [63.1, 1899.0], [63.2, 1899.0], [63.3, 1899.0], [63.4, 1900.0], [63.5, 1900.0], [63.6, 1900.0], [63.7, 1917.0], [63.8, 1917.0], [63.9, 1917.0], [64.0, 1917.0], [64.1, 1918.0], [64.2, 1918.0], [64.3, 1918.0], [64.4, 1925.0], [64.5, 1925.0], [64.6, 1925.0], [64.7, 1932.0], [64.8, 1932.0], [64.9, 1932.0], [65.0, 1932.0], [65.1, 1941.0], [65.2, 1941.0], [65.3, 1941.0], [65.4, 1942.0], [65.5, 1942.0], [65.6, 1942.0], [65.7, 1944.0], [65.8, 1944.0], [65.9, 1944.0], [66.0, 1944.0], [66.1, 1954.0], [66.2, 1954.0], [66.3, 1954.0], [66.4, 1955.0], [66.5, 1955.0], [66.6, 1955.0], [66.7, 1957.0], [66.8, 1957.0], [66.9, 1957.0], [67.0, 1957.0], [67.1, 1965.0], [67.2, 1965.0], [67.3, 1965.0], [67.4, 1967.0], [67.5, 1967.0], [67.6, 1967.0], [67.7, 1969.0], [67.8, 1969.0], [67.9, 1969.0], [68.0, 1969.0], [68.1, 1986.0], [68.2, 1986.0], [68.3, 1986.0], [68.4, 2056.0], [68.5, 2056.0], [68.6, 2056.0], [68.7, 2059.0], [68.8, 2059.0], [68.9, 2059.0], [69.0, 2059.0], [69.1, 2082.0], [69.2, 2082.0], [69.3, 2082.0], [69.4, 2090.0], [69.5, 2090.0], [69.6, 2090.0], [69.7, 2090.0], [69.8, 2090.0], [69.9, 2090.0], [70.0, 2090.0], [70.1, 2092.0], [70.2, 2092.0], [70.3, 2092.0], [70.4, 2127.0], [70.5, 2127.0], [70.6, 2127.0], [70.7, 2172.0], [70.8, 2172.0], [70.9, 2172.0], [71.0, 2172.0], [71.1, 2173.0], [71.2, 2173.0], [71.3, 2173.0], [71.4, 2195.0], [71.5, 2195.0], [71.6, 2195.0], [71.7, 2201.0], [71.8, 2201.0], [71.9, 2201.0], [72.0, 2201.0], [72.1, 2213.0], [72.2, 2213.0], [72.3, 2213.0], [72.4, 2215.0], [72.5, 2215.0], [72.6, 2215.0], [72.7, 2215.0], [72.8, 2215.0], [72.9, 2215.0], [73.0, 2215.0], [73.1, 2218.0], [73.2, 2218.0], [73.3, 2218.0], [73.4, 2219.0], [73.5, 2219.0], [73.6, 2219.0], [73.7, 2229.0], [73.8, 2229.0], [73.9, 2229.0], [74.0, 2229.0], [74.1, 2231.0], [74.2, 2231.0], [74.3, 2231.0], [74.4, 2239.0], [74.5, 2239.0], [74.6, 2239.0], [74.7, 2246.0], [74.8, 2246.0], [74.9, 2246.0], [75.0, 2246.0], [75.1, 2263.0], [75.2, 2263.0], [75.3, 2263.0], [75.4, 2268.0], [75.5, 2268.0], [75.6, 2268.0], [75.7, 2315.0], [75.8, 2315.0], [75.9, 2315.0], [76.0, 2333.0], [76.1, 2333.0], [76.2, 2333.0], [76.3, 2333.0], [76.4, 2340.0], [76.5, 2340.0], [76.6, 2340.0], [76.7, 2366.0], [76.8, 2366.0], [76.9, 2366.0], [77.0, 2368.0], [77.1, 2368.0], [77.2, 2368.0], [77.3, 2368.0], [77.4, 2380.0], [77.5, 2380.0], [77.6, 2380.0], [77.7, 2386.0], [77.8, 2386.0], [77.9, 2386.0], [78.0, 2393.0], [78.1, 2393.0], [78.2, 2393.0], [78.3, 2393.0], [78.4, 2402.0], [78.5, 2402.0], [78.6, 2402.0], [78.7, 2457.0], [78.8, 2457.0], [78.9, 2457.0], [79.0, 2459.0], [79.1, 2459.0], [79.2, 2459.0], [79.3, 2459.0], [79.4, 2487.0], [79.5, 2487.0], [79.6, 2487.0], [79.7, 2493.0], [79.8, 2493.0], [79.9, 2493.0], [80.0, 2500.0], [80.1, 2500.0], [80.2, 2500.0], [80.3, 2500.0], [80.4, 2518.0], [80.5, 2518.0], [80.6, 2518.0], [80.7, 2522.0], [80.8, 2522.0], [80.9, 2522.0], [81.0, 2546.0], [81.1, 2546.0], [81.2, 2546.0], [81.3, 2546.0], [81.4, 2560.0], [81.5, 2560.0], [81.6, 2560.0], [81.7, 2573.0], [81.8, 2573.0], [81.9, 2573.0], [82.0, 2599.0], [82.1, 2599.0], [82.2, 2599.0], [82.3, 2599.0], [82.4, 2607.0], [82.5, 2607.0], [82.6, 2607.0], [82.7, 2608.0], [82.8, 2608.0], [82.9, 2608.0], [83.0, 2621.0], [83.1, 2621.0], [83.2, 2621.0], [83.3, 2621.0], [83.4, 2632.0], [83.5, 2632.0], [83.6, 2632.0], [83.7, 2663.0], [83.8, 2663.0], [83.9, 2663.0], [84.0, 2672.0], [84.1, 2672.0], [84.2, 2672.0], [84.3, 2672.0], [84.4, 2673.0], [84.5, 2673.0], [84.6, 2673.0], [84.7, 2674.0], [84.8, 2674.0], [84.9, 2674.0], [85.0, 2688.0], [85.1, 2688.0], [85.2, 2688.0], [85.3, 2688.0], [85.4, 2703.0], [85.5, 2703.0], [85.6, 2703.0], [85.7, 2712.0], [85.8, 2712.0], [85.9, 2712.0], [86.0, 2718.0], [86.1, 2718.0], [86.2, 2718.0], [86.3, 2718.0], [86.4, 2741.0], [86.5, 2741.0], [86.6, 2741.0], [86.7, 2748.0], [86.8, 2748.0], [86.9, 2748.0], [87.0, 2756.0], [87.1, 2756.0], [87.2, 2756.0], [87.3, 2756.0], [87.4, 2757.0], [87.5, 2757.0], [87.6, 2757.0], [87.7, 2758.0], [87.8, 2758.0], [87.9, 2758.0], [88.0, 2761.0], [88.1, 2761.0], [88.2, 2761.0], [88.3, 2761.0], [88.4, 2768.0], [88.5, 2768.0], [88.6, 2768.0], [88.7, 2774.0], [88.8, 2774.0], [88.9, 2774.0], [89.0, 2778.0], [89.1, 2778.0], [89.2, 2778.0], [89.3, 2778.0], [89.4, 2778.0], [89.5, 2778.0], [89.6, 2778.0], [89.7, 2779.0], [89.8, 2779.0], [89.9, 2779.0], [90.0, 2784.0], [90.1, 2784.0], [90.2, 2784.0], [90.3, 2784.0], [90.4, 2789.0], [90.5, 2789.0], [90.6, 2789.0], [90.7, 2789.0], [90.8, 2789.0], [90.9, 2789.0], [91.0, 2792.0], [91.1, 2792.0], [91.2, 2792.0], [91.3, 2792.0], [91.4, 2794.0], [91.5, 2794.0], [91.6, 2794.0], [91.7, 2794.0], [91.8, 2794.0], [91.9, 2794.0], [92.0, 2796.0], [92.1, 2796.0], [92.2, 2796.0], [92.3, 2796.0], [92.4, 2800.0], [92.5, 2800.0], [92.6, 2800.0], [92.7, 2801.0], [92.8, 2801.0], [92.9, 2801.0], [93.0, 2806.0], [93.1, 2806.0], [93.2, 2806.0], [93.3, 2806.0], [93.4, 2810.0], [93.5, 2810.0], [93.6, 2810.0], [93.7, 2811.0], [93.8, 2811.0], [93.9, 2811.0], [94.0, 2814.0], [94.1, 2814.0], [94.2, 2814.0], [94.3, 2814.0], [94.4, 2820.0], [94.5, 2820.0], [94.6, 2820.0], [94.7, 2827.0], [94.8, 2827.0], [94.9, 2827.0], [95.0, 2832.0], [95.1, 2832.0], [95.2, 2832.0], [95.3, 2832.0], [95.4, 2835.0], [95.5, 2835.0], [95.6, 2835.0], [95.7, 2843.0], [95.8, 2843.0], [95.9, 2843.0], [96.0, 2898.0], [96.1, 2898.0], [96.2, 2898.0], [96.3, 2898.0], [96.4, 2905.0], [96.5, 2905.0], [96.6, 2905.0], [96.7, 2912.0], [96.8, 2912.0], [96.9, 2912.0], [97.0, 2914.0], [97.1, 2914.0], [97.2, 2914.0], [97.3, 2914.0], [97.4, 3027.0], [97.5, 3027.0], [97.6, 3027.0], [97.7, 3067.0], [97.8, 3067.0], [97.9, 3067.0], [98.0, 3069.0], [98.1, 3069.0], [98.2, 3069.0], [98.3, 3069.0], [98.4, 3070.0], [98.5, 3070.0], [98.6, 3070.0], [98.7, 3084.0], [98.8, 3084.0], [98.9, 3084.0], [99.0, 3088.0], [99.1, 3088.0], [99.2, 3088.0], [99.3, 3088.0], [99.4, 3088.0], [99.5, 3088.0], [99.6, 3088.0], [99.7, 3090.0], [99.8, 3090.0], [99.9, 3090.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 81.0], [0.1, 81.0], [0.2, 81.0], [0.3, 81.0], [0.4, 83.0], [0.5, 83.0], [0.6, 83.0], [0.7, 89.0], [0.8, 89.0], [0.9, 89.0], [1.0, 93.0], [1.1, 93.0], [1.2, 93.0], [1.3, 93.0], [1.4, 104.0], [1.5, 104.0], [1.6, 104.0], [1.7, 105.0], [1.8, 105.0], [1.9, 105.0], [2.0, 106.0], [2.1, 106.0], [2.2, 106.0], [2.3, 106.0], [2.4, 108.0], [2.5, 108.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 110.0], [3.1, 110.0], [3.2, 110.0], [3.3, 110.0], [3.4, 111.0], [3.5, 111.0], [3.6, 111.0], [3.7, 113.0], [3.8, 113.0], [3.9, 113.0], [4.0, 115.0], [4.1, 115.0], [4.2, 115.0], [4.3, 115.0], [4.4, 119.0], [4.5, 119.0], [4.6, 119.0], [4.7, 120.0], [4.8, 120.0], [4.9, 120.0], [5.0, 121.0], [5.1, 121.0], [5.2, 121.0], [5.3, 121.0], [5.4, 122.0], [5.5, 122.0], [5.6, 122.0], [5.7, 128.0], [5.8, 128.0], [5.9, 128.0], [6.0, 132.0], [6.1, 132.0], [6.2, 132.0], [6.3, 132.0], [6.4, 132.0], [6.5, 132.0], [6.6, 132.0], [6.7, 132.0], [6.8, 132.0], [6.9, 132.0], [7.0, 133.0], [7.1, 133.0], [7.2, 133.0], [7.3, 133.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 139.0], [7.8, 139.0], [7.9, 139.0], [8.0, 144.0], [8.1, 144.0], [8.2, 144.0], [8.3, 144.0], [8.4, 145.0], [8.5, 145.0], [8.6, 145.0], [8.7, 145.0], [8.8, 145.0], [8.9, 145.0], [9.0, 146.0], [9.1, 146.0], [9.2, 146.0], [9.3, 146.0], [9.4, 146.0], [9.5, 146.0], [9.6, 146.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 151.0], [10.1, 151.0], [10.2, 151.0], [10.3, 151.0], [10.4, 151.0], [10.5, 151.0], [10.6, 151.0], [10.7, 152.0], [10.8, 152.0], [10.9, 152.0], [11.0, 152.0], [11.1, 152.0], [11.2, 152.0], [11.3, 152.0], [11.4, 154.0], [11.5, 154.0], [11.6, 154.0], [11.7, 155.0], [11.8, 155.0], [11.9, 155.0], [12.0, 155.0], [12.1, 155.0], [12.2, 155.0], [12.3, 155.0], [12.4, 155.0], [12.5, 155.0], [12.6, 155.0], [12.7, 155.0], [12.8, 155.0], [12.9, 155.0], [13.0, 159.0], [13.1, 159.0], [13.2, 159.0], [13.3, 159.0], [13.4, 161.0], [13.5, 161.0], [13.6, 161.0], [13.7, 163.0], [13.8, 163.0], [13.9, 163.0], [14.0, 166.0], [14.1, 166.0], [14.2, 166.0], [14.3, 166.0], [14.4, 166.0], [14.5, 166.0], [14.6, 166.0], [14.7, 170.0], [14.8, 170.0], [14.9, 170.0], [15.0, 172.0], [15.1, 172.0], [15.2, 172.0], [15.3, 172.0], [15.4, 172.0], [15.5, 172.0], [15.6, 172.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 178.0], [16.1, 178.0], [16.2, 178.0], [16.3, 178.0], [16.4, 182.0], [16.5, 182.0], [16.6, 182.0], [16.7, 185.0], [16.8, 185.0], [16.9, 185.0], [17.0, 185.0], [17.1, 185.0], [17.2, 185.0], [17.3, 185.0], [17.4, 185.0], [17.5, 185.0], [17.6, 185.0], [17.7, 187.0], [17.8, 187.0], [17.9, 187.0], [18.0, 189.0], [18.1, 189.0], [18.2, 189.0], [18.3, 189.0], [18.4, 190.0], [18.5, 190.0], [18.6, 190.0], [18.7, 190.0], [18.8, 190.0], [18.9, 190.0], [19.0, 190.0], [19.1, 190.0], [19.2, 190.0], [19.3, 190.0], [19.4, 191.0], [19.5, 191.0], [19.6, 191.0], [19.7, 192.0], [19.8, 192.0], [19.9, 192.0], [20.0, 193.0], [20.1, 193.0], [20.2, 193.0], [20.3, 193.0], [20.4, 199.0], [20.5, 199.0], [20.6, 199.0], [20.7, 201.0], [20.8, 201.0], [20.9, 201.0], [21.0, 203.0], [21.1, 203.0], [21.2, 203.0], [21.3, 203.0], [21.4, 204.0], [21.5, 204.0], [21.6, 204.0], [21.7, 208.0], [21.8, 208.0], [21.9, 208.0], [22.0, 209.0], [22.1, 209.0], [22.2, 209.0], [22.3, 209.0], [22.4, 211.0], [22.5, 211.0], [22.6, 211.0], [22.7, 212.0], [22.8, 212.0], [22.9, 212.0], [23.0, 214.0], [23.1, 214.0], [23.2, 214.0], [23.3, 214.0], [23.4, 214.0], [23.5, 214.0], [23.6, 214.0], [23.7, 214.0], [23.8, 214.0], [23.9, 214.0], [24.0, 215.0], [24.1, 215.0], [24.2, 215.0], [24.3, 215.0], [24.4, 215.0], [24.5, 215.0], [24.6, 215.0], [24.7, 215.0], [24.8, 215.0], [24.9, 215.0], [25.0, 216.0], [25.1, 216.0], [25.2, 216.0], [25.3, 216.0], [25.4, 216.0], [25.5, 216.0], [25.6, 216.0], [25.7, 216.0], [25.8, 216.0], [25.9, 216.0], [26.0, 218.0], [26.1, 218.0], [26.2, 218.0], [26.3, 218.0], [26.4, 218.0], [26.5, 218.0], [26.6, 218.0], [26.7, 219.0], [26.8, 219.0], [26.9, 219.0], [27.0, 221.0], [27.1, 221.0], [27.2, 221.0], [27.3, 221.0], [27.4, 223.0], [27.5, 223.0], [27.6, 223.0], [27.7, 223.0], [27.8, 223.0], [27.9, 223.0], [28.0, 226.0], [28.1, 226.0], [28.2, 226.0], [28.3, 226.0], [28.4, 229.0], [28.5, 229.0], [28.6, 229.0], [28.7, 231.0], [28.8, 231.0], [28.9, 231.0], [29.0, 232.0], [29.1, 232.0], [29.2, 232.0], [29.3, 232.0], [29.4, 232.0], [29.5, 232.0], [29.6, 232.0], [29.7, 233.0], [29.8, 233.0], [29.9, 233.0], [30.0, 235.0], [30.1, 235.0], [30.2, 235.0], [30.3, 235.0], [30.4, 238.0], [30.5, 238.0], [30.6, 238.0], [30.7, 240.0], [30.8, 240.0], [30.9, 240.0], [31.0, 241.0], [31.1, 241.0], [31.2, 241.0], [31.3, 241.0], [31.4, 246.0], [31.5, 246.0], [31.6, 246.0], [31.7, 247.0], [31.8, 247.0], [31.9, 247.0], [32.0, 248.0], [32.1, 248.0], [32.2, 248.0], [32.3, 248.0], [32.4, 249.0], [32.5, 249.0], [32.6, 249.0], [32.7, 250.0], [32.8, 250.0], [32.9, 250.0], [33.0, 253.0], [33.1, 253.0], [33.2, 253.0], [33.3, 253.0], [33.4, 255.0], [33.5, 255.0], [33.6, 255.0], [33.7, 256.0], [33.8, 256.0], [33.9, 256.0], [34.0, 257.0], [34.1, 257.0], [34.2, 257.0], [34.3, 257.0], [34.4, 258.0], [34.5, 258.0], [34.6, 258.0], [34.7, 258.0], [34.8, 258.0], [34.9, 258.0], [35.0, 259.0], [35.1, 259.0], [35.2, 259.0], [35.3, 259.0], [35.4, 262.0], [35.5, 262.0], [35.6, 262.0], [35.7, 267.0], [35.8, 267.0], [35.9, 267.0], [36.0, 270.0], [36.1, 270.0], [36.2, 270.0], [36.3, 270.0], [36.4, 270.0], [36.5, 270.0], [36.6, 270.0], [36.7, 272.0], [36.8, 272.0], [36.9, 272.0], [37.0, 277.0], [37.1, 277.0], [37.2, 277.0], [37.3, 277.0], [37.4, 280.0], [37.5, 280.0], [37.6, 280.0], [37.7, 280.0], [37.8, 280.0], [37.9, 280.0], [38.0, 281.0], [38.1, 281.0], [38.2, 281.0], [38.3, 281.0], [38.4, 282.0], [38.5, 282.0], [38.6, 282.0], [38.7, 287.0], [38.8, 287.0], [38.9, 287.0], [39.0, 288.0], [39.1, 288.0], [39.2, 288.0], [39.3, 288.0], [39.4, 289.0], [39.5, 289.0], [39.6, 289.0], [39.7, 290.0], [39.8, 290.0], [39.9, 290.0], [40.0, 290.0], [40.1, 290.0], [40.2, 290.0], [40.3, 290.0], [40.4, 291.0], [40.5, 291.0], [40.6, 291.0], [40.7, 291.0], [40.8, 291.0], [40.9, 291.0], [41.0, 293.0], [41.1, 293.0], [41.2, 293.0], [41.3, 293.0], [41.4, 293.0], [41.5, 293.0], [41.6, 293.0], [41.7, 293.0], [41.8, 293.0], [41.9, 293.0], [42.0, 294.0], [42.1, 294.0], [42.2, 294.0], [42.3, 294.0], [42.4, 294.0], [42.5, 294.0], [42.6, 294.0], [42.7, 295.0], [42.8, 295.0], [42.9, 295.0], [43.0, 296.0], [43.1, 296.0], [43.2, 296.0], [43.3, 296.0], [43.4, 297.0], [43.5, 297.0], [43.6, 297.0], [43.7, 300.0], [43.8, 300.0], [43.9, 300.0], [44.0, 300.0], [44.1, 301.0], [44.2, 301.0], [44.3, 301.0], [44.4, 301.0], [44.5, 301.0], [44.6, 301.0], [44.7, 301.0], [44.8, 301.0], [44.9, 301.0], [45.0, 301.0], [45.1, 303.0], [45.2, 303.0], [45.3, 303.0], [45.4, 304.0], [45.5, 304.0], [45.6, 304.0], [45.7, 306.0], [45.8, 306.0], [45.9, 306.0], [46.0, 306.0], [46.1, 306.0], [46.2, 306.0], [46.3, 306.0], [46.4, 307.0], [46.5, 307.0], [46.6, 307.0], [46.7, 307.0], [46.8, 307.0], [46.9, 307.0], [47.0, 307.0], [47.1, 308.0], [47.2, 308.0], [47.3, 308.0], [47.4, 308.0], [47.5, 308.0], [47.6, 308.0], [47.7, 308.0], [47.8, 308.0], [47.9, 308.0], [48.0, 308.0], [48.1, 310.0], [48.2, 310.0], [48.3, 310.0], [48.4, 310.0], [48.5, 310.0], [48.6, 310.0], [48.7, 311.0], [48.8, 311.0], [48.9, 311.0], [49.0, 311.0], [49.1, 312.0], [49.2, 312.0], [49.3, 312.0], [49.4, 318.0], [49.5, 318.0], [49.6, 318.0], [49.7, 320.0], [49.8, 320.0], [49.9, 320.0], [50.0, 320.0], [50.1, 344.0], [50.2, 344.0], [50.3, 344.0], [50.4, 344.0], [50.5, 344.0], [50.6, 344.0], [50.7, 348.0], [50.8, 348.0], [50.9, 348.0], [51.0, 348.0], [51.1, 369.0], [51.2, 369.0], [51.3, 369.0], [51.4, 377.0], [51.5, 377.0], [51.6, 377.0], [51.7, 385.0], [51.8, 385.0], [51.9, 385.0], [52.0, 385.0], [52.1, 402.0], [52.2, 402.0], [52.3, 402.0], [52.4, 406.0], [52.5, 406.0], [52.6, 406.0], [52.7, 409.0], [52.8, 409.0], [52.9, 409.0], [53.0, 409.0], [53.1, 421.0], [53.2, 421.0], [53.3, 421.0], [53.4, 427.0], [53.5, 427.0], [53.6, 427.0], [53.7, 443.0], [53.8, 443.0], [53.9, 443.0], [54.0, 443.0], [54.1, 506.0], [54.2, 506.0], [54.3, 506.0], [54.4, 515.0], [54.5, 515.0], [54.6, 515.0], [54.7, 523.0], [54.8, 523.0], [54.9, 523.0], [55.0, 523.0], [55.1, 566.0], [55.2, 566.0], [55.3, 566.0], [55.4, 578.0], [55.5, 578.0], [55.6, 578.0], [55.7, 600.0], [55.8, 600.0], [55.9, 600.0], [56.0, 600.0], [56.1, 603.0], [56.2, 603.0], [56.3, 603.0], [56.4, 618.0], [56.5, 618.0], [56.6, 618.0], [56.7, 631.0], [56.8, 631.0], [56.9, 631.0], [57.0, 631.0], [57.1, 631.0], [57.2, 631.0], [57.3, 631.0], [57.4, 636.0], [57.5, 636.0], [57.6, 636.0], [57.7, 638.0], [57.8, 638.0], [57.9, 638.0], [58.0, 638.0], [58.1, 639.0], [58.2, 639.0], [58.3, 639.0], [58.4, 640.0], [58.5, 640.0], [58.6, 640.0], [58.7, 641.0], [58.8, 641.0], [58.9, 641.0], [59.0, 641.0], [59.1, 642.0], [59.2, 642.0], [59.3, 642.0], [59.4, 645.0], [59.5, 645.0], [59.6, 645.0], [59.7, 648.0], [59.8, 648.0], [59.9, 648.0], [60.0, 648.0], [60.1, 654.0], [60.2, 654.0], [60.3, 654.0], [60.4, 655.0], [60.5, 655.0], [60.6, 655.0], [60.7, 661.0], [60.8, 661.0], [60.9, 661.0], [61.0, 661.0], [61.1, 661.0], [61.2, 661.0], [61.3, 661.0], [61.4, 671.0], [61.5, 671.0], [61.6, 671.0], [61.7, 695.0], [61.8, 695.0], [61.9, 695.0], [62.0, 695.0], [62.1, 699.0], [62.2, 699.0], [62.3, 699.0], [62.4, 707.0], [62.5, 707.0], [62.6, 707.0], [62.7, 747.0], [62.8, 747.0], [62.9, 747.0], [63.0, 747.0], [63.1, 747.0], [63.2, 747.0], [63.3, 747.0], [63.4, 760.0], [63.5, 760.0], [63.6, 760.0], [63.7, 768.0], [63.8, 768.0], [63.9, 768.0], [64.0, 768.0], [64.1, 768.0], [64.2, 768.0], [64.3, 768.0], [64.4, 770.0], [64.5, 770.0], [64.6, 770.0], [64.7, 772.0], [64.8, 772.0], [64.9, 772.0], [65.0, 772.0], [65.1, 773.0], [65.2, 773.0], [65.3, 773.0], [65.4, 773.0], [65.5, 773.0], [65.6, 773.0], [65.7, 774.0], [65.8, 774.0], [65.9, 774.0], [66.0, 774.0], [66.1, 776.0], [66.2, 776.0], [66.3, 776.0], [66.4, 776.0], [66.5, 776.0], [66.6, 776.0], [66.7, 777.0], [66.8, 777.0], [66.9, 777.0], [67.0, 777.0], [67.1, 780.0], [67.2, 780.0], [67.3, 780.0], [67.4, 781.0], [67.5, 781.0], [67.6, 781.0], [67.7, 781.0], [67.8, 781.0], [67.9, 781.0], [68.0, 781.0], [68.1, 783.0], [68.2, 783.0], [68.3, 783.0], [68.4, 784.0], [68.5, 784.0], [68.6, 784.0], [68.7, 784.0], [68.8, 784.0], [68.9, 784.0], [69.0, 784.0], [69.1, 787.0], [69.2, 787.0], [69.3, 787.0], [69.4, 793.0], [69.5, 793.0], [69.6, 793.0], [69.7, 797.0], [69.8, 797.0], [69.9, 797.0], [70.0, 797.0], [70.1, 799.0], [70.2, 799.0], [70.3, 799.0], [70.4, 799.0], [70.5, 799.0], [70.6, 799.0], [70.7, 802.0], [70.8, 802.0], [70.9, 802.0], [71.0, 802.0], [71.1, 806.0], [71.2, 806.0], [71.3, 806.0], [71.4, 807.0], [71.5, 807.0], [71.6, 807.0], [71.7, 808.0], [71.8, 808.0], [71.9, 808.0], [72.0, 808.0], [72.1, 808.0], [72.2, 808.0], [72.3, 808.0], [72.4, 808.0], [72.5, 808.0], [72.6, 808.0], [72.7, 811.0], [72.8, 811.0], [72.9, 811.0], [73.0, 811.0], [73.1, 811.0], [73.2, 811.0], [73.3, 811.0], [73.4, 816.0], [73.5, 816.0], [73.6, 816.0], [73.7, 822.0], [73.8, 822.0], [73.9, 822.0], [74.0, 822.0], [74.1, 823.0], [74.2, 823.0], [74.3, 823.0], [74.4, 836.0], [74.5, 836.0], [74.6, 836.0], [74.7, 836.0], [74.8, 836.0], [74.9, 836.0], [75.0, 836.0], [75.1, 837.0], [75.2, 837.0], [75.3, 837.0], [75.4, 839.0], [75.5, 839.0], [75.6, 839.0], [75.7, 839.0], [75.8, 839.0], [75.9, 839.0], [76.0, 839.0], [76.1, 842.0], [76.2, 842.0], [76.3, 842.0], [76.4, 844.0], [76.5, 844.0], [76.6, 844.0], [76.7, 846.0], [76.8, 846.0], [76.9, 846.0], [77.0, 846.0], [77.1, 847.0], [77.2, 847.0], [77.3, 847.0], [77.4, 851.0], [77.5, 851.0], [77.6, 851.0], [77.7, 857.0], [77.8, 857.0], [77.9, 857.0], [78.0, 857.0], [78.1, 861.0], [78.2, 861.0], [78.3, 861.0], [78.4, 864.0], [78.5, 864.0], [78.6, 864.0], [78.7, 865.0], [78.8, 865.0], [78.9, 865.0], [79.0, 866.0], [79.1, 866.0], [79.2, 866.0], [79.3, 866.0], [79.4, 868.0], [79.5, 868.0], [79.6, 868.0], [79.7, 870.0], [79.8, 870.0], [79.9, 870.0], [80.0, 871.0], [80.1, 871.0], [80.2, 871.0], [80.3, 871.0], [80.4, 872.0], [80.5, 872.0], [80.6, 872.0], [80.7, 877.0], [80.8, 877.0], [80.9, 877.0], [81.0, 882.0], [81.1, 882.0], [81.2, 882.0], [81.3, 882.0], [81.4, 885.0], [81.5, 885.0], [81.6, 885.0], [81.7, 888.0], [81.8, 888.0], [81.9, 888.0], [82.0, 888.0], [82.1, 888.0], [82.2, 888.0], [82.3, 888.0], [82.4, 888.0], [82.5, 888.0], [82.6, 888.0], [82.7, 889.0], [82.8, 889.0], [82.9, 889.0], [83.0, 890.0], [83.1, 890.0], [83.2, 890.0], [83.3, 890.0], [83.4, 890.0], [83.5, 890.0], [83.6, 890.0], [83.7, 891.0], [83.8, 891.0], [83.9, 891.0], [84.0, 892.0], [84.1, 892.0], [84.2, 892.0], [84.3, 892.0], [84.4, 892.0], [84.5, 892.0], [84.6, 892.0], [84.7, 892.0], [84.8, 892.0], [84.9, 892.0], [85.0, 898.0], [85.1, 898.0], [85.2, 898.0], [85.3, 898.0], [85.4, 900.0], [85.5, 900.0], [85.6, 900.0], [85.7, 902.0], [85.8, 902.0], [85.9, 902.0], [86.0, 902.0], [86.1, 902.0], [86.2, 902.0], [86.3, 902.0], [86.4, 905.0], [86.5, 905.0], [86.6, 905.0], [86.7, 906.0], [86.8, 906.0], [86.9, 906.0], [87.0, 909.0], [87.1, 909.0], [87.2, 909.0], [87.3, 909.0], [87.4, 909.0], [87.5, 909.0], [87.6, 909.0], [87.7, 911.0], [87.8, 911.0], [87.9, 911.0], [88.0, 913.0], [88.1, 913.0], [88.2, 913.0], [88.3, 913.0], [88.4, 913.0], [88.5, 913.0], [88.6, 913.0], [88.7, 915.0], [88.8, 915.0], [88.9, 915.0], [89.0, 918.0], [89.1, 918.0], [89.2, 918.0], [89.3, 918.0], [89.4, 919.0], [89.5, 919.0], [89.6, 919.0], [89.7, 920.0], [89.8, 920.0], [89.9, 920.0], [90.0, 924.0], [90.1, 924.0], [90.2, 924.0], [90.3, 924.0], [90.4, 924.0], [90.5, 924.0], [90.6, 924.0], [90.7, 926.0], [90.8, 926.0], [90.9, 926.0], [91.0, 928.0], [91.1, 928.0], [91.2, 928.0], [91.3, 928.0], [91.4, 929.0], [91.5, 929.0], [91.6, 929.0], [91.7, 931.0], [91.8, 931.0], [91.9, 931.0], [92.0, 933.0], [92.1, 933.0], [92.2, 933.0], [92.3, 933.0], [92.4, 935.0], [92.5, 935.0], [92.6, 935.0], [92.7, 954.0], [92.8, 954.0], [92.9, 954.0], [93.0, 959.0], [93.1, 959.0], [93.2, 959.0], [93.3, 959.0], [93.4, 960.0], [93.5, 960.0], [93.6, 960.0], [93.7, 969.0], [93.8, 969.0], [93.9, 969.0], [94.0, 972.0], [94.1, 972.0], [94.2, 972.0], [94.3, 972.0], [94.4, 1119.0], [94.5, 1119.0], [94.6, 1119.0], [94.7, 1126.0], [94.8, 1126.0], [94.9, 1126.0], [95.0, 1128.0], [95.1, 1128.0], [95.2, 1128.0], [95.3, 1128.0], [95.4, 1155.0], [95.5, 1155.0], [95.6, 1155.0], [95.7, 1167.0], [95.8, 1167.0], [95.9, 1167.0], [96.0, 1174.0], [96.1, 1174.0], [96.2, 1174.0], [96.3, 1174.0], [96.4, 1186.0], [96.5, 1186.0], [96.6, 1186.0], [96.7, 1189.0], [96.8, 1189.0], [96.9, 1189.0], [97.0, 1195.0], [97.1, 1195.0], [97.2, 1195.0], [97.3, 1195.0], [97.4, 1199.0], [97.5, 1199.0], [97.6, 1199.0], [97.7, 1221.0], [97.8, 1221.0], [97.9, 1221.0], [98.0, 1226.0], [98.1, 1226.0], [98.2, 1226.0], [98.3, 1226.0], [98.4, 1244.0], [98.5, 1244.0], [98.6, 1244.0], [98.7, 1344.0], [98.8, 1344.0], [98.9, 1344.0], [99.0, 1476.0], [99.1, 1476.0], [99.2, 1476.0], [99.3, 1476.0], [99.4, 1502.0], [99.5, 1502.0], [99.6, 1502.0], [99.7, 1515.0], [99.8, 1515.0], [99.9, 1515.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 69.0, "series": [{"data": [[0.0, 13.0], [600.0, 28.0], [700.0, 5.0], [200.0, 57.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 9.0], [1100.0, 21.0], [300.0, 25.0], [1200.0, 9.0], [1300.0, 6.0], [1400.0, 2.0], [1500.0, 3.0], [400.0, 30.0], [100.0, 67.0], [500.0, 18.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[600.0, 8.0], [700.0, 9.0], [800.0, 10.0], [900.0, 2.0], [1000.0, 3.0], [1100.0, 10.0], [1200.0, 9.0], [1300.0, 5.0], [1400.0, 10.0], [1500.0, 9.0], [1600.0, 8.0], [100.0, 29.0], [1700.0, 10.0], [1800.0, 14.0], [1900.0, 15.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 12.0], [2300.0, 8.0], [2400.0, 5.0], [2500.0, 7.0], [2600.0, 9.0], [2800.0, 12.0], [2700.0, 21.0], [2900.0, 3.0], [3000.0, 8.0], [200.0, 15.0], [300.0, 22.0], [400.0, 10.0], [500.0, 7.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 4.0], [600.0, 20.0], [700.0, 25.0], [200.0, 69.0], [800.0, 44.0], [900.0, 27.0], [1100.0, 10.0], [300.0, 25.0], [1200.0, 3.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 2.0], [100.0, 58.0], [400.0, 6.0], [500.0, 5.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 154.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [[0.0, 269.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 177.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 154.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 300.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 145.1855555555555, "minX": 1.73039796E12, "maxY": 145.1855555555555, "series": [{"data": [[1.73039796E12, 145.1855555555555]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039796E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 2824.6666666666665, "series": [{"data": [[3.0, 84.0], [4.0, 92.0], [5.0, 109.0], [6.0, 106.0], [7.0, 165.0], [10.0, 117.0], [11.0, 169.5], [12.0, 167.0], [13.0, 158.0], [14.0, 167.0], [15.0, 152.0], [16.0, 178.0], [17.0, 135.0], [18.0, 160.0], [19.0, 140.0], [20.0, 135.0], [22.0, 112.0], [23.0, 142.0], [25.0, 140.0], [27.0, 150.5], [29.0, 116.0], [30.0, 82.0], [31.0, 510.0], [32.0, 163.0], [38.0, 341.0], [41.0, 1202.0], [40.0, 1143.0], [43.0, 146.0], [42.0, 1057.0], [44.0, 421.0], [45.0, 899.0], [47.0, 248.0], [46.0, 176.66666666666666], [49.0, 195.25], [48.0, 216.0], [51.0, 221.25], [50.0, 276.5], [53.0, 235.0], [52.0, 253.0], [55.0, 262.0], [54.0, 260.0], [56.0, 301.0], [59.0, 131.0], [66.0, 221.0], [68.0, 204.5], [76.0, 171.0], [81.0, 160.0], [89.0, 172.0], [102.0, 162.0], [105.0, 128.0], [104.0, 96.0], [108.0, 130.0], [115.0, 148.0], [118.0, 137.0], [117.0, 275.0], [123.0, 139.0], [127.0, 773.4459459459458], [124.0, 290.0], [135.0, 279.5], [133.0, 277.0], [132.0, 272.0], [131.0, 332.0], [130.0, 313.0], [128.0, 304.0], [142.0, 239.0], [141.0, 234.0], [140.0, 237.0], [139.0, 721.6285714285714], [137.0, 319.0], [146.0, 190.5], [145.0, 239.0], [144.0, 255.0], [156.0, 239.0], [155.0, 238.0], [154.0, 695.0], [152.0, 696.0], [167.0, 601.0], [165.0, 460.4], [164.0, 505.0], [163.0, 227.14285714285714], [162.0, 672.0], [166.0, 464.0], [161.0, 667.0], [175.0, 624.0], [174.0, 652.0], [173.0, 195.25], [169.0, 348.0], [180.0, 600.0], [179.0, 590.0], [177.0, 657.0], [176.0, 647.0], [189.0, 514.0], [187.0, 496.0], [186.0, 469.0], [185.0, 532.0], [198.0, 456.5], [196.0, 565.0], [195.0, 440.8333333333333], [192.0, 539.0], [201.0, 540.0], [207.0, 319.0], [206.0, 360.0], [205.0, 458.0], [204.0, 434.5], [202.0, 586.0], [200.0, 457.5], [215.0, 374.0], [214.0, 415.0], [213.0, 405.0], [212.0, 473.0], [211.0, 477.0], [210.0, 488.0], [208.0, 336.0], [217.0, 159.0], [220.0, 237.0], [219.0, 242.0], [218.0, 261.0], [216.0, 424.0], [1.0, 45.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[121.50333333333325, 485.3566666666669]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[39.0, 207.0], [40.0, 155.0], [41.0, 220.5], [43.0, 582.0], [42.0, 410.8], [44.0, 615.5], [45.0, 1043.0], [47.0, 167.0], [46.0, 309.3333333333333], [48.0, 285.5], [49.0, 383.25], [51.0, 212.85714285714286], [53.0, 163.0], [55.0, 362.16666666666663], [54.0, 308.0], [57.0, 154.0], [56.0, 266.0], [59.0, 161.5], [60.0, 173.0], [127.0, 865.5555555555555], [139.0, 625.3333333333334], [164.0, 834.0], [175.0, 137.0], [181.0, 632.0], [179.0, 705.0], [188.0, 1756.0], [191.0, 1528.650793650794], [189.0, 586.0], [185.0, 580.0], [184.0, 691.0], [193.0, 1865.3000000000002], [194.0, 2201.0], [196.0, 1748.357142857143], [198.0, 1695.25], [199.0, 1349.6666666666667], [200.0, 1836.5454545454545], [201.0, 1178.8823529411766], [205.0, 2633.4677419354834], [204.0, 2521.125], [206.0, 2824.6666666666665], [212.0, 280.0], [213.0, 139.8], [215.0, 164.0], [218.0, 203.0], [19.0, 193.66666666666666], [29.0, 982.0], [30.0, 1110.6666666666667], [31.0, 825.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[159.68333333333322, 1462.666666666668]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[6.0, 166.0], [12.0, 166.33333333333334], [16.0, 169.5], [17.0, 138.5], [19.0, 100.66666666666667], [20.0, 139.0], [22.0, 148.0], [28.0, 104.0], [30.0, 146.0], [33.0, 284.0], [38.0, 247.0], [39.0, 310.42857142857144], [40.0, 132.5], [41.0, 660.5], [42.0, 149.0], [43.0, 346.5], [45.0, 312.5], [47.0, 312.0], [46.0, 110.0], [48.0, 297.33333333333337], [49.0, 259.85714285714283], [51.0, 262.0], [50.0, 317.5], [53.0, 248.0], [52.0, 234.0], [55.0, 348.4], [54.0, 269.5], [56.0, 201.0], [118.0, 122.0], [127.0, 636.7058823529412], [139.0, 896.0], [146.0, 216.0], [145.0, 695.0], [158.0, 909.0], [154.0, 231.0], [163.0, 736.1538461538462], [162.0, 766.6666666666666], [166.0, 810.4], [165.0, 742.25], [179.0, 631.0], [177.0, 566.0], [191.0, 241.0], [198.0, 214.66666666666669], [194.0, 515.0], [205.0, 877.0], [204.0, 908.9999999999999], [203.0, 893.5], [201.0, 673.7051282051286], [208.0, 523.0], [212.0, 680.6666666666666], [215.0, 402.0], [214.0, 174.0], [213.0, 132.0], [219.0, 163.0], [218.0, 196.25000000000003], [220.0, 253.08000000000004], [217.0, 83.0], [216.0, 81.0]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[154.36666666666667, 518.4266666666666]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 220.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.73039796E12, "maxY": 9330.0, "series": [{"data": [[1.73039796E12, 9330.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73039796E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039796E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 485.3566666666669, "minX": 1.73039796E12, "maxY": 1462.666666666668, "series": [{"data": [[1.73039796E12, 485.3566666666669]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039796E12, 1462.666666666668]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039796E12, 518.4266666666666]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039796E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 476.5499999999999, "minX": 1.73039796E12, "maxY": 1245.98, "series": [{"data": [[1.73039796E12, 476.5499999999999]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039796E12, 1245.98]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039796E12, 515.3333333333331]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039796E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73039796E12, "maxY": 339.4666666666663, "series": [{"data": [[1.73039796E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039796E12, 339.4666666666663]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039796E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039796E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.73039796E12, "maxY": 3090.0, "series": [{"data": [[1.73039796E12, 3090.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73039796E12, 2499.2999999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73039796E12, 3068.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73039796E12, 2783.7499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73039796E12, 45.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73039796E12, 624.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039796E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 146.0, "minX": 31.0, "maxY": 2608.0, "series": [{"data": [[135.0, 1746.5], [257.0, 472.0], [113.0, 314.0], [240.0, 2608.0], [124.0, 233.0], [31.0, 146.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[135.0, 293.0], [257.0, 840.0], [113.0, 276.0], [240.0, 707.0], [124.0, 193.0], [31.0, 154.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 257.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 145.5, "minX": 31.0, "maxY": 1578.5, "series": [{"data": [[135.0, 1578.5], [257.0, 458.0], [113.0, 314.0], [240.0, 1546.0], [124.0, 233.0], [31.0, 145.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[135.0, 293.0], [257.0, 816.0], [113.0, 276.0], [240.0, 707.0], [124.0, 193.0], [31.0, 154.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 257.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039796E12, "maxY": 15.0, "series": [{"data": [[1.73039796E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039796E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039796E12, "maxY": 15.0, "series": [{"data": [[1.73039796E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039796E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039796E12, "maxY": 5.0, "series": [{"data": [[1.73039796E12, 5.0]], "isOverall": false, "label": "Home Request-failure", "isController": false}, {"data": [[1.73039796E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.73039796E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039796E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039796E12, "maxY": 10.0, "series": [{"data": [[1.73039796E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73039796E12, 5.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039796E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

