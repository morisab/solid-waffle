/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 32.0, "minX": 0.0, "maxY": 2254.0, "series": [{"data": [[0.0, 32.0], [0.1, 32.0], [0.2, 32.0], [0.3, 32.0], [0.4, 32.0], [0.5, 32.0], [0.6, 32.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 40.0], [1.1, 40.0], [1.2, 40.0], [1.3, 40.0], [1.4, 44.0], [1.5, 44.0], [1.6, 44.0], [1.7, 46.0], [1.8, 46.0], [1.9, 46.0], [2.0, 48.0], [2.1, 48.0], [2.2, 48.0], [2.3, 48.0], [2.4, 55.0], [2.5, 55.0], [2.6, 55.0], [2.7, 58.0], [2.8, 58.0], [2.9, 58.0], [3.0, 60.0], [3.1, 60.0], [3.2, 60.0], [3.3, 60.0], [3.4, 62.0], [3.5, 62.0], [3.6, 62.0], [3.7, 64.0], [3.8, 64.0], [3.9, 64.0], [4.0, 64.0], [4.1, 64.0], [4.2, 64.0], [4.3, 64.0], [4.4, 67.0], [4.5, 67.0], [4.6, 67.0], [4.7, 67.0], [4.8, 67.0], [4.9, 67.0], [5.0, 67.0], [5.1, 69.0], [5.2, 69.0], [5.3, 69.0], [5.4, 69.0], [5.5, 69.0], [5.6, 69.0], [5.7, 70.0], [5.8, 70.0], [5.9, 70.0], [6.0, 70.0], [6.1, 71.0], [6.2, 71.0], [6.3, 71.0], [6.4, 73.0], [6.5, 73.0], [6.6, 73.0], [6.7, 73.0], [6.8, 73.0], [6.9, 73.0], [7.0, 73.0], [7.1, 74.0], [7.2, 74.0], [7.3, 74.0], [7.4, 76.0], [7.5, 76.0], [7.6, 76.0], [7.7, 80.0], [7.8, 80.0], [7.9, 80.0], [8.0, 81.0], [8.1, 81.0], [8.2, 81.0], [8.3, 81.0], [8.4, 82.0], [8.5, 82.0], [8.6, 82.0], [8.7, 84.0], [8.8, 84.0], [8.9, 84.0], [9.0, 84.0], [9.1, 84.0], [9.2, 84.0], [9.3, 84.0], [9.4, 86.0], [9.5, 86.0], [9.6, 86.0], [9.7, 87.0], [9.8, 87.0], [9.9, 87.0], [10.0, 87.0], [10.1, 87.0], [10.2, 87.0], [10.3, 87.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 89.0], [10.8, 89.0], [10.9, 89.0], [11.0, 89.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 90.0], [11.8, 90.0], [11.9, 90.0], [12.0, 90.0], [12.1, 90.0], [12.2, 90.0], [12.3, 90.0], [12.4, 91.0], [12.5, 91.0], [12.6, 91.0], [12.7, 91.0], [12.8, 91.0], [12.9, 91.0], [13.0, 92.0], [13.1, 92.0], [13.2, 92.0], [13.3, 92.0], [13.4, 93.0], [13.5, 93.0], [13.6, 93.0], [13.7, 96.0], [13.8, 96.0], [13.9, 96.0], [14.0, 96.0], [14.1, 103.0], [14.2, 103.0], [14.3, 103.0], [14.4, 103.0], [14.5, 103.0], [14.6, 103.0], [14.7, 105.0], [14.8, 105.0], [14.9, 105.0], [15.0, 105.0], [15.1, 106.0], [15.2, 106.0], [15.3, 106.0], [15.4, 106.0], [15.5, 106.0], [15.6, 106.0], [15.7, 106.0], [15.8, 106.0], [15.9, 106.0], [16.0, 109.0], [16.1, 109.0], [16.2, 109.0], [16.3, 109.0], [16.4, 113.0], [16.5, 113.0], [16.6, 113.0], [16.7, 114.0], [16.8, 114.0], [16.9, 114.0], [17.0, 114.0], [17.1, 114.0], [17.2, 114.0], [17.3, 114.0], [17.4, 114.0], [17.5, 114.0], [17.6, 114.0], [17.7, 118.0], [17.8, 118.0], [17.9, 118.0], [18.0, 118.0], [18.1, 118.0], [18.2, 118.0], [18.3, 118.0], [18.4, 119.0], [18.5, 119.0], [18.6, 119.0], [18.7, 120.0], [18.8, 120.0], [18.9, 120.0], [19.0, 120.0], [19.1, 120.0], [19.2, 120.0], [19.3, 120.0], [19.4, 122.0], [19.5, 122.0], [19.6, 122.0], [19.7, 123.0], [19.8, 123.0], [19.9, 123.0], [20.0, 123.0], [20.1, 123.0], [20.2, 123.0], [20.3, 123.0], [20.4, 123.0], [20.5, 123.0], [20.6, 123.0], [20.7, 124.0], [20.8, 124.0], [20.9, 124.0], [21.0, 124.0], [21.1, 124.0], [21.2, 124.0], [21.3, 124.0], [21.4, 124.0], [21.5, 124.0], [21.6, 124.0], [21.7, 125.0], [21.8, 125.0], [21.9, 125.0], [22.0, 126.0], [22.1, 126.0], [22.2, 126.0], [22.3, 126.0], [22.4, 127.0], [22.5, 127.0], [22.6, 127.0], [22.7, 128.0], [22.8, 128.0], [22.9, 128.0], [23.0, 136.0], [23.1, 136.0], [23.2, 136.0], [23.3, 136.0], [23.4, 140.0], [23.5, 140.0], [23.6, 140.0], [23.7, 144.0], [23.8, 144.0], [23.9, 144.0], [24.0, 145.0], [24.1, 145.0], [24.2, 145.0], [24.3, 145.0], [24.4, 145.0], [24.5, 145.0], [24.6, 145.0], [24.7, 147.0], [24.8, 147.0], [24.9, 147.0], [25.0, 148.0], [25.1, 148.0], [25.2, 148.0], [25.3, 148.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 149.0], [25.8, 149.0], [25.9, 149.0], [26.0, 150.0], [26.1, 150.0], [26.2, 150.0], [26.3, 150.0], [26.4, 151.0], [26.5, 151.0], [26.6, 151.0], [26.7, 152.0], [26.8, 152.0], [26.9, 152.0], [27.0, 152.0], [27.1, 152.0], [27.2, 152.0], [27.3, 152.0], [27.4, 154.0], [27.5, 154.0], [27.6, 154.0], [27.7, 154.0], [27.8, 154.0], [27.9, 154.0], [28.0, 155.0], [28.1, 155.0], [28.2, 155.0], [28.3, 155.0], [28.4, 155.0], [28.5, 155.0], [28.6, 155.0], [28.7, 155.0], [28.8, 155.0], [28.9, 155.0], [29.0, 156.0], [29.1, 156.0], [29.2, 156.0], [29.3, 156.0], [29.4, 158.0], [29.5, 158.0], [29.6, 158.0], [29.7, 158.0], [29.8, 158.0], [29.9, 158.0], [30.0, 158.0], [30.1, 158.0], [30.2, 158.0], [30.3, 158.0], [30.4, 159.0], [30.5, 159.0], [30.6, 159.0], [30.7, 161.0], [30.8, 161.0], [30.9, 161.0], [31.0, 161.0], [31.1, 161.0], [31.2, 161.0], [31.3, 161.0], [31.4, 162.0], [31.5, 162.0], [31.6, 162.0], [31.7, 162.0], [31.8, 162.0], [31.9, 162.0], [32.0, 162.0], [32.1, 162.0], [32.2, 162.0], [32.3, 162.0], [32.4, 164.0], [32.5, 164.0], [32.6, 164.0], [32.7, 166.0], [32.8, 166.0], [32.9, 166.0], [33.0, 168.0], [33.1, 168.0], [33.2, 168.0], [33.3, 168.0], [33.4, 169.0], [33.5, 169.0], [33.6, 169.0], [33.7, 171.0], [33.8, 171.0], [33.9, 171.0], [34.0, 172.0], [34.1, 172.0], [34.2, 172.0], [34.3, 172.0], [34.4, 173.0], [34.5, 173.0], [34.6, 173.0], [34.7, 174.0], [34.8, 174.0], [34.9, 174.0], [35.0, 174.0], [35.1, 174.0], [35.2, 174.0], [35.3, 174.0], [35.4, 175.0], [35.5, 175.0], [35.6, 175.0], [35.7, 175.0], [35.8, 175.0], [35.9, 175.0], [36.0, 176.0], [36.1, 176.0], [36.2, 176.0], [36.3, 176.0], [36.4, 177.0], [36.5, 177.0], [36.6, 177.0], [36.7, 179.0], [36.8, 179.0], [36.9, 179.0], [37.0, 179.0], [37.1, 181.0], [37.2, 181.0], [37.3, 181.0], [37.4, 183.0], [37.5, 183.0], [37.6, 183.0], [37.7, 183.0], [37.8, 183.0], [37.9, 183.0], [38.0, 183.0], [38.1, 183.0], [38.2, 183.0], [38.3, 183.0], [38.4, 184.0], [38.5, 184.0], [38.6, 184.0], [38.7, 184.0], [38.8, 184.0], [38.9, 184.0], [39.0, 184.0], [39.1, 186.0], [39.2, 186.0], [39.3, 186.0], [39.4, 187.0], [39.5, 187.0], [39.6, 187.0], [39.7, 188.0], [39.8, 188.0], [39.9, 188.0], [40.0, 188.0], [40.1, 189.0], [40.2, 189.0], [40.3, 189.0], [40.4, 191.0], [40.5, 191.0], [40.6, 191.0], [40.7, 192.0], [40.8, 192.0], [40.9, 192.0], [41.0, 192.0], [41.1, 193.0], [41.2, 193.0], [41.3, 193.0], [41.4, 194.0], [41.5, 194.0], [41.6, 194.0], [41.7, 197.0], [41.8, 197.0], [41.9, 197.0], [42.0, 197.0], [42.1, 198.0], [42.2, 198.0], [42.3, 198.0], [42.4, 198.0], [42.5, 198.0], [42.6, 198.0], [42.7, 199.0], [42.8, 199.0], [42.9, 199.0], [43.0, 199.0], [43.1, 203.0], [43.2, 203.0], [43.3, 203.0], [43.4, 206.0], [43.5, 206.0], [43.6, 206.0], [43.7, 207.0], [43.8, 207.0], [43.9, 207.0], [44.0, 207.0], [44.1, 208.0], [44.2, 208.0], [44.3, 208.0], [44.4, 208.0], [44.5, 208.0], [44.6, 208.0], [44.7, 208.0], [44.8, 208.0], [44.9, 208.0], [45.0, 208.0], [45.1, 210.0], [45.2, 210.0], [45.3, 210.0], [45.4, 210.0], [45.5, 210.0], [45.6, 210.0], [45.7, 211.0], [45.8, 211.0], [45.9, 211.0], [46.0, 211.0], [46.1, 212.0], [46.2, 212.0], [46.3, 212.0], [46.4, 212.0], [46.5, 212.0], [46.6, 212.0], [46.7, 213.0], [46.8, 213.0], [46.9, 213.0], [47.0, 213.0], [47.1, 214.0], [47.2, 214.0], [47.3, 214.0], [47.4, 221.0], [47.5, 221.0], [47.6, 221.0], [47.7, 222.0], [47.8, 222.0], [47.9, 222.0], [48.0, 222.0], [48.1, 227.0], [48.2, 227.0], [48.3, 227.0], [48.4, 227.0], [48.5, 227.0], [48.6, 227.0], [48.7, 231.0], [48.8, 231.0], [48.9, 231.0], [49.0, 231.0], [49.1, 239.0], [49.2, 239.0], [49.3, 239.0], [49.4, 249.0], [49.5, 249.0], [49.6, 249.0], [49.7, 251.0], [49.8, 251.0], [49.9, 251.0], [50.0, 251.0], [50.1, 253.0], [50.2, 253.0], [50.3, 253.0], [50.4, 254.0], [50.5, 254.0], [50.6, 254.0], [50.7, 255.0], [50.8, 255.0], [50.9, 255.0], [51.0, 255.0], [51.1, 260.0], [51.2, 260.0], [51.3, 260.0], [51.4, 263.0], [51.5, 263.0], [51.6, 263.0], [51.7, 266.0], [51.8, 266.0], [51.9, 266.0], [52.0, 266.0], [52.1, 267.0], [52.2, 267.0], [52.3, 267.0], [52.4, 268.0], [52.5, 268.0], [52.6, 268.0], [52.7, 269.0], [52.8, 269.0], [52.9, 269.0], [53.0, 269.0], [53.1, 270.0], [53.2, 270.0], [53.3, 270.0], [53.4, 270.0], [53.5, 270.0], [53.6, 270.0], [53.7, 271.0], [53.8, 271.0], [53.9, 271.0], [54.0, 271.0], [54.1, 273.0], [54.2, 273.0], [54.3, 273.0], [54.4, 273.0], [54.5, 273.0], [54.6, 273.0], [54.7, 274.0], [54.8, 274.0], [54.9, 274.0], [55.0, 274.0], [55.1, 275.0], [55.2, 275.0], [55.3, 275.0], [55.4, 285.0], [55.5, 285.0], [55.6, 285.0], [55.7, 286.0], [55.8, 286.0], [55.9, 286.0], [56.0, 286.0], [56.1, 287.0], [56.2, 287.0], [56.3, 287.0], [56.4, 289.0], [56.5, 289.0], [56.6, 289.0], [56.7, 291.0], [56.8, 291.0], [56.9, 291.0], [57.0, 291.0], [57.1, 292.0], [57.2, 292.0], [57.3, 292.0], [57.4, 293.0], [57.5, 293.0], [57.6, 293.0], [57.7, 309.0], [57.8, 309.0], [57.9, 309.0], [58.0, 309.0], [58.1, 313.0], [58.2, 313.0], [58.3, 313.0], [58.4, 316.0], [58.5, 316.0], [58.6, 316.0], [58.7, 320.0], [58.8, 320.0], [58.9, 320.0], [59.0, 320.0], [59.1, 338.0], [59.2, 338.0], [59.3, 338.0], [59.4, 339.0], [59.5, 339.0], [59.6, 339.0], [59.7, 344.0], [59.8, 344.0], [59.9, 344.0], [60.0, 344.0], [60.1, 351.0], [60.2, 351.0], [60.3, 351.0], [60.4, 360.0], [60.5, 360.0], [60.6, 360.0], [60.7, 364.0], [60.8, 364.0], [60.9, 364.0], [61.0, 364.0], [61.1, 370.0], [61.2, 370.0], [61.3, 370.0], [61.4, 370.0], [61.5, 370.0], [61.6, 370.0], [61.7, 380.0], [61.8, 380.0], [61.9, 380.0], [62.0, 380.0], [62.1, 381.0], [62.2, 381.0], [62.3, 381.0], [62.4, 383.0], [62.5, 383.0], [62.6, 383.0], [62.7, 383.0], [62.8, 383.0], [62.9, 383.0], [63.0, 383.0], [63.1, 384.0], [63.2, 384.0], [63.3, 384.0], [63.4, 384.0], [63.5, 384.0], [63.6, 384.0], [63.7, 387.0], [63.8, 387.0], [63.9, 387.0], [64.0, 387.0], [64.1, 392.0], [64.2, 392.0], [64.3, 392.0], [64.4, 402.0], [64.5, 402.0], [64.6, 402.0], [64.7, 408.0], [64.8, 408.0], [64.9, 408.0], [65.0, 408.0], [65.1, 412.0], [65.2, 412.0], [65.3, 412.0], [65.4, 432.0], [65.5, 432.0], [65.6, 432.0], [65.7, 433.0], [65.8, 433.0], [65.9, 433.0], [66.0, 433.0], [66.1, 433.0], [66.2, 433.0], [66.3, 433.0], [66.4, 435.0], [66.5, 435.0], [66.6, 435.0], [66.7, 437.0], [66.8, 437.0], [66.9, 437.0], [67.0, 437.0], [67.1, 438.0], [67.2, 438.0], [67.3, 438.0], [67.4, 441.0], [67.5, 441.0], [67.6, 441.0], [67.7, 444.0], [67.8, 444.0], [67.9, 444.0], [68.0, 444.0], [68.1, 446.0], [68.2, 446.0], [68.3, 446.0], [68.4, 451.0], [68.5, 451.0], [68.6, 451.0], [68.7, 453.0], [68.8, 453.0], [68.9, 453.0], [69.0, 453.0], [69.1, 613.0], [69.2, 613.0], [69.3, 613.0], [69.4, 647.0], [69.5, 647.0], [69.6, 647.0], [69.7, 662.0], [69.8, 662.0], [69.9, 662.0], [70.0, 662.0], [70.1, 666.0], [70.2, 666.0], [70.3, 666.0], [70.4, 671.0], [70.5, 671.0], [70.6, 671.0], [70.7, 671.0], [70.8, 671.0], [70.9, 671.0], [71.0, 671.0], [71.1, 679.0], [71.2, 679.0], [71.3, 679.0], [71.4, 680.0], [71.5, 680.0], [71.6, 680.0], [71.7, 681.0], [71.8, 681.0], [71.9, 681.0], [72.0, 681.0], [72.1, 686.0], [72.2, 686.0], [72.3, 686.0], [72.4, 686.0], [72.5, 686.0], [72.6, 686.0], [72.7, 701.0], [72.8, 701.0], [72.9, 701.0], [73.0, 701.0], [73.1, 738.0], [73.2, 738.0], [73.3, 738.0], [73.4, 742.0], [73.5, 742.0], [73.6, 742.0], [73.7, 742.0], [73.8, 742.0], [73.9, 742.0], [74.0, 742.0], [74.1, 750.0], [74.2, 750.0], [74.3, 750.0], [74.4, 750.0], [74.5, 750.0], [74.6, 750.0], [74.7, 751.0], [74.8, 751.0], [74.9, 751.0], [75.0, 751.0], [75.1, 758.0], [75.2, 758.0], [75.3, 758.0], [75.4, 759.0], [75.5, 759.0], [75.6, 759.0], [75.7, 765.0], [75.8, 765.0], [75.9, 765.0], [76.0, 765.0], [76.1, 787.0], [76.2, 787.0], [76.3, 787.0], [76.4, 787.0], [76.5, 787.0], [76.6, 787.0], [76.7, 791.0], [76.8, 791.0], [76.9, 791.0], [77.0, 791.0], [77.1, 792.0], [77.2, 792.0], [77.3, 792.0], [77.4, 797.0], [77.5, 797.0], [77.6, 797.0], [77.7, 801.0], [77.8, 801.0], [77.9, 801.0], [78.0, 834.0], [78.1, 834.0], [78.2, 834.0], [78.3, 834.0], [78.4, 844.0], [78.5, 844.0], [78.6, 844.0], [78.7, 851.0], [78.8, 851.0], [78.9, 851.0], [79.0, 853.0], [79.1, 853.0], [79.2, 853.0], [79.3, 853.0], [79.4, 862.0], [79.5, 862.0], [79.6, 862.0], [79.7, 904.0], [79.8, 904.0], [79.9, 904.0], [80.0, 906.0], [80.1, 906.0], [80.2, 906.0], [80.3, 906.0], [80.4, 909.0], [80.5, 909.0], [80.6, 909.0], [80.7, 924.0], [80.8, 924.0], [80.9, 924.0], [81.0, 925.0], [81.1, 925.0], [81.2, 925.0], [81.3, 925.0], [81.4, 932.0], [81.5, 932.0], [81.6, 932.0], [81.7, 932.0], [81.8, 932.0], [81.9, 932.0], [82.0, 933.0], [82.1, 933.0], [82.2, 933.0], [82.3, 933.0], [82.4, 936.0], [82.5, 936.0], [82.6, 936.0], [82.7, 976.0], [82.8, 976.0], [82.9, 976.0], [83.0, 994.0], [83.1, 994.0], [83.2, 994.0], [83.3, 994.0], [83.4, 998.0], [83.5, 998.0], [83.6, 998.0], [83.7, 1000.0], [83.8, 1000.0], [83.9, 1000.0], [84.0, 1004.0], [84.1, 1004.0], [84.2, 1004.0], [84.3, 1004.0], [84.4, 1007.0], [84.5, 1007.0], [84.6, 1007.0], [84.7, 1013.0], [84.8, 1013.0], [84.9, 1013.0], [85.0, 1024.0], [85.1, 1024.0], [85.2, 1024.0], [85.3, 1024.0], [85.4, 1045.0], [85.5, 1045.0], [85.6, 1045.0], [85.7, 1058.0], [85.8, 1058.0], [85.9, 1058.0], [86.0, 1076.0], [86.1, 1076.0], [86.2, 1076.0], [86.3, 1076.0], [86.4, 1103.0], [86.5, 1103.0], [86.6, 1103.0], [86.7, 1116.0], [86.8, 1116.0], [86.9, 1116.0], [87.0, 1127.0], [87.1, 1127.0], [87.2, 1127.0], [87.3, 1127.0], [87.4, 1136.0], [87.5, 1136.0], [87.6, 1136.0], [87.7, 1145.0], [87.8, 1145.0], [87.9, 1145.0], [88.0, 1164.0], [88.1, 1164.0], [88.2, 1164.0], [88.3, 1164.0], [88.4, 1181.0], [88.5, 1181.0], [88.6, 1181.0], [88.7, 1212.0], [88.8, 1212.0], [88.9, 1212.0], [89.0, 1221.0], [89.1, 1221.0], [89.2, 1221.0], [89.3, 1221.0], [89.4, 1226.0], [89.5, 1226.0], [89.6, 1226.0], [89.7, 1227.0], [89.8, 1227.0], [89.9, 1227.0], [90.0, 1229.0], [90.1, 1229.0], [90.2, 1229.0], [90.3, 1229.0], [90.4, 1236.0], [90.5, 1236.0], [90.6, 1236.0], [90.7, 1236.0], [90.8, 1236.0], [90.9, 1236.0], [91.0, 1237.0], [91.1, 1237.0], [91.2, 1237.0], [91.3, 1237.0], [91.4, 1239.0], [91.5, 1239.0], [91.6, 1239.0], [91.7, 1239.0], [91.8, 1239.0], [91.9, 1239.0], [92.0, 1245.0], [92.1, 1245.0], [92.2, 1245.0], [92.3, 1245.0], [92.4, 1250.0], [92.5, 1250.0], [92.6, 1250.0], [92.7, 1251.0], [92.8, 1251.0], [92.9, 1251.0], [93.0, 1251.0], [93.1, 1251.0], [93.2, 1251.0], [93.3, 1251.0], [93.4, 1251.0], [93.5, 1251.0], [93.6, 1251.0], [93.7, 1254.0], [93.8, 1254.0], [93.9, 1254.0], [94.0, 1255.0], [94.1, 1255.0], [94.2, 1255.0], [94.3, 1255.0], [94.4, 1256.0], [94.5, 1256.0], [94.6, 1256.0], [94.7, 1257.0], [94.8, 1257.0], [94.9, 1257.0], [95.0, 1257.0], [95.1, 1257.0], [95.2, 1257.0], [95.3, 1257.0], [95.4, 1258.0], [95.5, 1258.0], [95.6, 1258.0], [95.7, 1259.0], [95.8, 1259.0], [95.9, 1259.0], [96.0, 1261.0], [96.1, 1261.0], [96.2, 1261.0], [96.3, 1261.0], [96.4, 1270.0], [96.5, 1270.0], [96.6, 1270.0], [96.7, 1289.0], [96.8, 1289.0], [96.9, 1289.0], [97.0, 1296.0], [97.1, 1296.0], [97.2, 1296.0], [97.3, 1296.0], [97.4, 1311.0], [97.5, 1311.0], [97.6, 1311.0], [97.7, 1325.0], [97.8, 1325.0], [97.9, 1325.0], [98.0, 1325.0], [98.1, 1325.0], [98.2, 1325.0], [98.3, 1325.0], [98.4, 1337.0], [98.5, 1337.0], [98.6, 1337.0], [98.7, 1342.0], [98.8, 1342.0], [98.9, 1342.0], [99.0, 1416.0], [99.1, 1416.0], [99.2, 1416.0], [99.3, 1416.0], [99.4, 1428.0], [99.5, 1428.0], [99.6, 1428.0], [99.7, 1461.0], [99.8, 1461.0], [99.9, 1461.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[0.0, 60.0], [0.1, 60.0], [0.2, 60.0], [0.3, 60.0], [0.4, 73.0], [0.5, 73.0], [0.6, 73.0], [0.7, 76.0], [0.8, 76.0], [0.9, 76.0], [1.0, 77.0], [1.1, 77.0], [1.2, 77.0], [1.3, 77.0], [1.4, 78.0], [1.5, 78.0], [1.6, 78.0], [1.7, 78.0], [1.8, 78.0], [1.9, 78.0], [2.0, 82.0], [2.1, 82.0], [2.2, 82.0], [2.3, 82.0], [2.4, 84.0], [2.5, 84.0], [2.6, 84.0], [2.7, 85.0], [2.8, 85.0], [2.9, 85.0], [3.0, 85.0], [3.1, 88.0], [3.2, 88.0], [3.3, 88.0], [3.4, 89.0], [3.5, 89.0], [3.6, 89.0], [3.7, 90.0], [3.8, 90.0], [3.9, 90.0], [4.0, 90.0], [4.1, 91.0], [4.2, 91.0], [4.3, 91.0], [4.4, 91.0], [4.5, 91.0], [4.6, 91.0], [4.7, 96.0], [4.8, 96.0], [4.9, 96.0], [5.0, 96.0], [5.1, 105.0], [5.2, 105.0], [5.3, 105.0], [5.4, 106.0], [5.5, 106.0], [5.6, 106.0], [5.7, 109.0], [5.8, 109.0], [5.9, 109.0], [6.0, 113.0], [6.1, 113.0], [6.2, 113.0], [6.3, 113.0], [6.4, 114.0], [6.5, 114.0], [6.6, 114.0], [6.7, 121.0], [6.8, 121.0], [6.9, 121.0], [7.0, 122.0], [7.1, 122.0], [7.2, 122.0], [7.3, 122.0], [7.4, 124.0], [7.5, 124.0], [7.6, 124.0], [7.7, 125.0], [7.8, 125.0], [7.9, 125.0], [8.0, 129.0], [8.1, 129.0], [8.2, 129.0], [8.3, 129.0], [8.4, 139.0], [8.5, 139.0], [8.6, 139.0], [8.7, 140.0], [8.8, 140.0], [8.9, 140.0], [9.0, 151.0], [9.1, 151.0], [9.2, 151.0], [9.3, 151.0], [9.4, 158.0], [9.5, 158.0], [9.6, 158.0], [9.7, 161.0], [9.8, 161.0], [9.9, 161.0], [10.0, 161.0], [10.1, 174.0], [10.2, 174.0], [10.3, 174.0], [10.4, 177.0], [10.5, 177.0], [10.6, 177.0], [10.7, 183.0], [10.8, 183.0], [10.9, 183.0], [11.0, 183.0], [11.1, 190.0], [11.2, 190.0], [11.3, 190.0], [11.4, 193.0], [11.5, 193.0], [11.6, 193.0], [11.7, 195.0], [11.8, 195.0], [11.9, 195.0], [12.0, 195.0], [12.1, 197.0], [12.2, 197.0], [12.3, 197.0], [12.4, 198.0], [12.5, 198.0], [12.6, 198.0], [12.7, 202.0], [12.8, 202.0], [12.9, 202.0], [13.0, 202.0], [13.1, 203.0], [13.2, 203.0], [13.3, 203.0], [13.4, 204.0], [13.5, 204.0], [13.6, 204.0], [13.7, 207.0], [13.8, 207.0], [13.9, 207.0], [14.0, 207.0], [14.1, 208.0], [14.2, 208.0], [14.3, 208.0], [14.4, 209.0], [14.5, 209.0], [14.6, 209.0], [14.7, 209.0], [14.8, 209.0], [14.9, 209.0], [15.0, 209.0], [15.1, 211.0], [15.2, 211.0], [15.3, 211.0], [15.4, 212.0], [15.5, 212.0], [15.6, 212.0], [15.7, 213.0], [15.8, 213.0], [15.9, 213.0], [16.0, 213.0], [16.1, 215.0], [16.2, 215.0], [16.3, 215.0], [16.4, 218.0], [16.5, 218.0], [16.6, 218.0], [16.7, 219.0], [16.8, 219.0], [16.9, 219.0], [17.0, 219.0], [17.1, 221.0], [17.2, 221.0], [17.3, 221.0], [17.4, 226.0], [17.5, 226.0], [17.6, 226.0], [17.7, 229.0], [17.8, 229.0], [17.9, 229.0], [18.0, 229.0], [18.1, 230.0], [18.2, 230.0], [18.3, 230.0], [18.4, 230.0], [18.5, 230.0], [18.6, 230.0], [18.7, 232.0], [18.8, 232.0], [18.9, 232.0], [19.0, 232.0], [19.1, 233.0], [19.2, 233.0], [19.3, 233.0], [19.4, 235.0], [19.5, 235.0], [19.6, 235.0], [19.7, 239.0], [19.8, 239.0], [19.9, 239.0], [20.0, 244.0], [20.1, 244.0], [20.2, 244.0], [20.3, 244.0], [20.4, 250.0], [20.5, 250.0], [20.6, 250.0], [20.7, 254.0], [20.8, 254.0], [20.9, 254.0], [21.0, 257.0], [21.1, 257.0], [21.2, 257.0], [21.3, 257.0], [21.4, 260.0], [21.5, 260.0], [21.6, 260.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 269.0], [22.1, 269.0], [22.2, 269.0], [22.3, 269.0], [22.4, 269.0], [22.5, 269.0], [22.6, 269.0], [22.7, 278.0], [22.8, 278.0], [22.9, 278.0], [23.0, 279.0], [23.1, 279.0], [23.2, 279.0], [23.3, 279.0], [23.4, 279.0], [23.5, 279.0], [23.6, 279.0], [23.7, 282.0], [23.8, 282.0], [23.9, 282.0], [24.0, 284.0], [24.1, 284.0], [24.2, 284.0], [24.3, 284.0], [24.4, 285.0], [24.5, 285.0], [24.6, 285.0], [24.7, 286.0], [24.8, 286.0], [24.9, 286.0], [25.0, 291.0], [25.1, 291.0], [25.2, 291.0], [25.3, 291.0], [25.4, 299.0], [25.5, 299.0], [25.6, 299.0], [25.7, 304.0], [25.8, 304.0], [25.9, 304.0], [26.0, 319.0], [26.1, 319.0], [26.2, 319.0], [26.3, 319.0], [26.4, 319.0], [26.5, 319.0], [26.6, 319.0], [26.7, 321.0], [26.8, 321.0], [26.9, 321.0], [27.0, 327.0], [27.1, 327.0], [27.2, 327.0], [27.3, 327.0], [27.4, 345.0], [27.5, 345.0], [27.6, 345.0], [27.7, 349.0], [27.8, 349.0], [27.9, 349.0], [28.0, 357.0], [28.1, 357.0], [28.2, 357.0], [28.3, 357.0], [28.4, 359.0], [28.5, 359.0], [28.6, 359.0], [28.7, 359.0], [28.8, 359.0], [28.9, 359.0], [29.0, 363.0], [29.1, 363.0], [29.2, 363.0], [29.3, 363.0], [29.4, 366.0], [29.5, 366.0], [29.6, 366.0], [29.7, 366.0], [29.8, 366.0], [29.9, 366.0], [30.0, 368.0], [30.1, 368.0], [30.2, 368.0], [30.3, 368.0], [30.4, 371.0], [30.5, 371.0], [30.6, 371.0], [30.7, 372.0], [30.8, 372.0], [30.9, 372.0], [31.0, 372.0], [31.1, 372.0], [31.2, 372.0], [31.3, 372.0], [31.4, 373.0], [31.5, 373.0], [31.6, 373.0], [31.7, 378.0], [31.8, 378.0], [31.9, 378.0], [32.0, 380.0], [32.1, 380.0], [32.2, 380.0], [32.3, 380.0], [32.4, 382.0], [32.5, 382.0], [32.6, 382.0], [32.7, 387.0], [32.8, 387.0], [32.9, 387.0], [33.0, 387.0], [33.1, 387.0], [33.2, 387.0], [33.3, 387.0], [33.4, 392.0], [33.5, 392.0], [33.6, 392.0], [33.7, 395.0], [33.8, 395.0], [33.9, 395.0], [34.0, 398.0], [34.1, 398.0], [34.2, 398.0], [34.3, 398.0], [34.4, 409.0], [34.5, 409.0], [34.6, 409.0], [34.7, 416.0], [34.8, 416.0], [34.9, 416.0], [35.0, 430.0], [35.1, 430.0], [35.2, 430.0], [35.3, 430.0], [35.4, 449.0], [35.5, 449.0], [35.6, 449.0], [35.7, 457.0], [35.8, 457.0], [35.9, 457.0], [36.0, 477.0], [36.1, 477.0], [36.2, 477.0], [36.3, 477.0], [36.4, 505.0], [36.5, 505.0], [36.6, 505.0], [36.7, 530.0], [36.8, 530.0], [36.9, 530.0], [37.0, 530.0], [37.1, 533.0], [37.2, 533.0], [37.3, 533.0], [37.4, 543.0], [37.5, 543.0], [37.6, 543.0], [37.7, 546.0], [37.8, 546.0], [37.9, 546.0], [38.0, 546.0], [38.1, 553.0], [38.2, 553.0], [38.3, 553.0], [38.4, 605.0], [38.5, 605.0], [38.6, 605.0], [38.7, 622.0], [38.8, 622.0], [38.9, 622.0], [39.0, 622.0], [39.1, 638.0], [39.2, 638.0], [39.3, 638.0], [39.4, 640.0], [39.5, 640.0], [39.6, 640.0], [39.7, 682.0], [39.8, 682.0], [39.9, 682.0], [40.0, 682.0], [40.1, 722.0], [40.2, 722.0], [40.3, 722.0], [40.4, 734.0], [40.5, 734.0], [40.6, 734.0], [40.7, 790.0], [40.8, 790.0], [40.9, 790.0], [41.0, 790.0], [41.1, 801.0], [41.2, 801.0], [41.3, 801.0], [41.4, 834.0], [41.5, 834.0], [41.6, 834.0], [41.7, 838.0], [41.8, 838.0], [41.9, 838.0], [42.0, 838.0], [42.1, 856.0], [42.2, 856.0], [42.3, 856.0], [42.4, 881.0], [42.5, 881.0], [42.6, 881.0], [42.7, 920.0], [42.8, 920.0], [42.9, 920.0], [43.0, 920.0], [43.1, 923.0], [43.2, 923.0], [43.3, 923.0], [43.4, 956.0], [43.5, 956.0], [43.6, 956.0], [43.7, 990.0], [43.8, 990.0], [43.9, 990.0], [44.0, 990.0], [44.1, 996.0], [44.2, 996.0], [44.3, 996.0], [44.4, 1024.0], [44.5, 1024.0], [44.6, 1024.0], [44.7, 1026.0], [44.8, 1026.0], [44.9, 1026.0], [45.0, 1026.0], [45.1, 1042.0], [45.2, 1042.0], [45.3, 1042.0], [45.4, 1047.0], [45.5, 1047.0], [45.6, 1047.0], [45.7, 1053.0], [45.8, 1053.0], [45.9, 1053.0], [46.0, 1053.0], [46.1, 1069.0], [46.2, 1069.0], [46.3, 1069.0], [46.4, 1082.0], [46.5, 1082.0], [46.6, 1082.0], [46.7, 1136.0], [46.8, 1136.0], [46.9, 1136.0], [47.0, 1136.0], [47.1, 1145.0], [47.2, 1145.0], [47.3, 1145.0], [47.4, 1147.0], [47.5, 1147.0], [47.6, 1147.0], [47.7, 1159.0], [47.8, 1159.0], [47.9, 1159.0], [48.0, 1159.0], [48.1, 1169.0], [48.2, 1169.0], [48.3, 1169.0], [48.4, 1177.0], [48.5, 1177.0], [48.6, 1177.0], [48.7, 1178.0], [48.8, 1178.0], [48.9, 1178.0], [49.0, 1178.0], [49.1, 1183.0], [49.2, 1183.0], [49.3, 1183.0], [49.4, 1192.0], [49.5, 1192.0], [49.6, 1192.0], [49.7, 1197.0], [49.8, 1197.0], [49.9, 1197.0], [50.0, 1197.0], [50.1, 1222.0], [50.2, 1222.0], [50.3, 1222.0], [50.4, 1228.0], [50.5, 1228.0], [50.6, 1228.0], [50.7, 1247.0], [50.8, 1247.0], [50.9, 1247.0], [51.0, 1247.0], [51.1, 1272.0], [51.2, 1272.0], [51.3, 1272.0], [51.4, 1283.0], [51.5, 1283.0], [51.6, 1283.0], [51.7, 1290.0], [51.8, 1290.0], [51.9, 1290.0], [52.0, 1290.0], [52.1, 1303.0], [52.2, 1303.0], [52.3, 1303.0], [52.4, 1306.0], [52.5, 1306.0], [52.6, 1306.0], [52.7, 1306.0], [52.8, 1306.0], [52.9, 1306.0], [53.0, 1306.0], [53.1, 1307.0], [53.2, 1307.0], [53.3, 1307.0], [53.4, 1317.0], [53.5, 1317.0], [53.6, 1317.0], [53.7, 1328.0], [53.8, 1328.0], [53.9, 1328.0], [54.0, 1328.0], [54.1, 1329.0], [54.2, 1329.0], [54.3, 1329.0], [54.4, 1331.0], [54.5, 1331.0], [54.6, 1331.0], [54.7, 1333.0], [54.8, 1333.0], [54.9, 1333.0], [55.0, 1333.0], [55.1, 1334.0], [55.2, 1334.0], [55.3, 1334.0], [55.4, 1346.0], [55.5, 1346.0], [55.6, 1346.0], [55.7, 1349.0], [55.8, 1349.0], [55.9, 1349.0], [56.0, 1349.0], [56.1, 1364.0], [56.2, 1364.0], [56.3, 1364.0], [56.4, 1377.0], [56.5, 1377.0], [56.6, 1377.0], [56.7, 1383.0], [56.8, 1383.0], [56.9, 1383.0], [57.0, 1383.0], [57.1, 1384.0], [57.2, 1384.0], [57.3, 1384.0], [57.4, 1388.0], [57.5, 1388.0], [57.6, 1388.0], [57.7, 1404.0], [57.8, 1404.0], [57.9, 1404.0], [58.0, 1404.0], [58.1, 1412.0], [58.2, 1412.0], [58.3, 1412.0], [58.4, 1417.0], [58.5, 1417.0], [58.6, 1417.0], [58.7, 1430.0], [58.8, 1430.0], [58.9, 1430.0], [59.0, 1430.0], [59.1, 1432.0], [59.2, 1432.0], [59.3, 1432.0], [59.4, 1435.0], [59.5, 1435.0], [59.6, 1435.0], [59.7, 1437.0], [59.8, 1437.0], [59.9, 1437.0], [60.0, 1437.0], [60.1, 1441.0], [60.2, 1441.0], [60.3, 1441.0], [60.4, 1442.0], [60.5, 1442.0], [60.6, 1442.0], [60.7, 1443.0], [60.8, 1443.0], [60.9, 1443.0], [61.0, 1443.0], [61.1, 1448.0], [61.2, 1448.0], [61.3, 1448.0], [61.4, 1468.0], [61.5, 1468.0], [61.6, 1468.0], [61.7, 1468.0], [61.8, 1468.0], [61.9, 1468.0], [62.0, 1468.0], [62.1, 1468.0], [62.2, 1468.0], [62.3, 1468.0], [62.4, 1486.0], [62.5, 1486.0], [62.6, 1486.0], [62.7, 1490.0], [62.8, 1490.0], [62.9, 1490.0], [63.0, 1490.0], [63.1, 1496.0], [63.2, 1496.0], [63.3, 1496.0], [63.4, 1497.0], [63.5, 1497.0], [63.6, 1497.0], [63.7, 1498.0], [63.8, 1498.0], [63.9, 1498.0], [64.0, 1498.0], [64.1, 1501.0], [64.2, 1501.0], [64.3, 1501.0], [64.4, 1504.0], [64.5, 1504.0], [64.6, 1504.0], [64.7, 1506.0], [64.8, 1506.0], [64.9, 1506.0], [65.0, 1506.0], [65.1, 1507.0], [65.2, 1507.0], [65.3, 1507.0], [65.4, 1507.0], [65.5, 1507.0], [65.6, 1507.0], [65.7, 1515.0], [65.8, 1515.0], [65.9, 1515.0], [66.0, 1515.0], [66.1, 1523.0], [66.2, 1523.0], [66.3, 1523.0], [66.4, 1532.0], [66.5, 1532.0], [66.6, 1532.0], [66.7, 1532.0], [66.8, 1532.0], [66.9, 1532.0], [67.0, 1532.0], [67.1, 1535.0], [67.2, 1535.0], [67.3, 1535.0], [67.4, 1545.0], [67.5, 1545.0], [67.6, 1545.0], [67.7, 1557.0], [67.8, 1557.0], [67.9, 1557.0], [68.0, 1557.0], [68.1, 1560.0], [68.2, 1560.0], [68.3, 1560.0], [68.4, 1570.0], [68.5, 1570.0], [68.6, 1570.0], [68.7, 1572.0], [68.8, 1572.0], [68.9, 1572.0], [69.0, 1572.0], [69.1, 1577.0], [69.2, 1577.0], [69.3, 1577.0], [69.4, 1577.0], [69.5, 1577.0], [69.6, 1577.0], [69.7, 1578.0], [69.8, 1578.0], [69.9, 1578.0], [70.0, 1578.0], [70.1, 1579.0], [70.2, 1579.0], [70.3, 1579.0], [70.4, 1581.0], [70.5, 1581.0], [70.6, 1581.0], [70.7, 1586.0], [70.8, 1586.0], [70.9, 1586.0], [71.0, 1586.0], [71.1, 1586.0], [71.2, 1586.0], [71.3, 1586.0], [71.4, 1586.0], [71.5, 1586.0], [71.6, 1586.0], [71.7, 1587.0], [71.8, 1587.0], [71.9, 1587.0], [72.0, 1587.0], [72.1, 1589.0], [72.2, 1589.0], [72.3, 1589.0], [72.4, 1591.0], [72.5, 1591.0], [72.6, 1591.0], [72.7, 1601.0], [72.8, 1601.0], [72.9, 1601.0], [73.0, 1601.0], [73.1, 1602.0], [73.2, 1602.0], [73.3, 1602.0], [73.4, 1603.0], [73.5, 1603.0], [73.6, 1603.0], [73.7, 1604.0], [73.8, 1604.0], [73.9, 1604.0], [74.0, 1604.0], [74.1, 1610.0], [74.2, 1610.0], [74.3, 1610.0], [74.4, 1611.0], [74.5, 1611.0], [74.6, 1611.0], [74.7, 1613.0], [74.8, 1613.0], [74.9, 1613.0], [75.0, 1613.0], [75.1, 1613.0], [75.2, 1613.0], [75.3, 1613.0], [75.4, 1619.0], [75.5, 1619.0], [75.6, 1619.0], [75.7, 1625.0], [75.8, 1625.0], [75.9, 1625.0], [76.0, 1625.0], [76.1, 1625.0], [76.2, 1625.0], [76.3, 1625.0], [76.4, 1628.0], [76.5, 1628.0], [76.6, 1628.0], [76.7, 1632.0], [76.8, 1632.0], [76.9, 1632.0], [77.0, 1632.0], [77.1, 1632.0], [77.2, 1632.0], [77.3, 1632.0], [77.4, 1636.0], [77.5, 1636.0], [77.6, 1636.0], [77.7, 1638.0], [77.8, 1638.0], [77.9, 1638.0], [78.0, 1638.0], [78.1, 1640.0], [78.2, 1640.0], [78.3, 1640.0], [78.4, 1641.0], [78.5, 1641.0], [78.6, 1641.0], [78.7, 1656.0], [78.8, 1656.0], [78.9, 1656.0], [79.0, 1656.0], [79.1, 1656.0], [79.2, 1656.0], [79.3, 1656.0], [79.4, 1658.0], [79.5, 1658.0], [79.6, 1658.0], [79.7, 1659.0], [79.8, 1659.0], [79.9, 1659.0], [80.0, 1659.0], [80.1, 1659.0], [80.2, 1659.0], [80.3, 1659.0], [80.4, 1659.0], [80.5, 1659.0], [80.6, 1659.0], [80.7, 1663.0], [80.8, 1663.0], [80.9, 1663.0], [81.0, 1663.0], [81.1, 1670.0], [81.2, 1670.0], [81.3, 1670.0], [81.4, 1674.0], [81.5, 1674.0], [81.6, 1674.0], [81.7, 1676.0], [81.8, 1676.0], [81.9, 1676.0], [82.0, 1676.0], [82.1, 1677.0], [82.2, 1677.0], [82.3, 1677.0], [82.4, 1678.0], [82.5, 1678.0], [82.6, 1678.0], [82.7, 1723.0], [82.8, 1723.0], [82.9, 1723.0], [83.0, 1723.0], [83.1, 1726.0], [83.2, 1726.0], [83.3, 1726.0], [83.4, 1737.0], [83.5, 1737.0], [83.6, 1737.0], [83.7, 1744.0], [83.8, 1744.0], [83.9, 1744.0], [84.0, 1744.0], [84.1, 1755.0], [84.2, 1755.0], [84.3, 1755.0], [84.4, 1769.0], [84.5, 1769.0], [84.6, 1769.0], [84.7, 1776.0], [84.8, 1776.0], [84.9, 1776.0], [85.0, 1776.0], [85.1, 1779.0], [85.2, 1779.0], [85.3, 1779.0], [85.4, 1781.0], [85.5, 1781.0], [85.6, 1781.0], [85.7, 1784.0], [85.8, 1784.0], [85.9, 1784.0], [86.0, 1784.0], [86.1, 1784.0], [86.2, 1784.0], [86.3, 1784.0], [86.4, 1790.0], [86.5, 1790.0], [86.6, 1790.0], [86.7, 1791.0], [86.8, 1791.0], [86.9, 1791.0], [87.0, 1799.0], [87.1, 1799.0], [87.2, 1799.0], [87.3, 1799.0], [87.4, 1809.0], [87.5, 1809.0], [87.6, 1809.0], [87.7, 1811.0], [87.8, 1811.0], [87.9, 1811.0], [88.0, 1833.0], [88.1, 1833.0], [88.2, 1833.0], [88.3, 1833.0], [88.4, 1837.0], [88.5, 1837.0], [88.6, 1837.0], [88.7, 1837.0], [88.8, 1837.0], [88.9, 1837.0], [89.0, 1842.0], [89.1, 1842.0], [89.2, 1842.0], [89.3, 1842.0], [89.4, 1843.0], [89.5, 1843.0], [89.6, 1843.0], [89.7, 1863.0], [89.8, 1863.0], [89.9, 1863.0], [90.0, 1879.0], [90.1, 1879.0], [90.2, 1879.0], [90.3, 1879.0], [90.4, 1881.0], [90.5, 1881.0], [90.6, 1881.0], [90.7, 1894.0], [90.8, 1894.0], [90.9, 1894.0], [91.0, 1896.0], [91.1, 1896.0], [91.2, 1896.0], [91.3, 1896.0], [91.4, 1902.0], [91.5, 1902.0], [91.6, 1902.0], [91.7, 1904.0], [91.8, 1904.0], [91.9, 1904.0], [92.0, 1908.0], [92.1, 1908.0], [92.2, 1908.0], [92.3, 1908.0], [92.4, 1910.0], [92.5, 1910.0], [92.6, 1910.0], [92.7, 1933.0], [92.8, 1933.0], [92.9, 1933.0], [93.0, 1935.0], [93.1, 1935.0], [93.2, 1935.0], [93.3, 1935.0], [93.4, 1947.0], [93.5, 1947.0], [93.6, 1947.0], [93.7, 1962.0], [93.8, 1962.0], [93.9, 1962.0], [94.0, 1964.0], [94.1, 1964.0], [94.2, 1964.0], [94.3, 1964.0], [94.4, 2007.0], [94.5, 2007.0], [94.6, 2007.0], [94.7, 2015.0], [94.8, 2015.0], [94.9, 2015.0], [95.0, 2018.0], [95.1, 2018.0], [95.2, 2018.0], [95.3, 2018.0], [95.4, 2035.0], [95.5, 2035.0], [95.6, 2035.0], [95.7, 2039.0], [95.8, 2039.0], [95.9, 2039.0], [96.0, 2045.0], [96.1, 2045.0], [96.2, 2045.0], [96.3, 2045.0], [96.4, 2052.0], [96.5, 2052.0], [96.6, 2052.0], [96.7, 2105.0], [96.8, 2105.0], [96.9, 2105.0], [97.0, 2106.0], [97.1, 2106.0], [97.2, 2106.0], [97.3, 2106.0], [97.4, 2126.0], [97.5, 2126.0], [97.6, 2126.0], [97.7, 2137.0], [97.8, 2137.0], [97.9, 2137.0], [98.0, 2150.0], [98.1, 2150.0], [98.2, 2150.0], [98.3, 2150.0], [98.4, 2156.0], [98.5, 2156.0], [98.6, 2156.0], [98.7, 2177.0], [98.8, 2177.0], [98.9, 2177.0], [99.0, 2188.0], [99.1, 2188.0], [99.2, 2188.0], [99.3, 2188.0], [99.4, 2221.0], [99.5, 2221.0], [99.6, 2221.0], [99.7, 2254.0], [99.8, 2254.0], [99.9, 2254.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 32.0], [0.1, 32.0], [0.2, 32.0], [0.3, 32.0], [0.4, 33.0], [0.5, 33.0], [0.6, 33.0], [0.7, 33.0], [0.8, 33.0], [0.9, 33.0], [1.0, 33.0], [1.1, 33.0], [1.2, 33.0], [1.3, 33.0], [1.4, 33.0], [1.5, 33.0], [1.6, 33.0], [1.7, 34.0], [1.8, 34.0], [1.9, 34.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 34.0], [2.4, 35.0], [2.5, 35.0], [2.6, 35.0], [2.7, 39.0], [2.8, 39.0], [2.9, 39.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 47.0], [3.5, 47.0], [3.6, 47.0], [3.7, 57.0], [3.8, 57.0], [3.9, 57.0], [4.0, 59.0], [4.1, 59.0], [4.2, 59.0], [4.3, 59.0], [4.4, 60.0], [4.5, 60.0], [4.6, 60.0], [4.7, 63.0], [4.8, 63.0], [4.9, 63.0], [5.0, 68.0], [5.1, 68.0], [5.2, 68.0], [5.3, 68.0], [5.4, 78.0], [5.5, 78.0], [5.6, 78.0], [5.7, 81.0], [5.8, 81.0], [5.9, 81.0], [6.0, 83.0], [6.1, 83.0], [6.2, 83.0], [6.3, 83.0], [6.4, 85.0], [6.5, 85.0], [6.6, 85.0], [6.7, 86.0], [6.8, 86.0], [6.9, 86.0], [7.0, 90.0], [7.1, 90.0], [7.2, 90.0], [7.3, 90.0], [7.4, 90.0], [7.5, 90.0], [7.6, 90.0], [7.7, 93.0], [7.8, 93.0], [7.9, 93.0], [8.0, 97.0], [8.1, 97.0], [8.2, 97.0], [8.3, 97.0], [8.4, 98.0], [8.5, 98.0], [8.6, 98.0], [8.7, 98.0], [8.8, 98.0], [8.9, 98.0], [9.0, 99.0], [9.1, 99.0], [9.2, 99.0], [9.3, 99.0], [9.4, 107.0], [9.5, 107.0], [9.6, 107.0], [9.7, 111.0], [9.8, 111.0], [9.9, 111.0], [10.0, 113.0], [10.1, 113.0], [10.2, 113.0], [10.3, 113.0], [10.4, 114.0], [10.5, 114.0], [10.6, 114.0], [10.7, 116.0], [10.8, 116.0], [10.9, 116.0], [11.0, 117.0], [11.1, 117.0], [11.2, 117.0], [11.3, 117.0], [11.4, 118.0], [11.5, 118.0], [11.6, 118.0], [11.7, 118.0], [11.8, 118.0], [11.9, 118.0], [12.0, 119.0], [12.1, 119.0], [12.2, 119.0], [12.3, 119.0], [12.4, 120.0], [12.5, 120.0], [12.6, 120.0], [12.7, 120.0], [12.8, 120.0], [12.9, 120.0], [13.0, 123.0], [13.1, 123.0], [13.2, 123.0], [13.3, 123.0], [13.4, 126.0], [13.5, 126.0], [13.6, 126.0], [13.7, 129.0], [13.8, 129.0], [13.9, 129.0], [14.0, 129.0], [14.1, 130.0], [14.2, 130.0], [14.3, 130.0], [14.4, 131.0], [14.5, 131.0], [14.6, 131.0], [14.7, 132.0], [14.8, 132.0], [14.9, 132.0], [15.0, 132.0], [15.1, 132.0], [15.2, 132.0], [15.3, 132.0], [15.4, 132.0], [15.5, 132.0], [15.6, 132.0], [15.7, 133.0], [15.8, 133.0], [15.9, 133.0], [16.0, 133.0], [16.1, 134.0], [16.2, 134.0], [16.3, 134.0], [16.4, 134.0], [16.5, 134.0], [16.6, 134.0], [16.7, 134.0], [16.8, 134.0], [16.9, 134.0], [17.0, 134.0], [17.1, 135.0], [17.2, 135.0], [17.3, 135.0], [17.4, 135.0], [17.5, 135.0], [17.6, 135.0], [17.7, 137.0], [17.8, 137.0], [17.9, 137.0], [18.0, 137.0], [18.1, 140.0], [18.2, 140.0], [18.3, 140.0], [18.4, 140.0], [18.5, 140.0], [18.6, 140.0], [18.7, 141.0], [18.8, 141.0], [18.9, 141.0], [19.0, 141.0], [19.1, 141.0], [19.2, 141.0], [19.3, 141.0], [19.4, 143.0], [19.5, 143.0], [19.6, 143.0], [19.7, 145.0], [19.8, 145.0], [19.9, 145.0], [20.0, 145.0], [20.1, 145.0], [20.2, 145.0], [20.3, 145.0], [20.4, 146.0], [20.5, 146.0], [20.6, 146.0], [20.7, 147.0], [20.8, 147.0], [20.9, 147.0], [21.0, 147.0], [21.1, 147.0], [21.2, 147.0], [21.3, 147.0], [21.4, 152.0], [21.5, 152.0], [21.6, 152.0], [21.7, 153.0], [21.8, 153.0], [21.9, 153.0], [22.0, 153.0], [22.1, 156.0], [22.2, 156.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 158.0], [22.8, 158.0], [22.9, 158.0], [23.0, 158.0], [23.1, 158.0], [23.2, 158.0], [23.3, 158.0], [23.4, 159.0], [23.5, 159.0], [23.6, 159.0], [23.7, 161.0], [23.8, 161.0], [23.9, 161.0], [24.0, 161.0], [24.1, 161.0], [24.2, 161.0], [24.3, 161.0], [24.4, 163.0], [24.5, 163.0], [24.6, 163.0], [24.7, 166.0], [24.8, 166.0], [24.9, 166.0], [25.0, 166.0], [25.1, 168.0], [25.2, 168.0], [25.3, 168.0], [25.4, 169.0], [25.5, 169.0], [25.6, 169.0], [25.7, 171.0], [25.8, 171.0], [25.9, 171.0], [26.0, 174.0], [26.1, 174.0], [26.2, 174.0], [26.3, 174.0], [26.4, 176.0], [26.5, 176.0], [26.6, 176.0], [26.7, 177.0], [26.8, 177.0], [26.9, 177.0], [27.0, 178.0], [27.1, 178.0], [27.2, 178.0], [27.3, 178.0], [27.4, 180.0], [27.5, 180.0], [27.6, 180.0], [27.7, 180.0], [27.8, 180.0], [27.9, 180.0], [28.0, 182.0], [28.1, 182.0], [28.2, 182.0], [28.3, 182.0], [28.4, 183.0], [28.5, 183.0], [28.6, 183.0], [28.7, 185.0], [28.8, 185.0], [28.9, 185.0], [29.0, 188.0], [29.1, 188.0], [29.2, 188.0], [29.3, 188.0], [29.4, 189.0], [29.5, 189.0], [29.6, 189.0], [29.7, 193.0], [29.8, 193.0], [29.9, 193.0], [30.0, 193.0], [30.1, 193.0], [30.2, 193.0], [30.3, 193.0], [30.4, 194.0], [30.5, 194.0], [30.6, 194.0], [30.7, 195.0], [30.8, 195.0], [30.9, 195.0], [31.0, 196.0], [31.1, 196.0], [31.2, 196.0], [31.3, 196.0], [31.4, 197.0], [31.5, 197.0], [31.6, 197.0], [31.7, 201.0], [31.8, 201.0], [31.9, 201.0], [32.0, 203.0], [32.1, 203.0], [32.2, 203.0], [32.3, 203.0], [32.4, 204.0], [32.5, 204.0], [32.6, 204.0], [32.7, 205.0], [32.8, 205.0], [32.9, 205.0], [33.0, 206.0], [33.1, 206.0], [33.2, 206.0], [33.3, 206.0], [33.4, 206.0], [33.5, 206.0], [33.6, 206.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 208.0], [34.1, 208.0], [34.2, 208.0], [34.3, 208.0], [34.4, 208.0], [34.5, 208.0], [34.6, 208.0], [34.7, 210.0], [34.8, 210.0], [34.9, 210.0], [35.0, 214.0], [35.1, 214.0], [35.2, 214.0], [35.3, 214.0], [35.4, 214.0], [35.5, 214.0], [35.6, 214.0], [35.7, 220.0], [35.8, 220.0], [35.9, 220.0], [36.0, 222.0], [36.1, 222.0], [36.2, 222.0], [36.3, 222.0], [36.4, 223.0], [36.5, 223.0], [36.6, 223.0], [36.7, 231.0], [36.8, 231.0], [36.9, 231.0], [37.0, 231.0], [37.1, 231.0], [37.2, 231.0], [37.3, 231.0], [37.4, 233.0], [37.5, 233.0], [37.6, 233.0], [37.7, 233.0], [37.8, 233.0], [37.9, 233.0], [38.0, 235.0], [38.1, 235.0], [38.2, 235.0], [38.3, 235.0], [38.4, 236.0], [38.5, 236.0], [38.6, 236.0], [38.7, 237.0], [38.8, 237.0], [38.9, 237.0], [39.0, 238.0], [39.1, 238.0], [39.2, 238.0], [39.3, 238.0], [39.4, 239.0], [39.5, 239.0], [39.6, 239.0], [39.7, 239.0], [39.8, 239.0], [39.9, 239.0], [40.0, 240.0], [40.1, 240.0], [40.2, 240.0], [40.3, 240.0], [40.4, 242.0], [40.5, 242.0], [40.6, 242.0], [40.7, 247.0], [40.8, 247.0], [40.9, 247.0], [41.0, 247.0], [41.1, 256.0], [41.2, 256.0], [41.3, 256.0], [41.4, 257.0], [41.5, 257.0], [41.6, 257.0], [41.7, 259.0], [41.8, 259.0], [41.9, 259.0], [42.0, 259.0], [42.1, 261.0], [42.2, 261.0], [42.3, 261.0], [42.4, 264.0], [42.5, 264.0], [42.6, 264.0], [42.7, 266.0], [42.8, 266.0], [42.9, 266.0], [43.0, 266.0], [43.1, 269.0], [43.2, 269.0], [43.3, 269.0], [43.4, 272.0], [43.5, 272.0], [43.6, 272.0], [43.7, 277.0], [43.8, 277.0], [43.9, 277.0], [44.0, 277.0], [44.1, 280.0], [44.2, 280.0], [44.3, 280.0], [44.4, 285.0], [44.5, 285.0], [44.6, 285.0], [44.7, 293.0], [44.8, 293.0], [44.9, 293.0], [45.0, 293.0], [45.1, 298.0], [45.2, 298.0], [45.3, 298.0], [45.4, 305.0], [45.5, 305.0], [45.6, 305.0], [45.7, 305.0], [45.8, 305.0], [45.9, 305.0], [46.0, 305.0], [46.1, 308.0], [46.2, 308.0], [46.3, 308.0], [46.4, 308.0], [46.5, 308.0], [46.6, 308.0], [46.7, 309.0], [46.8, 309.0], [46.9, 309.0], [47.0, 309.0], [47.1, 310.0], [47.2, 310.0], [47.3, 310.0], [47.4, 310.0], [47.5, 310.0], [47.6, 310.0], [47.7, 312.0], [47.8, 312.0], [47.9, 312.0], [48.0, 312.0], [48.1, 313.0], [48.2, 313.0], [48.3, 313.0], [48.4, 318.0], [48.5, 318.0], [48.6, 318.0], [48.7, 327.0], [48.8, 327.0], [48.9, 327.0], [49.0, 327.0], [49.1, 328.0], [49.2, 328.0], [49.3, 328.0], [49.4, 328.0], [49.5, 328.0], [49.6, 328.0], [49.7, 332.0], [49.8, 332.0], [49.9, 332.0], [50.0, 332.0], [50.1, 338.0], [50.2, 338.0], [50.3, 338.0], [50.4, 338.0], [50.5, 338.0], [50.6, 338.0], [50.7, 342.0], [50.8, 342.0], [50.9, 342.0], [51.0, 342.0], [51.1, 349.0], [51.2, 349.0], [51.3, 349.0], [51.4, 352.0], [51.5, 352.0], [51.6, 352.0], [51.7, 352.0], [51.8, 352.0], [51.9, 352.0], [52.0, 352.0], [52.1, 352.0], [52.2, 352.0], [52.3, 352.0], [52.4, 353.0], [52.5, 353.0], [52.6, 353.0], [52.7, 354.0], [52.8, 354.0], [52.9, 354.0], [53.0, 354.0], [53.1, 355.0], [53.2, 355.0], [53.3, 355.0], [53.4, 358.0], [53.5, 358.0], [53.6, 358.0], [53.7, 359.0], [53.8, 359.0], [53.9, 359.0], [54.0, 359.0], [54.1, 360.0], [54.2, 360.0], [54.3, 360.0], [54.4, 360.0], [54.5, 360.0], [54.6, 360.0], [54.7, 361.0], [54.8, 361.0], [54.9, 361.0], [55.0, 361.0], [55.1, 362.0], [55.2, 362.0], [55.3, 362.0], [55.4, 363.0], [55.5, 363.0], [55.6, 363.0], [55.7, 366.0], [55.8, 366.0], [55.9, 366.0], [56.0, 366.0], [56.1, 366.0], [56.2, 366.0], [56.3, 366.0], [56.4, 367.0], [56.5, 367.0], [56.6, 367.0], [56.7, 367.0], [56.8, 367.0], [56.9, 367.0], [57.0, 367.0], [57.1, 369.0], [57.2, 369.0], [57.3, 369.0], [57.4, 369.0], [57.5, 369.0], [57.6, 369.0], [57.7, 370.0], [57.8, 370.0], [57.9, 370.0], [58.0, 370.0], [58.1, 371.0], [58.2, 371.0], [58.3, 371.0], [58.4, 371.0], [58.5, 371.0], [58.6, 371.0], [58.7, 373.0], [58.8, 373.0], [58.9, 373.0], [59.0, 373.0], [59.1, 375.0], [59.2, 375.0], [59.3, 375.0], [59.4, 375.0], [59.5, 375.0], [59.6, 375.0], [59.7, 375.0], [59.8, 375.0], [59.9, 375.0], [60.0, 375.0], [60.1, 376.0], [60.2, 376.0], [60.3, 376.0], [60.4, 379.0], [60.5, 379.0], [60.6, 379.0], [60.7, 380.0], [60.8, 380.0], [60.9, 380.0], [61.0, 380.0], [61.1, 381.0], [61.2, 381.0], [61.3, 381.0], [61.4, 382.0], [61.5, 382.0], [61.6, 382.0], [61.7, 385.0], [61.8, 385.0], [61.9, 385.0], [62.0, 385.0], [62.1, 387.0], [62.2, 387.0], [62.3, 387.0], [62.4, 393.0], [62.5, 393.0], [62.6, 393.0], [62.7, 393.0], [62.8, 393.0], [62.9, 393.0], [63.0, 393.0], [63.1, 398.0], [63.2, 398.0], [63.3, 398.0], [63.4, 398.0], [63.5, 398.0], [63.6, 398.0], [63.7, 398.0], [63.8, 398.0], [63.9, 398.0], [64.0, 398.0], [64.1, 401.0], [64.2, 401.0], [64.3, 401.0], [64.4, 402.0], [64.5, 402.0], [64.6, 402.0], [64.7, 404.0], [64.8, 404.0], [64.9, 404.0], [65.0, 404.0], [65.1, 406.0], [65.2, 406.0], [65.3, 406.0], [65.4, 407.0], [65.5, 407.0], [65.6, 407.0], [65.7, 407.0], [65.8, 407.0], [65.9, 407.0], [66.0, 407.0], [66.1, 408.0], [66.2, 408.0], [66.3, 408.0], [66.4, 412.0], [66.5, 412.0], [66.6, 412.0], [66.7, 422.0], [66.8, 422.0], [66.9, 422.0], [67.0, 422.0], [67.1, 422.0], [67.2, 422.0], [67.3, 422.0], [67.4, 423.0], [67.5, 423.0], [67.6, 423.0], [67.7, 425.0], [67.8, 425.0], [67.9, 425.0], [68.0, 425.0], [68.1, 425.0], [68.2, 425.0], [68.3, 425.0], [68.4, 435.0], [68.5, 435.0], [68.6, 435.0], [68.7, 436.0], [68.8, 436.0], [68.9, 436.0], [69.0, 436.0], [69.1, 437.0], [69.2, 437.0], [69.3, 437.0], [69.4, 440.0], [69.5, 440.0], [69.6, 440.0], [69.7, 445.0], [69.8, 445.0], [69.9, 445.0], [70.0, 445.0], [70.1, 447.0], [70.2, 447.0], [70.3, 447.0], [70.4, 448.0], [70.5, 448.0], [70.6, 448.0], [70.7, 448.0], [70.8, 448.0], [70.9, 448.0], [71.0, 448.0], [71.1, 455.0], [71.2, 455.0], [71.3, 455.0], [71.4, 464.0], [71.5, 464.0], [71.6, 464.0], [71.7, 483.0], [71.8, 483.0], [71.9, 483.0], [72.0, 483.0], [72.1, 487.0], [72.2, 487.0], [72.3, 487.0], [72.4, 490.0], [72.5, 490.0], [72.6, 490.0], [72.7, 497.0], [72.8, 497.0], [72.9, 497.0], [73.0, 542.0], [73.1, 542.0], [73.2, 542.0], [73.3, 542.0], [73.4, 764.0], [73.5, 764.0], [73.6, 764.0], [73.7, 766.0], [73.8, 766.0], [73.9, 766.0], [74.0, 818.0], [74.1, 818.0], [74.2, 818.0], [74.3, 818.0], [74.4, 836.0], [74.5, 836.0], [74.6, 836.0], [74.7, 902.0], [74.8, 902.0], [74.9, 902.0], [75.0, 913.0], [75.1, 913.0], [75.2, 913.0], [75.3, 913.0], [75.4, 914.0], [75.5, 914.0], [75.6, 914.0], [75.7, 915.0], [75.8, 915.0], [75.9, 915.0], [76.0, 958.0], [76.1, 958.0], [76.2, 958.0], [76.3, 958.0], [76.4, 1042.0], [76.5, 1042.0], [76.6, 1042.0], [76.7, 1068.0], [76.8, 1068.0], [76.9, 1068.0], [77.0, 1084.0], [77.1, 1084.0], [77.2, 1084.0], [77.3, 1084.0], [77.4, 1103.0], [77.5, 1103.0], [77.6, 1103.0], [77.7, 1105.0], [77.8, 1105.0], [77.9, 1105.0], [78.0, 1107.0], [78.1, 1107.0], [78.2, 1107.0], [78.3, 1107.0], [78.4, 1112.0], [78.5, 1112.0], [78.6, 1112.0], [78.7, 1122.0], [78.8, 1122.0], [78.9, 1122.0], [79.0, 1137.0], [79.1, 1137.0], [79.2, 1137.0], [79.3, 1137.0], [79.4, 1140.0], [79.5, 1140.0], [79.6, 1140.0], [79.7, 1141.0], [79.8, 1141.0], [79.9, 1141.0], [80.0, 1158.0], [80.1, 1158.0], [80.2, 1158.0], [80.3, 1158.0], [80.4, 1160.0], [80.5, 1160.0], [80.6, 1160.0], [80.7, 1170.0], [80.8, 1170.0], [80.9, 1170.0], [81.0, 1178.0], [81.1, 1178.0], [81.2, 1178.0], [81.3, 1178.0], [81.4, 1184.0], [81.5, 1184.0], [81.6, 1184.0], [81.7, 1195.0], [81.8, 1195.0], [81.9, 1195.0], [82.0, 1196.0], [82.1, 1196.0], [82.2, 1196.0], [82.3, 1196.0], [82.4, 1202.0], [82.5, 1202.0], [82.6, 1202.0], [82.7, 1206.0], [82.8, 1206.0], [82.9, 1206.0], [83.0, 1208.0], [83.1, 1208.0], [83.2, 1208.0], [83.3, 1208.0], [83.4, 1213.0], [83.5, 1213.0], [83.6, 1213.0], [83.7, 1220.0], [83.8, 1220.0], [83.9, 1220.0], [84.0, 1231.0], [84.1, 1231.0], [84.2, 1231.0], [84.3, 1231.0], [84.4, 1233.0], [84.5, 1233.0], [84.6, 1233.0], [84.7, 1235.0], [84.8, 1235.0], [84.9, 1235.0], [85.0, 1239.0], [85.1, 1239.0], [85.2, 1239.0], [85.3, 1239.0], [85.4, 1243.0], [85.5, 1243.0], [85.6, 1243.0], [85.7, 1245.0], [85.8, 1245.0], [85.9, 1245.0], [86.0, 1246.0], [86.1, 1246.0], [86.2, 1246.0], [86.3, 1246.0], [86.4, 1247.0], [86.5, 1247.0], [86.6, 1247.0], [86.7, 1250.0], [86.8, 1250.0], [86.9, 1250.0], [87.0, 1252.0], [87.1, 1252.0], [87.2, 1252.0], [87.3, 1252.0], [87.4, 1254.0], [87.5, 1254.0], [87.6, 1254.0], [87.7, 1256.0], [87.8, 1256.0], [87.9, 1256.0], [88.0, 1257.0], [88.1, 1257.0], [88.2, 1257.0], [88.3, 1257.0], [88.4, 1257.0], [88.5, 1257.0], [88.6, 1257.0], [88.7, 1260.0], [88.8, 1260.0], [88.9, 1260.0], [89.0, 1262.0], [89.1, 1262.0], [89.2, 1262.0], [89.3, 1262.0], [89.4, 1263.0], [89.5, 1263.0], [89.6, 1263.0], [89.7, 1271.0], [89.8, 1271.0], [89.9, 1271.0], [90.0, 1276.0], [90.1, 1276.0], [90.2, 1276.0], [90.3, 1276.0], [90.4, 1279.0], [90.5, 1279.0], [90.6, 1279.0], [90.7, 1280.0], [90.8, 1280.0], [90.9, 1280.0], [91.0, 1288.0], [91.1, 1288.0], [91.2, 1288.0], [91.3, 1288.0], [91.4, 1292.0], [91.5, 1292.0], [91.6, 1292.0], [91.7, 1292.0], [91.8, 1292.0], [91.9, 1292.0], [92.0, 1293.0], [92.1, 1293.0], [92.2, 1293.0], [92.3, 1293.0], [92.4, 1294.0], [92.5, 1294.0], [92.6, 1294.0], [92.7, 1297.0], [92.8, 1297.0], [92.9, 1297.0], [93.0, 1301.0], [93.1, 1301.0], [93.2, 1301.0], [93.3, 1301.0], [93.4, 1301.0], [93.5, 1301.0], [93.6, 1301.0], [93.7, 1321.0], [93.8, 1321.0], [93.9, 1321.0], [94.0, 1322.0], [94.1, 1322.0], [94.2, 1322.0], [94.3, 1322.0], [94.4, 1324.0], [94.5, 1324.0], [94.6, 1324.0], [94.7, 1329.0], [94.8, 1329.0], [94.9, 1329.0], [95.0, 1333.0], [95.1, 1333.0], [95.2, 1333.0], [95.3, 1333.0], [95.4, 1339.0], [95.5, 1339.0], [95.6, 1339.0], [95.7, 1345.0], [95.8, 1345.0], [95.9, 1345.0], [96.0, 1346.0], [96.1, 1346.0], [96.2, 1346.0], [96.3, 1346.0], [96.4, 1365.0], [96.5, 1365.0], [96.6, 1365.0], [96.7, 1380.0], [96.8, 1380.0], [96.9, 1380.0], [97.0, 1387.0], [97.1, 1387.0], [97.2, 1387.0], [97.3, 1387.0], [97.4, 1416.0], [97.5, 1416.0], [97.6, 1416.0], [97.7, 1422.0], [97.8, 1422.0], [97.9, 1422.0], [98.0, 1445.0], [98.1, 1445.0], [98.2, 1445.0], [98.3, 1445.0], [98.4, 1566.0], [98.5, 1566.0], [98.6, 1566.0], [98.7, 1589.0], [98.8, 1589.0], [98.9, 1589.0], [99.0, 1592.0], [99.1, 1592.0], [99.2, 1592.0], [99.3, 1592.0], [99.4, 1624.0], [99.5, 1624.0], [99.6, 1624.0], [99.7, 1628.0], [99.8, 1628.0], [99.9, 1628.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 87.0, "series": [{"data": [[0.0, 42.0], [600.0, 11.0], [700.0, 15.0], [800.0, 6.0], [200.0, 44.0], [900.0, 12.0], [1000.0, 8.0], [1100.0, 7.0], [300.0, 20.0], [1200.0, 26.0], [1300.0, 5.0], [1400.0, 3.0], [100.0, 87.0], [400.0, 14.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[2100.0, 8.0], [0.0, 15.0], [2200.0, 2.0], [600.0, 5.0], [700.0, 3.0], [800.0, 5.0], [200.0, 39.0], [900.0, 5.0], [1000.0, 7.0], [1100.0, 10.0], [300.0, 26.0], [1200.0, 6.0], [1300.0, 17.0], [1400.0, 19.0], [1500.0, 26.0], [1600.0, 30.0], [100.0, 23.0], [400.0, 6.0], [1700.0, 14.0], [1800.0, 12.0], [1900.0, 9.0], [500.0, 6.0], [2000.0, 7.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[0.0, 28.0], [700.0, 2.0], [200.0, 41.0], [800.0, 2.0], [900.0, 5.0], [1000.0, 3.0], [1100.0, 15.0], [300.0, 56.0], [1200.0, 32.0], [1300.0, 13.0], [1400.0, 3.0], [1500.0, 3.0], [100.0, 67.0], [400.0, 27.0], [1600.0, 2.0], [500.0, 1.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 113.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 535.0, "series": [{"data": [[0.0, 535.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 252.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 113.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 128.51111111111095, "minX": 1.73039694E12, "maxY": 128.51111111111095, "series": [{"data": [[1.73039694E12, 128.51111111111095]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039694E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.0, "maxY": 1799.0, "series": [{"data": [[2.0, 74.0], [3.0, 67.0], [4.0, 70.0], [6.0, 65.5], [8.0, 56.5], [9.0, 40.0], [10.0, 36.0], [11.0, 32.0], [12.0, 32.0], [14.0, 66.5], [15.0, 79.0], [16.0, 58.5], [17.0, 92.0], [18.0, 88.5], [19.0, 87.0], [20.0, 89.0], [21.0, 81.0], [22.0, 82.0], [23.0, 144.0], [24.0, 84.0], [27.0, 99.2], [28.0, 123.71428571428574], [29.0, 95.0], [30.0, 162.0], [32.0, 109.0], [35.0, 105.0], [37.0, 159.0], [39.0, 181.12499999999997], [38.0, 149.75], [41.0, 167.16666666666666], [40.0, 123.5], [42.0, 239.33333333333334], [43.0, 146.16666666666666], [44.0, 154.62500000000003], [50.0, 90.0], [52.0, 89.0], [55.0, 171.0], [57.0, 181.0], [56.0, 161.0], [58.0, 150.0], [62.0, 137.5], [67.0, 124.0], [64.0, 149.0], [82.0, 123.0], [89.0, 136.0], [88.0, 145.0], [118.0, 923.6666666666666], [119.0, 269.0], [123.0, 484.84210526315786], [127.0, 767.4], [126.0, 1253.5], [124.0, 1212.0], [132.0, 1296.0], [131.0, 181.33333333333334], [130.0, 213.0], [128.0, 1227.0], [142.0, 1251.0], [141.0, 991.6666666666666], [151.0, 844.0], [150.0, 924.5], [149.0, 801.0], [148.0, 932.0], [147.0, 933.0], [145.0, 862.0], [144.0, 1209.0], [159.0, 1103.0], [158.0, 742.0], [157.0, 1116.0], [156.0, 1136.0], [155.0, 932.0], [154.0, 904.0], [153.0, 906.0], [152.0, 1229.0], [166.0, 686.0], [165.0, 834.0], [164.0, 990.0], [163.0, 851.0], [162.0, 444.0], [160.0, 787.0], [175.0, 792.0], [174.0, 797.0], [173.0, 671.0], [172.0, 666.0], [171.0, 791.0], [170.0, 686.0], [169.0, 701.0], [168.0, 878.5], [182.0, 680.0], [181.0, 936.0], [180.0, 750.0], [179.0, 647.0], [178.0, 758.0], [177.0, 765.0], [176.0, 662.0], [191.0, 759.0], [190.0, 862.3333333333334], [187.0, 671.0], [186.0, 729.5], [203.0, 294.5], [206.0, 380.0], [205.0, 402.0], [204.0, 384.0], [202.0, 391.0], [201.0, 402.5], [200.0, 460.44444444444446], [210.0, 371.5], [211.0, 365.5], [209.0, 408.0], [208.0, 382.5], [1.0, 73.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[103.84333333333342, 450.18333333333345]], "isOverall": false, "label": "Logout Request-Aggregated", "isController": false}, {"data": [[32.0, 132.5], [37.0, 205.5], [39.0, 241.0], [38.0, 221.6], [40.0, 248.54545454545453], [41.0, 218.125], [42.0, 340.06666666666666], [43.0, 305.0], [44.0, 208.2], [54.0, 197.0], [56.0, 219.0], [62.0, 209.0], [67.0, 177.0], [66.0, 174.0], [93.0, 269.0], [104.0, 284.0], [119.0, 772.5], [118.0, 303.0], [123.0, 1343.833333333333], [124.0, 1441.0], [152.0, 1632.0], [160.0, 838.0], [189.0, 1141.4444444444443], [190.0, 1334.1875000000002], [191.0, 1266.4782608695655], [194.0, 938.7142857142857], [193.0, 402.0], [195.0, 1317.0], [196.0, 1469.25], [197.0, 1307.0], [199.0, 1211.3333333333333], [12.0, 85.77777777777777], [203.0, 1537.7222222222222], [202.0, 1412.0], [201.0, 1154.0], [200.0, 1799.0], [204.0, 1696.3461538461538], [205.0, 1784.9999999999998], [207.0, 1293.8], [209.0, 1252.4166666666667], [210.0, 1202.0], [211.0, 546.0], [13.0, 96.0], [15.0, 82.0], [27.0, 140.0], [28.0, 122.0], [30.0, 139.0]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[149.57666666666668, 1034.8133333333335]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}, {"data": [[9.0, 34.0], [10.0, 35.666666666666664], [12.0, 39.375], [17.0, 106.33333333333333], [20.0, 83.0], [24.0, 78.0], [27.0, 92.0], [28.0, 121.89999999999999], [29.0, 107.33333333333333], [37.0, 155.5], [39.0, 183.66666666666666], [38.0, 159.6], [40.0, 132.07142857142856], [41.0, 141.0], [42.0, 269.04761904761904], [43.0, 195.5], [44.0, 214.33333333333334], [55.0, 197.0], [54.0, 115.0], [56.0, 182.0], [62.0, 134.0], [82.0, 132.0], [89.0, 128.0], [104.0, 97.0], [118.0, 768.5], [123.0, 1219.0], [127.0, 1290.0], [126.0, 1277.578947368421], [124.0, 1263.0], [128.0, 1227.25], [143.0, 1247.5], [142.0, 1142.3333333333333], [141.0, 1171.25], [151.0, 914.0], [150.0, 914.0], [148.0, 1322.0], [144.0, 1153.25], [158.0, 1175.3333333333333], [157.0, 1112.0], [155.0, 1105.0], [152.0, 1066.5], [166.0, 818.0], [164.0, 1159.0], [163.0, 1042.0], [160.0, 836.0], [170.0, 1107.0], [169.0, 1140.0], [179.0, 1068.0], [178.0, 764.0], [177.0, 766.0], [193.0, 114.0], [203.0, 174.0], [204.0, 213.7567567567568], [205.0, 285.0], [207.0, 352.0], [202.0, 393.7142857142857], [201.0, 423.75], [200.0, 435.0], [209.0, 387.1212121212121], [210.0, 372.50000000000006], [211.0, 493.2]], "isOverall": false, "label": "Home Request", "isController": false}, {"data": [[132.11333333333332, 506.1766666666667]], "isOverall": false, "label": "Home Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 211.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2685.0, "minX": 1.73039694E12, "maxY": 9330.0, "series": [{"data": [[1.73039694E12, 9330.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73039694E12, 2685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039694E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 450.18333333333345, "minX": 1.73039694E12, "maxY": 1034.8133333333335, "series": [{"data": [[1.73039694E12, 450.18333333333345]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039694E12, 1034.8133333333335]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039694E12, 506.1766666666667]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039694E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 449.7399999999998, "minX": 1.73039694E12, "maxY": 1019.2100000000011, "series": [{"data": [[1.73039694E12, 449.7399999999998]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039694E12, 1019.2100000000011]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039694E12, 499.8699999999999]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039694E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73039694E12, "maxY": 304.8300000000001, "series": [{"data": [[1.73039694E12, 0.0]], "isOverall": false, "label": "Logout Request", "isController": false}, {"data": [[1.73039694E12, 304.8300000000001]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[1.73039694E12, 0.0]], "isOverall": false, "label": "Home Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039694E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.73039694E12, "maxY": 2254.0, "series": [{"data": [[1.73039694E12, 2254.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73039694E12, 1586.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73039694E12, 2105.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73039694E12, 1778.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73039694E12, 32.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73039694E12, 370.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039694E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 98.5, "minX": 145.0, "maxY": 996.0, "series": [{"data": [[262.0, 996.0], [145.0, 182.0], [333.0, 640.0], [160.0, 98.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 333.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 98.5, "minX": 145.0, "maxY": 967.0, "series": [{"data": [[262.0, 967.0], [145.0, 179.0], [333.0, 640.0], [160.0, 98.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 333.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039694E12, "maxY": 15.0, "series": [{"data": [[1.73039694E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039694E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039694E12, "maxY": 15.0, "series": [{"data": [[1.73039694E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73039694E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.73039694E12, "maxY": 5.0, "series": [{"data": [[1.73039694E12, 5.0]], "isOverall": false, "label": "Home Request-success", "isController": false}, {"data": [[1.73039694E12, 5.0]], "isOverall": false, "label": "Logout Request-success", "isController": false}, {"data": [[1.73039694E12, 5.0]], "isOverall": false, "label": "Login Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039694E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.73039694E12, "maxY": 15.0, "series": [{"data": [[1.73039694E12, 15.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73039694E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

